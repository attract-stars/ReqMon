/*******************************************************************************
 * Copyright (C) 2020 Fraunhofer ISST
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************
 *
 * generated by Xtext 2.17.1
 */
package de.fraunhofer.isst.automotive.stars.reqmon.dsl.mapping.language.ui.contentassist


/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class MappingProposalProvider extends AbstractMappingProposalProvider {
	
	/*override complete_Definition(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_Definition(model, ruleCall, context, acceptor)
		for (Mapping map : (model as Model).mappings) {
			println(map.definition + ", " + map.rule + ", " + map.test)
			if (map.definition !== null) {
				println("Definition")
				if (map.definition.def == "object") {
					println("Object: " + map.definition.eCrossReferences)
				}
				else if (map.definition.def == "message") {
					println("Message: " + map.definition.eCrossReferences)
					for(EObject mess : map.definition.eCrossReferences) {
						println("Message: " + (mess as MessageNode).alloc)
					}
				}
			}
		}
	}*/
	

	
	/*static class StringProposalDelegate extends Delegate {
 
        ContentAssistContext ctx
 
        new(ICompletionProposalAcceptor delegate, ContentAssistContext ctx) {
            super(delegate)
            this.ctx = ctx
        }
 
        override accept(ICompletionProposal proposal) {
            if (proposal instanceof ConfigurableCompletionProposal) {
                val endPos = proposal.replacementOffset + proposal.replacementLength 
                if (ctx.document !== null && ctx.document.length > endPos) {
                    // We are not at the end of the file
                    //if ("\"" === ctx.document.get(endPos, 1)) {
                        proposal.replacementLength = proposal.replacementLength-1
                        proposal.replacementString = proposal.replacementString.substring(1,proposal.replacementString.length-1)
                    //}
                }
            }
            super.accept(proposal)
        }
 
    }*/
	
}

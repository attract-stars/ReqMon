/**
 * generated by Xtext 2.16.0
 */
package de.fraunhofer.isst.stars.requirementDSL.impl;

import de.fraunhofer.isst.stars.requirementDSL.Actors;
import de.fraunhofer.isst.stars.requirementDSL.Existence;
import de.fraunhofer.isst.stars.requirementDSL.RelativeClause;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Existence</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.ExistenceImpl#getActors <em>Actors</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.ExistenceImpl#getRelativeClause <em>Relative Clause</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExistenceImpl extends ExistenceSentenceImpl implements Existence
{
  /**
   * The cached value of the '{@link #getActors() <em>Actors</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActors()
   * @generated
   * @ordered
   */
  protected Actors actors;

  /**
   * The cached value of the '{@link #getRelativeClause() <em>Relative Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelativeClause()
   * @generated
   * @ordered
   */
  protected RelativeClause relativeClause;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExistenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RequirementDSLPackage.Literals.EXISTENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actors getActors()
  {
    return actors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActors(Actors newActors, NotificationChain msgs)
  {
    Actors oldActors = actors;
    actors = newActors;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.EXISTENCE__ACTORS, oldActors, newActors);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActors(Actors newActors)
  {
    if (newActors != actors)
    {
      NotificationChain msgs = null;
      if (actors != null)
        msgs = ((InternalEObject)actors).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.EXISTENCE__ACTORS, null, msgs);
      if (newActors != null)
        msgs = ((InternalEObject)newActors).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.EXISTENCE__ACTORS, null, msgs);
      msgs = basicSetActors(newActors, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.EXISTENCE__ACTORS, newActors, newActors));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelativeClause getRelativeClause()
  {
    return relativeClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRelativeClause(RelativeClause newRelativeClause, NotificationChain msgs)
  {
    RelativeClause oldRelativeClause = relativeClause;
    relativeClause = newRelativeClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.EXISTENCE__RELATIVE_CLAUSE, oldRelativeClause, newRelativeClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRelativeClause(RelativeClause newRelativeClause)
  {
    if (newRelativeClause != relativeClause)
    {
      NotificationChain msgs = null;
      if (relativeClause != null)
        msgs = ((InternalEObject)relativeClause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.EXISTENCE__RELATIVE_CLAUSE, null, msgs);
      if (newRelativeClause != null)
        msgs = ((InternalEObject)newRelativeClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.EXISTENCE__RELATIVE_CLAUSE, null, msgs);
      msgs = basicSetRelativeClause(newRelativeClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.EXISTENCE__RELATIVE_CLAUSE, newRelativeClause, newRelativeClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.EXISTENCE__ACTORS:
        return basicSetActors(null, msgs);
      case RequirementDSLPackage.EXISTENCE__RELATIVE_CLAUSE:
        return basicSetRelativeClause(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.EXISTENCE__ACTORS:
        return getActors();
      case RequirementDSLPackage.EXISTENCE__RELATIVE_CLAUSE:
        return getRelativeClause();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.EXISTENCE__ACTORS:
        setActors((Actors)newValue);
        return;
      case RequirementDSLPackage.EXISTENCE__RELATIVE_CLAUSE:
        setRelativeClause((RelativeClause)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.EXISTENCE__ACTORS:
        setActors((Actors)null);
        return;
      case RequirementDSLPackage.EXISTENCE__RELATIVE_CLAUSE:
        setRelativeClause((RelativeClause)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.EXISTENCE__ACTORS:
        return actors != null;
      case RequirementDSLPackage.EXISTENCE__RELATIVE_CLAUSE:
        return relativeClause != null;
    }
    return super.eIsSet(featureID);
  }

} //ExistenceImpl

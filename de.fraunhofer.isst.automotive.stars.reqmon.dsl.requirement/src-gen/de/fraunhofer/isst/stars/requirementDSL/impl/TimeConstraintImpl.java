/**
 * generated by Xtext 2.14.0
 */
package de.fraunhofer.isst.stars.requirementDSL.impl;

import de.fraunhofer.isst.stars.requirementDSL.ConstraintOrdinators;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage;
import de.fraunhofer.isst.stars.requirementDSL.TimeConstraint;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Time Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.TimeConstraintImpl#getOrdinator <em>Ordinator</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.TimeConstraintImpl#getTime <em>Time</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.TimeConstraintImpl#getUnit <em>Unit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TimeConstraintImpl extends MinimalEObjectImpl.Container implements TimeConstraint
{
  /**
   * The cached value of the '{@link #getOrdinator() <em>Ordinator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrdinator()
   * @generated
   * @ordered
   */
  protected ConstraintOrdinators ordinator;

  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final int TIME_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected int time = TIME_EDEFAULT;

  /**
   * The default value of the '{@link #getUnit() <em>Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected static final String UNIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUnit() <em>Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected String unit = UNIT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TimeConstraintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RequirementDSLPackage.Literals.TIME_CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstraintOrdinators getOrdinator()
  {
    return ordinator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOrdinator(ConstraintOrdinators newOrdinator, NotificationChain msgs)
  {
    ConstraintOrdinators oldOrdinator = ordinator;
    ordinator = newOrdinator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.TIME_CONSTRAINT__ORDINATOR, oldOrdinator, newOrdinator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOrdinator(ConstraintOrdinators newOrdinator)
  {
    if (newOrdinator != ordinator)
    {
      NotificationChain msgs = null;
      if (ordinator != null)
        msgs = ((InternalEObject)ordinator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.TIME_CONSTRAINT__ORDINATOR, null, msgs);
      if (newOrdinator != null)
        msgs = ((InternalEObject)newOrdinator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.TIME_CONSTRAINT__ORDINATOR, null, msgs);
      msgs = basicSetOrdinator(newOrdinator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.TIME_CONSTRAINT__ORDINATOR, newOrdinator, newOrdinator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTime(int newTime)
  {
    int oldTime = time;
    time = newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.TIME_CONSTRAINT__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getUnit()
  {
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnit(String newUnit)
  {
    String oldUnit = unit;
    unit = newUnit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.TIME_CONSTRAINT__UNIT, oldUnit, unit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.TIME_CONSTRAINT__ORDINATOR:
        return basicSetOrdinator(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.TIME_CONSTRAINT__ORDINATOR:
        return getOrdinator();
      case RequirementDSLPackage.TIME_CONSTRAINT__TIME:
        return getTime();
      case RequirementDSLPackage.TIME_CONSTRAINT__UNIT:
        return getUnit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.TIME_CONSTRAINT__ORDINATOR:
        setOrdinator((ConstraintOrdinators)newValue);
        return;
      case RequirementDSLPackage.TIME_CONSTRAINT__TIME:
        setTime((Integer)newValue);
        return;
      case RequirementDSLPackage.TIME_CONSTRAINT__UNIT:
        setUnit((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.TIME_CONSTRAINT__ORDINATOR:
        setOrdinator((ConstraintOrdinators)null);
        return;
      case RequirementDSLPackage.TIME_CONSTRAINT__TIME:
        setTime(TIME_EDEFAULT);
        return;
      case RequirementDSLPackage.TIME_CONSTRAINT__UNIT:
        setUnit(UNIT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.TIME_CONSTRAINT__ORDINATOR:
        return ordinator != null;
      case RequirementDSLPackage.TIME_CONSTRAINT__TIME:
        return time != TIME_EDEFAULT;
      case RequirementDSLPackage.TIME_CONSTRAINT__UNIT:
        return UNIT_EDEFAULT == null ? unit != null : !UNIT_EDEFAULT.equals(unit);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (time: ");
    result.append(time);
    result.append(", unit: ");
    result.append(unit);
    result.append(')');
    return result.toString();
  }

} //TimeConstraintImpl

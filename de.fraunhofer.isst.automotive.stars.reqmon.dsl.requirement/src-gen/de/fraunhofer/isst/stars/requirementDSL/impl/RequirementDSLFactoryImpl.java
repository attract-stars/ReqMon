/**
 * generated by Xtext 2.16.0
 */
package de.fraunhofer.isst.stars.requirementDSL.impl;

import de.fraunhofer.isst.stars.requirementDSL.Actor;
import de.fraunhofer.isst.stars.requirementDSL.Actors;
import de.fraunhofer.isst.stars.requirementDSL.AuxNeg;
import de.fraunhofer.isst.stars.requirementDSL.Clause;
import de.fraunhofer.isst.stars.requirementDSL.ClauseOrdinator;
import de.fraunhofer.isst.stars.requirementDSL.Clauses;
import de.fraunhofer.isst.stars.requirementDSL.ConditionalClause;
import de.fraunhofer.isst.stars.requirementDSL.Constraint;
import de.fraunhofer.isst.stars.requirementDSL.ConstraintOrdinators;
import de.fraunhofer.isst.stars.requirementDSL.Constraints;
import de.fraunhofer.isst.stars.requirementDSL.Existence;
import de.fraunhofer.isst.stars.requirementDSL.ExistencePreface;
import de.fraunhofer.isst.stars.requirementDSL.ExistenceSentence;
import de.fraunhofer.isst.stars.requirementDSL.FloatValue;
import de.fraunhofer.isst.stars.requirementDSL.IntValue;
import de.fraunhofer.isst.stars.requirementDSL.IntervallConstraints;
import de.fraunhofer.isst.stars.requirementDSL.MainClause;
import de.fraunhofer.isst.stars.requirementDSL.Modality;
import de.fraunhofer.isst.stars.requirementDSL.ModalitySentence;
import de.fraunhofer.isst.stars.requirementDSL.Model;
import de.fraunhofer.isst.stars.requirementDSL.Modifier;
import de.fraunhofer.isst.stars.requirementDSL.ObjectConstraint;
import de.fraunhofer.isst.stars.requirementDSL.ObjectSet;
import de.fraunhofer.isst.stars.requirementDSL.PreNominative;
import de.fraunhofer.isst.stars.requirementDSL.PredOrObject;
import de.fraunhofer.isst.stars.requirementDSL.Predicate;
import de.fraunhofer.isst.stars.requirementDSL.PredicateObject;
import de.fraunhofer.isst.stars.requirementDSL.PredicateSentence;
import de.fraunhofer.isst.stars.requirementDSL.Preds;
import de.fraunhofer.isst.stars.requirementDSL.Property;
import de.fraunhofer.isst.stars.requirementDSL.PropertySentence;
import de.fraunhofer.isst.stars.requirementDSL.RelObjects;
import de.fraunhofer.isst.stars.requirementDSL.Relation;
import de.fraunhofer.isst.stars.requirementDSL.RelativeClause;
import de.fraunhofer.isst.stars.requirementDSL.RelativeSentence;
import de.fraunhofer.isst.stars.requirementDSL.Requirement;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLFactory;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage;
import de.fraunhofer.isst.stars.requirementDSL.RequirementText;
import de.fraunhofer.isst.stars.requirementDSL.SentenceBegin;
import de.fraunhofer.isst.stars.requirementDSL.SentenceEnding;
import de.fraunhofer.isst.stars.requirementDSL.SetConstraint;
import de.fraunhofer.isst.stars.requirementDSL.SingleValueConstraints;
import de.fraunhofer.isst.stars.requirementDSL.TimeConstraint;
import de.fraunhofer.isst.stars.requirementDSL.UnitConstraints;
import de.fraunhofer.isst.stars.requirementDSL.Value;
import de.fraunhofer.isst.stars.requirementDSL.ValueSet;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RequirementDSLFactoryImpl extends EFactoryImpl implements RequirementDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RequirementDSLFactory init()
  {
    try
    {
      RequirementDSLFactory theRequirementDSLFactory = (RequirementDSLFactory)EPackage.Registry.INSTANCE.getEFactory(RequirementDSLPackage.eNS_URI);
      if (theRequirementDSLFactory != null)
      {
        return theRequirementDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RequirementDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequirementDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RequirementDSLPackage.MODEL: return createModel();
      case RequirementDSLPackage.REQUIREMENT: return createRequirement();
      case RequirementDSLPackage.REQUIREMENT_TEXT: return createRequirementText();
      case RequirementDSLPackage.CONDITIONAL_CLAUSE: return createConditionalClause();
      case RequirementDSLPackage.MAIN_CLAUSE: return createMainClause();
      case RequirementDSLPackage.CLAUSES: return createClauses();
      case RequirementDSLPackage.CLAUSE: return createClause();
      case RequirementDSLPackage.MODALITY_SENTENCE: return createModalitySentence();
      case RequirementDSLPackage.PREDICATE_SENTENCE: return createPredicateSentence();
      case RequirementDSLPackage.EXISTENCE_SENTENCE: return createExistenceSentence();
      case RequirementDSLPackage.PROPERTY_SENTENCE: return createPropertySentence();
      case RequirementDSLPackage.PROPERTY: return createProperty();
      case RequirementDSLPackage.SENTENCE_BEGIN: return createSentenceBegin();
      case RequirementDSLPackage.SENTENCE_ENDING: return createSentenceEnding();
      case RequirementDSLPackage.RELATIVE_CLAUSE: return createRelativeClause();
      case RequirementDSLPackage.RELATIVE_SENTENCE: return createRelativeSentence();
      case RequirementDSLPackage.ACTORS: return createActors();
      case RequirementDSLPackage.ACTOR: return createActor();
      case RequirementDSLPackage.PREDS: return createPreds();
      case RequirementDSLPackage.PREDICATE: return createPredicate();
      case RequirementDSLPackage.PREDICATE_OBJECT: return createPredicateObject();
      case RequirementDSLPackage.OBJECT: return createObject();
      case RequirementDSLPackage.PRED_OR_OBJECT: return createPredOrObject();
      case RequirementDSLPackage.EXISTENCE: return createExistence();
      case RequirementDSLPackage.AUX_NEG: return createAuxNeg();
      case RequirementDSLPackage.PRE_NOMINATIVE: return createPreNominative();
      case RequirementDSLPackage.RELATION: return createRelation();
      case RequirementDSLPackage.REL_OBJECTS: return createRelObjects();
      case RequirementDSLPackage.CONSTRAINTS: return createConstraints();
      case RequirementDSLPackage.CONSTRAINT: return createConstraint();
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS: return createConstraintOrdinators();
      case RequirementDSLPackage.SET_CONSTRAINT: return createSetConstraint();
      case RequirementDSLPackage.TIME_CONSTRAINT: return createTimeConstraint();
      case RequirementDSLPackage.OBJECT_CONSTRAINT: return createObjectConstraint();
      case RequirementDSLPackage.UNIT_CONSTRAINTS: return createUnitConstraints();
      case RequirementDSLPackage.INTERVALL_CONSTRAINTS: return createIntervallConstraints();
      case RequirementDSLPackage.SINGLE_VALUE_CONSTRAINTS: return createSingleValueConstraints();
      case RequirementDSLPackage.VALUE_SET: return createValueSet();
      case RequirementDSLPackage.OBJECT_SET: return createObjectSet();
      case RequirementDSLPackage.VALUE: return createValue();
      case RequirementDSLPackage.INT_VALUE: return createIntValue();
      case RequirementDSLPackage.FLOAT_VALUE: return createFloatValue();
      case RequirementDSLPackage.EXISTENCE_PREFACE: return createExistencePreface();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RequirementDSLPackage.MODALITY:
        return createModalityFromString(eDataType, initialValue);
      case RequirementDSLPackage.MODIFIER:
        return createModifierFromString(eDataType, initialValue);
      case RequirementDSLPackage.CLAUSE_ORDINATOR:
        return createClauseOrdinatorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case RequirementDSLPackage.MODALITY:
        return convertModalityToString(eDataType, instanceValue);
      case RequirementDSLPackage.MODIFIER:
        return convertModifierToString(eDataType, instanceValue);
      case RequirementDSLPackage.CLAUSE_ORDINATOR:
        return convertClauseOrdinatorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequirementText createRequirementText()
  {
    RequirementTextImpl requirementText = new RequirementTextImpl();
    return requirementText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionalClause createConditionalClause()
  {
    ConditionalClauseImpl conditionalClause = new ConditionalClauseImpl();
    return conditionalClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MainClause createMainClause()
  {
    MainClauseImpl mainClause = new MainClauseImpl();
    return mainClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clauses createClauses()
  {
    ClausesImpl clauses = new ClausesImpl();
    return clauses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clause createClause()
  {
    ClauseImpl clause = new ClauseImpl();
    return clause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModalitySentence createModalitySentence()
  {
    ModalitySentenceImpl modalitySentence = new ModalitySentenceImpl();
    return modalitySentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PredicateSentence createPredicateSentence()
  {
    PredicateSentenceImpl predicateSentence = new PredicateSentenceImpl();
    return predicateSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExistenceSentence createExistenceSentence()
  {
    ExistenceSentenceImpl existenceSentence = new ExistenceSentenceImpl();
    return existenceSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PropertySentence createPropertySentence()
  {
    PropertySentenceImpl propertySentence = new PropertySentenceImpl();
    return propertySentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SentenceBegin createSentenceBegin()
  {
    SentenceBeginImpl sentenceBegin = new SentenceBeginImpl();
    return sentenceBegin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SentenceEnding createSentenceEnding()
  {
    SentenceEndingImpl sentenceEnding = new SentenceEndingImpl();
    return sentenceEnding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelativeClause createRelativeClause()
  {
    RelativeClauseImpl relativeClause = new RelativeClauseImpl();
    return relativeClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelativeSentence createRelativeSentence()
  {
    RelativeSentenceImpl relativeSentence = new RelativeSentenceImpl();
    return relativeSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actors createActors()
  {
    ActorsImpl actors = new ActorsImpl();
    return actors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actor createActor()
  {
    ActorImpl actor = new ActorImpl();
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Preds createPreds()
  {
    PredsImpl preds = new PredsImpl();
    return preds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Predicate createPredicate()
  {
    PredicateImpl predicate = new PredicateImpl();
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PredicateObject createPredicateObject()
  {
    PredicateObjectImpl predicateObject = new PredicateObjectImpl();
    return predicateObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public de.fraunhofer.isst.stars.requirementDSL.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PredOrObject createPredOrObject()
  {
    PredOrObjectImpl predOrObject = new PredOrObjectImpl();
    return predOrObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Existence createExistence()
  {
    ExistenceImpl existence = new ExistenceImpl();
    return existence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AuxNeg createAuxNeg()
  {
    AuxNegImpl auxNeg = new AuxNegImpl();
    return auxNeg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PreNominative createPreNominative()
  {
    PreNominativeImpl preNominative = new PreNominativeImpl();
    return preNominative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relation createRelation()
  {
    RelationImpl relation = new RelationImpl();
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelObjects createRelObjects()
  {
    RelObjectsImpl relObjects = new RelObjectsImpl();
    return relObjects;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constraints createConstraints()
  {
    ConstraintsImpl constraints = new ConstraintsImpl();
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstraintOrdinators createConstraintOrdinators()
  {
    ConstraintOrdinatorsImpl constraintOrdinators = new ConstraintOrdinatorsImpl();
    return constraintOrdinators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetConstraint createSetConstraint()
  {
    SetConstraintImpl setConstraint = new SetConstraintImpl();
    return setConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeConstraint createTimeConstraint()
  {
    TimeConstraintImpl timeConstraint = new TimeConstraintImpl();
    return timeConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectConstraint createObjectConstraint()
  {
    ObjectConstraintImpl objectConstraint = new ObjectConstraintImpl();
    return objectConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnitConstraints createUnitConstraints()
  {
    UnitConstraintsImpl unitConstraints = new UnitConstraintsImpl();
    return unitConstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntervallConstraints createIntervallConstraints()
  {
    IntervallConstraintsImpl intervallConstraints = new IntervallConstraintsImpl();
    return intervallConstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleValueConstraints createSingleValueConstraints()
  {
    SingleValueConstraintsImpl singleValueConstraints = new SingleValueConstraintsImpl();
    return singleValueConstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValueSet createValueSet()
  {
    ValueSetImpl valueSet = new ValueSetImpl();
    return valueSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectSet createObjectSet()
  {
    ObjectSetImpl objectSet = new ObjectSetImpl();
    return objectSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntValue createIntValue()
  {
    IntValueImpl intValue = new IntValueImpl();
    return intValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FloatValue createFloatValue()
  {
    FloatValueImpl floatValue = new FloatValueImpl();
    return floatValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExistencePreface createExistencePreface()
  {
    ExistencePrefaceImpl existencePreface = new ExistencePrefaceImpl();
    return existencePreface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Modality createModalityFromString(EDataType eDataType, String initialValue)
  {
    Modality result = Modality.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertModalityToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Modifier createModifierFromString(EDataType eDataType, String initialValue)
  {
    Modifier result = Modifier.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertModifierToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClauseOrdinator createClauseOrdinatorFromString(EDataType eDataType, String initialValue)
  {
    ClauseOrdinator result = ClauseOrdinator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertClauseOrdinatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequirementDSLPackage getRequirementDSLPackage()
  {
    return (RequirementDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RequirementDSLPackage getPackage()
  {
    return RequirementDSLPackage.eINSTANCE;
  }

} //RequirementDSLFactoryImpl

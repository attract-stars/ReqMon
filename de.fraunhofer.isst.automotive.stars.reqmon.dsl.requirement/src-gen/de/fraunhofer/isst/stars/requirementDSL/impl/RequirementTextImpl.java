/**
 * generated by Xtext 2.17.1
 */
package de.fraunhofer.isst.stars.requirementDSL.impl;

import de.fraunhofer.isst.stars.requirementDSL.ConditionalClause;
import de.fraunhofer.isst.stars.requirementDSL.MainClause;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage;
import de.fraunhofer.isst.stars.requirementDSL.RequirementText;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Requirement Text</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.RequirementTextImpl#getCondClauses <em>Cond Clauses</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.RequirementTextImpl#getMainclauses <em>Mainclauses</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RequirementTextImpl extends MinimalEObjectImpl.Container implements RequirementText
{
  /**
   * The cached value of the '{@link #getCondClauses() <em>Cond Clauses</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondClauses()
   * @generated
   * @ordered
   */
  protected EList<ConditionalClause> condClauses;

  /**
   * The cached value of the '{@link #getMainclauses() <em>Mainclauses</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainclauses()
   * @generated
   * @ordered
   */
  protected MainClause mainclauses;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RequirementTextImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RequirementDSLPackage.Literals.REQUIREMENT_TEXT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConditionalClause> getCondClauses()
  {
    if (condClauses == null)
    {
      condClauses = new EObjectContainmentEList<ConditionalClause>(ConditionalClause.class, this, RequirementDSLPackage.REQUIREMENT_TEXT__COND_CLAUSES);
    }
    return condClauses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainClause getMainclauses()
  {
    return mainclauses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMainclauses(MainClause newMainclauses, NotificationChain msgs)
  {
    MainClause oldMainclauses = mainclauses;
    mainclauses = newMainclauses;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.REQUIREMENT_TEXT__MAINCLAUSES, oldMainclauses, newMainclauses);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainclauses(MainClause newMainclauses)
  {
    if (newMainclauses != mainclauses)
    {
      NotificationChain msgs = null;
      if (mainclauses != null)
        msgs = ((InternalEObject)mainclauses).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.REQUIREMENT_TEXT__MAINCLAUSES, null, msgs);
      if (newMainclauses != null)
        msgs = ((InternalEObject)newMainclauses).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.REQUIREMENT_TEXT__MAINCLAUSES, null, msgs);
      msgs = basicSetMainclauses(newMainclauses, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.REQUIREMENT_TEXT__MAINCLAUSES, newMainclauses, newMainclauses));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.REQUIREMENT_TEXT__COND_CLAUSES:
        return ((InternalEList<?>)getCondClauses()).basicRemove(otherEnd, msgs);
      case RequirementDSLPackage.REQUIREMENT_TEXT__MAINCLAUSES:
        return basicSetMainclauses(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.REQUIREMENT_TEXT__COND_CLAUSES:
        return getCondClauses();
      case RequirementDSLPackage.REQUIREMENT_TEXT__MAINCLAUSES:
        return getMainclauses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.REQUIREMENT_TEXT__COND_CLAUSES:
        getCondClauses().clear();
        getCondClauses().addAll((Collection<? extends ConditionalClause>)newValue);
        return;
      case RequirementDSLPackage.REQUIREMENT_TEXT__MAINCLAUSES:
        setMainclauses((MainClause)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.REQUIREMENT_TEXT__COND_CLAUSES:
        getCondClauses().clear();
        return;
      case RequirementDSLPackage.REQUIREMENT_TEXT__MAINCLAUSES:
        setMainclauses((MainClause)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.REQUIREMENT_TEXT__COND_CLAUSES:
        return condClauses != null && !condClauses.isEmpty();
      case RequirementDSLPackage.REQUIREMENT_TEXT__MAINCLAUSES:
        return mainclauses != null;
    }
    return super.eIsSet(featureID);
  }

} //RequirementTextImpl

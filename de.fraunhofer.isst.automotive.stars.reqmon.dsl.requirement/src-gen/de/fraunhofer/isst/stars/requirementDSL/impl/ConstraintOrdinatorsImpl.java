/**
 * generated by Xtext 2.17.1
 */
package de.fraunhofer.isst.stars.requirementDSL.impl;

import de.fraunhofer.isst.stars.requirementDSL.ConstraintOrdinators;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Constraint Ordinators</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.ConstraintOrdinatorsImpl#getStuffing <em>Stuffing</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.ConstraintOrdinatorsImpl#getAdverbial <em>Adverbial</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.ConstraintOrdinatorsImpl#getComperator <em>Comperator</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConstraintOrdinatorsImpl extends MinimalEObjectImpl.Container implements ConstraintOrdinators
{
  /**
   * The default value of the '{@link #getStuffing() <em>Stuffing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStuffing()
   * @generated
   * @ordered
   */
  protected static final String STUFFING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStuffing() <em>Stuffing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStuffing()
   * @generated
   * @ordered
   */
  protected String stuffing = STUFFING_EDEFAULT;

  /**
   * The default value of the '{@link #getAdverbial() <em>Adverbial</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdverbial()
   * @generated
   * @ordered
   */
  protected static final String ADVERBIAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAdverbial() <em>Adverbial</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdverbial()
   * @generated
   * @ordered
   */
  protected String adverbial = ADVERBIAL_EDEFAULT;

  /**
   * The default value of the '{@link #getComperator() <em>Comperator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComperator()
   * @generated
   * @ordered
   */
  protected static final String COMPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComperator() <em>Comperator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComperator()
   * @generated
   * @ordered
   */
  protected String comperator = COMPERATOR_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstraintOrdinatorsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RequirementDSLPackage.Literals.CONSTRAINT_ORDINATORS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getStuffing()
  {
    return stuffing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStuffing(String newStuffing)
  {
    String oldStuffing = stuffing;
    stuffing = newStuffing;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.CONSTRAINT_ORDINATORS__STUFFING, oldStuffing, stuffing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAdverbial()
  {
    return adverbial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAdverbial(String newAdverbial)
  {
    String oldAdverbial = adverbial;
    adverbial = newAdverbial;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.CONSTRAINT_ORDINATORS__ADVERBIAL, oldAdverbial, adverbial));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getComperator()
  {
    return comperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComperator(String newComperator)
  {
    String oldComperator = comperator;
    comperator = newComperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.CONSTRAINT_ORDINATORS__COMPERATOR, oldComperator, comperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__STUFFING:
        return getStuffing();
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__ADVERBIAL:
        return getAdverbial();
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__COMPERATOR:
        return getComperator();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__STUFFING:
        setStuffing((String)newValue);
        return;
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__ADVERBIAL:
        setAdverbial((String)newValue);
        return;
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__COMPERATOR:
        setComperator((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__STUFFING:
        setStuffing(STUFFING_EDEFAULT);
        return;
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__ADVERBIAL:
        setAdverbial(ADVERBIAL_EDEFAULT);
        return;
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__COMPERATOR:
        setComperator(COMPERATOR_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__STUFFING:
        return STUFFING_EDEFAULT == null ? stuffing != null : !STUFFING_EDEFAULT.equals(stuffing);
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__ADVERBIAL:
        return ADVERBIAL_EDEFAULT == null ? adverbial != null : !ADVERBIAL_EDEFAULT.equals(adverbial);
      case RequirementDSLPackage.CONSTRAINT_ORDINATORS__COMPERATOR:
        return COMPERATOR_EDEFAULT == null ? comperator != null : !COMPERATOR_EDEFAULT.equals(comperator);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (stuffing: ");
    result.append(stuffing);
    result.append(", adverbial: ");
    result.append(adverbial);
    result.append(", comperator: ");
    result.append(comperator);
    result.append(')');
    return result.toString();
  }

} //ConstraintOrdinatorsImpl

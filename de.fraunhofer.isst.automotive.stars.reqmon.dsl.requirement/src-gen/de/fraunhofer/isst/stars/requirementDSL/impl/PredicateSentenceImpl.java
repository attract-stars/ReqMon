/**
 * generated by Xtext 2.14.0
 */
package de.fraunhofer.isst.stars.requirementDSL.impl;

import de.fraunhofer.isst.stars.requirementDSL.Actors;
import de.fraunhofer.isst.stars.requirementDSL.Constraints;
import de.fraunhofer.isst.stars.requirementDSL.Predicate;
import de.fraunhofer.isst.stars.requirementDSL.PredicateObject;
import de.fraunhofer.isst.stars.requirementDSL.PredicateSentence;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Predicate Sentence</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PredicateSentenceImpl#getActors <em>Actors</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PredicateSentenceImpl#getPredicate <em>Predicate</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PredicateSentenceImpl#getConstraints <em>Constraints</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PredicateSentenceImpl#getAuxiliarVerb <em>Auxiliar Verb</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PredicateSentenceImpl#isNegation <em>Negation</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PredicateSentenceImpl#getObject <em>Object</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PredicateSentenceImpl extends ClauseImpl implements PredicateSentence
{
  /**
   * The cached value of the '{@link #getActors() <em>Actors</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActors()
   * @generated
   * @ordered
   */
  protected Actors actors;

  /**
   * The cached value of the '{@link #getPredicate() <em>Predicate</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredicate()
   * @generated
   * @ordered
   */
  protected Predicate predicate;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected EList<Constraints> constraints;

  /**
   * The cached value of the '{@link #getAuxiliarVerb() <em>Auxiliar Verb</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuxiliarVerb()
   * @generated
   * @ordered
   */
  protected EList<String> auxiliarVerb;

  /**
   * The default value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected boolean negation = NEGATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getObject() <em>Object</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObject()
   * @generated
   * @ordered
   */
  protected PredicateObject object;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PredicateSentenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RequirementDSLPackage.Literals.PREDICATE_SENTENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actors getActors()
  {
    return actors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActors(Actors newActors, NotificationChain msgs)
  {
    Actors oldActors = actors;
    actors = newActors;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PREDICATE_SENTENCE__ACTORS, oldActors, newActors);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActors(Actors newActors)
  {
    if (newActors != actors)
    {
      NotificationChain msgs = null;
      if (actors != null)
        msgs = ((InternalEObject)actors).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PREDICATE_SENTENCE__ACTORS, null, msgs);
      if (newActors != null)
        msgs = ((InternalEObject)newActors).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PREDICATE_SENTENCE__ACTORS, null, msgs);
      msgs = basicSetActors(newActors, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PREDICATE_SENTENCE__ACTORS, newActors, newActors));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Predicate getPredicate()
  {
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPredicate(Predicate newPredicate, NotificationChain msgs)
  {
    Predicate oldPredicate = predicate;
    predicate = newPredicate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PREDICATE_SENTENCE__PREDICATE, oldPredicate, newPredicate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPredicate(Predicate newPredicate)
  {
    if (newPredicate != predicate)
    {
      NotificationChain msgs = null;
      if (predicate != null)
        msgs = ((InternalEObject)predicate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PREDICATE_SENTENCE__PREDICATE, null, msgs);
      if (newPredicate != null)
        msgs = ((InternalEObject)newPredicate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PREDICATE_SENTENCE__PREDICATE, null, msgs);
      msgs = basicSetPredicate(newPredicate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PREDICATE_SENTENCE__PREDICATE, newPredicate, newPredicate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Constraints> getConstraints()
  {
    if (constraints == null)
    {
      constraints = new EObjectContainmentEList<Constraints>(Constraints.class, this, RequirementDSLPackage.PREDICATE_SENTENCE__CONSTRAINTS);
    }
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getAuxiliarVerb()
  {
    if (auxiliarVerb == null)
    {
      auxiliarVerb = new EDataTypeEList<String>(String.class, this, RequirementDSLPackage.PREDICATE_SENTENCE__AUXILIAR_VERB);
    }
    return auxiliarVerb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNegation()
  {
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNegation(boolean newNegation)
  {
    boolean oldNegation = negation;
    negation = newNegation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PREDICATE_SENTENCE__NEGATION, oldNegation, negation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PredicateObject getObject()
  {
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObject(PredicateObject newObject, NotificationChain msgs)
  {
    PredicateObject oldObject = object;
    object = newObject;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PREDICATE_SENTENCE__OBJECT, oldObject, newObject);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setObject(PredicateObject newObject)
  {
    if (newObject != object)
    {
      NotificationChain msgs = null;
      if (object != null)
        msgs = ((InternalEObject)object).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PREDICATE_SENTENCE__OBJECT, null, msgs);
      if (newObject != null)
        msgs = ((InternalEObject)newObject).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PREDICATE_SENTENCE__OBJECT, null, msgs);
      msgs = basicSetObject(newObject, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PREDICATE_SENTENCE__OBJECT, newObject, newObject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.PREDICATE_SENTENCE__ACTORS:
        return basicSetActors(null, msgs);
      case RequirementDSLPackage.PREDICATE_SENTENCE__PREDICATE:
        return basicSetPredicate(null, msgs);
      case RequirementDSLPackage.PREDICATE_SENTENCE__CONSTRAINTS:
        return ((InternalEList<?>)getConstraints()).basicRemove(otherEnd, msgs);
      case RequirementDSLPackage.PREDICATE_SENTENCE__OBJECT:
        return basicSetObject(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.PREDICATE_SENTENCE__ACTORS:
        return getActors();
      case RequirementDSLPackage.PREDICATE_SENTENCE__PREDICATE:
        return getPredicate();
      case RequirementDSLPackage.PREDICATE_SENTENCE__CONSTRAINTS:
        return getConstraints();
      case RequirementDSLPackage.PREDICATE_SENTENCE__AUXILIAR_VERB:
        return getAuxiliarVerb();
      case RequirementDSLPackage.PREDICATE_SENTENCE__NEGATION:
        return isNegation();
      case RequirementDSLPackage.PREDICATE_SENTENCE__OBJECT:
        return getObject();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.PREDICATE_SENTENCE__ACTORS:
        setActors((Actors)newValue);
        return;
      case RequirementDSLPackage.PREDICATE_SENTENCE__PREDICATE:
        setPredicate((Predicate)newValue);
        return;
      case RequirementDSLPackage.PREDICATE_SENTENCE__CONSTRAINTS:
        getConstraints().clear();
        getConstraints().addAll((Collection<? extends Constraints>)newValue);
        return;
      case RequirementDSLPackage.PREDICATE_SENTENCE__AUXILIAR_VERB:
        getAuxiliarVerb().clear();
        getAuxiliarVerb().addAll((Collection<? extends String>)newValue);
        return;
      case RequirementDSLPackage.PREDICATE_SENTENCE__NEGATION:
        setNegation((Boolean)newValue);
        return;
      case RequirementDSLPackage.PREDICATE_SENTENCE__OBJECT:
        setObject((PredicateObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.PREDICATE_SENTENCE__ACTORS:
        setActors((Actors)null);
        return;
      case RequirementDSLPackage.PREDICATE_SENTENCE__PREDICATE:
        setPredicate((Predicate)null);
        return;
      case RequirementDSLPackage.PREDICATE_SENTENCE__CONSTRAINTS:
        getConstraints().clear();
        return;
      case RequirementDSLPackage.PREDICATE_SENTENCE__AUXILIAR_VERB:
        getAuxiliarVerb().clear();
        return;
      case RequirementDSLPackage.PREDICATE_SENTENCE__NEGATION:
        setNegation(NEGATION_EDEFAULT);
        return;
      case RequirementDSLPackage.PREDICATE_SENTENCE__OBJECT:
        setObject((PredicateObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.PREDICATE_SENTENCE__ACTORS:
        return actors != null;
      case RequirementDSLPackage.PREDICATE_SENTENCE__PREDICATE:
        return predicate != null;
      case RequirementDSLPackage.PREDICATE_SENTENCE__CONSTRAINTS:
        return constraints != null && !constraints.isEmpty();
      case RequirementDSLPackage.PREDICATE_SENTENCE__AUXILIAR_VERB:
        return auxiliarVerb != null && !auxiliarVerb.isEmpty();
      case RequirementDSLPackage.PREDICATE_SENTENCE__NEGATION:
        return negation != NEGATION_EDEFAULT;
      case RequirementDSLPackage.PREDICATE_SENTENCE__OBJECT:
        return object != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (auxiliarVerb: ");
    result.append(auxiliarVerb);
    result.append(", negation: ");
    result.append(negation);
    result.append(')');
    return result.toString();
  }

} //PredicateSentenceImpl

/**
 * generated by Xtext 2.14.0
 */
package de.fraunhofer.isst.stars.requirementDSL.impl;

import de.fraunhofer.isst.stars.requirementDSL.ClauseOrdinator;
import de.fraunhofer.isst.stars.requirementDSL.Clauses;
import de.fraunhofer.isst.stars.requirementDSL.ConditionalClause;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conditional Clause</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.ConditionalClauseImpl#getOrdinator <em>Ordinator</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.ConditionalClauseImpl#getClauses <em>Clauses</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionalClauseImpl extends MinimalEObjectImpl.Container implements ConditionalClause
{
  /**
   * The default value of the '{@link #getOrdinator() <em>Ordinator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrdinator()
   * @generated
   * @ordered
   */
  protected static final ClauseOrdinator ORDINATOR_EDEFAULT = ClauseOrdinator.IF;

  /**
   * The cached value of the '{@link #getOrdinator() <em>Ordinator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrdinator()
   * @generated
   * @ordered
   */
  protected ClauseOrdinator ordinator = ORDINATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getClauses() <em>Clauses</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClauses()
   * @generated
   * @ordered
   */
  protected Clauses clauses;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionalClauseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RequirementDSLPackage.Literals.CONDITIONAL_CLAUSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClauseOrdinator getOrdinator()
  {
    return ordinator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOrdinator(ClauseOrdinator newOrdinator)
  {
    ClauseOrdinator oldOrdinator = ordinator;
    ordinator = newOrdinator == null ? ORDINATOR_EDEFAULT : newOrdinator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.CONDITIONAL_CLAUSE__ORDINATOR, oldOrdinator, ordinator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clauses getClauses()
  {
    return clauses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClauses(Clauses newClauses, NotificationChain msgs)
  {
    Clauses oldClauses = clauses;
    clauses = newClauses;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.CONDITIONAL_CLAUSE__CLAUSES, oldClauses, newClauses);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClauses(Clauses newClauses)
  {
    if (newClauses != clauses)
    {
      NotificationChain msgs = null;
      if (clauses != null)
        msgs = ((InternalEObject)clauses).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.CONDITIONAL_CLAUSE__CLAUSES, null, msgs);
      if (newClauses != null)
        msgs = ((InternalEObject)newClauses).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.CONDITIONAL_CLAUSE__CLAUSES, null, msgs);
      msgs = basicSetClauses(newClauses, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.CONDITIONAL_CLAUSE__CLAUSES, newClauses, newClauses));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.CONDITIONAL_CLAUSE__CLAUSES:
        return basicSetClauses(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.CONDITIONAL_CLAUSE__ORDINATOR:
        return getOrdinator();
      case RequirementDSLPackage.CONDITIONAL_CLAUSE__CLAUSES:
        return getClauses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.CONDITIONAL_CLAUSE__ORDINATOR:
        setOrdinator((ClauseOrdinator)newValue);
        return;
      case RequirementDSLPackage.CONDITIONAL_CLAUSE__CLAUSES:
        setClauses((Clauses)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.CONDITIONAL_CLAUSE__ORDINATOR:
        setOrdinator(ORDINATOR_EDEFAULT);
        return;
      case RequirementDSLPackage.CONDITIONAL_CLAUSE__CLAUSES:
        setClauses((Clauses)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.CONDITIONAL_CLAUSE__ORDINATOR:
        return ordinator != ORDINATOR_EDEFAULT;
      case RequirementDSLPackage.CONDITIONAL_CLAUSE__CLAUSES:
        return clauses != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (ordinator: ");
    result.append(ordinator);
    result.append(')');
    return result.toString();
  }

} //ConditionalClauseImpl

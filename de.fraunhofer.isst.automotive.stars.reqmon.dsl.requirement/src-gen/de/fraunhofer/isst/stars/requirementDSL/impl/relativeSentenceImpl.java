/**
 * generated by Xtext 2.16.0
 */
package de.fraunhofer.isst.stars.requirementDSL.impl;

import de.fraunhofer.isst.stars.requirementDSL.Clause;
import de.fraunhofer.isst.stars.requirementDSL.Constraints;
import de.fraunhofer.isst.stars.requirementDSL.Modality;
import de.fraunhofer.isst.stars.requirementDSL.Predicate;
import de.fraunhofer.isst.stars.requirementDSL.RelativeSentence;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Relative Sentence</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.RelativeSentenceImpl#getPronoun <em>Pronoun</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.RelativeSentenceImpl#getModelity <em>Modelity</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.RelativeSentenceImpl#isNegation <em>Negation</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.RelativeSentenceImpl#getPredicate <em>Predicate</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.RelativeSentenceImpl#getConstraints <em>Constraints</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.RelativeSentenceImpl#getAuxiliar <em>Auxiliar</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.RelativeSentenceImpl#getClause <em>Clause</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RelativeSentenceImpl extends MinimalEObjectImpl.Container implements RelativeSentence
{
  /**
   * The default value of the '{@link #getPronoun() <em>Pronoun</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPronoun()
   * @generated
   * @ordered
   */
  protected static final String PRONOUN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPronoun() <em>Pronoun</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPronoun()
   * @generated
   * @ordered
   */
  protected String pronoun = PRONOUN_EDEFAULT;

  /**
   * The default value of the '{@link #getModelity() <em>Modelity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelity()
   * @generated
   * @ordered
   */
  protected static final Modality MODELITY_EDEFAULT = Modality.SHALL;

  /**
   * The cached value of the '{@link #getModelity() <em>Modelity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelity()
   * @generated
   * @ordered
   */
  protected Modality modelity = MODELITY_EDEFAULT;

  /**
   * The default value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected boolean negation = NEGATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getPredicate() <em>Predicate</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredicate()
   * @generated
   * @ordered
   */
  protected Predicate predicate;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected EList<Constraints> constraints;

  /**
   * The default value of the '{@link #getAuxiliar() <em>Auxiliar</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuxiliar()
   * @generated
   * @ordered
   */
  protected static final String AUXILIAR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAuxiliar() <em>Auxiliar</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuxiliar()
   * @generated
   * @ordered
   */
  protected String auxiliar = AUXILIAR_EDEFAULT;

  /**
   * The cached value of the '{@link #getClause() <em>Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClause()
   * @generated
   * @ordered
   */
  protected Clause clause;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelativeSentenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RequirementDSLPackage.Literals.RELATIVE_SENTENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPronoun()
  {
    return pronoun;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPronoun(String newPronoun)
  {
    String oldPronoun = pronoun;
    pronoun = newPronoun;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.RELATIVE_SENTENCE__PRONOUN, oldPronoun, pronoun));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Modality getModelity()
  {
    return modelity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setModelity(Modality newModelity)
  {
    Modality oldModelity = modelity;
    modelity = newModelity == null ? MODELITY_EDEFAULT : newModelity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.RELATIVE_SENTENCE__MODELITY, oldModelity, modelity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNegation()
  {
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNegation(boolean newNegation)
  {
    boolean oldNegation = negation;
    negation = newNegation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.RELATIVE_SENTENCE__NEGATION, oldNegation, negation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Predicate getPredicate()
  {
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPredicate(Predicate newPredicate, NotificationChain msgs)
  {
    Predicate oldPredicate = predicate;
    predicate = newPredicate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.RELATIVE_SENTENCE__PREDICATE, oldPredicate, newPredicate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPredicate(Predicate newPredicate)
  {
    if (newPredicate != predicate)
    {
      NotificationChain msgs = null;
      if (predicate != null)
        msgs = ((InternalEObject)predicate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.RELATIVE_SENTENCE__PREDICATE, null, msgs);
      if (newPredicate != null)
        msgs = ((InternalEObject)newPredicate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.RELATIVE_SENTENCE__PREDICATE, null, msgs);
      msgs = basicSetPredicate(newPredicate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.RELATIVE_SENTENCE__PREDICATE, newPredicate, newPredicate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Constraints> getConstraints()
  {
    if (constraints == null)
    {
      constraints = new EObjectContainmentEList<Constraints>(Constraints.class, this, RequirementDSLPackage.RELATIVE_SENTENCE__CONSTRAINTS);
    }
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAuxiliar()
  {
    return auxiliar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAuxiliar(String newAuxiliar)
  {
    String oldAuxiliar = auxiliar;
    auxiliar = newAuxiliar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.RELATIVE_SENTENCE__AUXILIAR, oldAuxiliar, auxiliar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clause getClause()
  {
    return clause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClause(Clause newClause, NotificationChain msgs)
  {
    Clause oldClause = clause;
    clause = newClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.RELATIVE_SENTENCE__CLAUSE, oldClause, newClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClause(Clause newClause)
  {
    if (newClause != clause)
    {
      NotificationChain msgs = null;
      if (clause != null)
        msgs = ((InternalEObject)clause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.RELATIVE_SENTENCE__CLAUSE, null, msgs);
      if (newClause != null)
        msgs = ((InternalEObject)newClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.RELATIVE_SENTENCE__CLAUSE, null, msgs);
      msgs = basicSetClause(newClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.RELATIVE_SENTENCE__CLAUSE, newClause, newClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.RELATIVE_SENTENCE__PREDICATE:
        return basicSetPredicate(null, msgs);
      case RequirementDSLPackage.RELATIVE_SENTENCE__CONSTRAINTS:
        return ((InternalEList<?>)getConstraints()).basicRemove(otherEnd, msgs);
      case RequirementDSLPackage.RELATIVE_SENTENCE__CLAUSE:
        return basicSetClause(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.RELATIVE_SENTENCE__PRONOUN:
        return getPronoun();
      case RequirementDSLPackage.RELATIVE_SENTENCE__MODELITY:
        return getModelity();
      case RequirementDSLPackage.RELATIVE_SENTENCE__NEGATION:
        return isNegation();
      case RequirementDSLPackage.RELATIVE_SENTENCE__PREDICATE:
        return getPredicate();
      case RequirementDSLPackage.RELATIVE_SENTENCE__CONSTRAINTS:
        return getConstraints();
      case RequirementDSLPackage.RELATIVE_SENTENCE__AUXILIAR:
        return getAuxiliar();
      case RequirementDSLPackage.RELATIVE_SENTENCE__CLAUSE:
        return getClause();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.RELATIVE_SENTENCE__PRONOUN:
        setPronoun((String)newValue);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__MODELITY:
        setModelity((Modality)newValue);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__NEGATION:
        setNegation((Boolean)newValue);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__PREDICATE:
        setPredicate((Predicate)newValue);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__CONSTRAINTS:
        getConstraints().clear();
        getConstraints().addAll((Collection<? extends Constraints>)newValue);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__AUXILIAR:
        setAuxiliar((String)newValue);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__CLAUSE:
        setClause((Clause)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.RELATIVE_SENTENCE__PRONOUN:
        setPronoun(PRONOUN_EDEFAULT);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__MODELITY:
        setModelity(MODELITY_EDEFAULT);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__NEGATION:
        setNegation(NEGATION_EDEFAULT);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__PREDICATE:
        setPredicate((Predicate)null);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__CONSTRAINTS:
        getConstraints().clear();
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__AUXILIAR:
        setAuxiliar(AUXILIAR_EDEFAULT);
        return;
      case RequirementDSLPackage.RELATIVE_SENTENCE__CLAUSE:
        setClause((Clause)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.RELATIVE_SENTENCE__PRONOUN:
        return PRONOUN_EDEFAULT == null ? pronoun != null : !PRONOUN_EDEFAULT.equals(pronoun);
      case RequirementDSLPackage.RELATIVE_SENTENCE__MODELITY:
        return modelity != MODELITY_EDEFAULT;
      case RequirementDSLPackage.RELATIVE_SENTENCE__NEGATION:
        return negation != NEGATION_EDEFAULT;
      case RequirementDSLPackage.RELATIVE_SENTENCE__PREDICATE:
        return predicate != null;
      case RequirementDSLPackage.RELATIVE_SENTENCE__CONSTRAINTS:
        return constraints != null && !constraints.isEmpty();
      case RequirementDSLPackage.RELATIVE_SENTENCE__AUXILIAR:
        return AUXILIAR_EDEFAULT == null ? auxiliar != null : !AUXILIAR_EDEFAULT.equals(auxiliar);
      case RequirementDSLPackage.RELATIVE_SENTENCE__CLAUSE:
        return clause != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (pronoun: ");
    result.append(pronoun);
    result.append(", modelity: ");
    result.append(modelity);
    result.append(", negation: ");
    result.append(negation);
    result.append(", auxiliar: ");
    result.append(auxiliar);
    result.append(')');
    return result.toString();
  }

} //RelativeSentenceImpl

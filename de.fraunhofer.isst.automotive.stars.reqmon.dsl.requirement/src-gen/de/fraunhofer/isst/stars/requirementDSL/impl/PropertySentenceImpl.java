/**
 * generated by Xtext 2.14.0
 */
package de.fraunhofer.isst.stars.requirementDSL.impl;

import de.fraunhofer.isst.stars.requirementDSL.Constraints;
import de.fraunhofer.isst.stars.requirementDSL.Modality;
import de.fraunhofer.isst.stars.requirementDSL.Predicate;
import de.fraunhofer.isst.stars.requirementDSL.PredicateObject;
import de.fraunhofer.isst.stars.requirementDSL.Property;
import de.fraunhofer.isst.stars.requirementDSL.PropertySentence;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property Sentence</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PropertySentenceImpl#getProperty <em>Property</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PropertySentenceImpl#getModelity <em>Modelity</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PropertySentenceImpl#isNegation <em>Negation</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PropertySentenceImpl#getAuxiliarVerb <em>Auxiliar Verb</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PropertySentenceImpl#getPredicate <em>Predicate</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PropertySentenceImpl#getConstraints <em>Constraints</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PropertySentenceImpl#getObject <em>Object</em>}</li>
 *   <li>{@link de.fraunhofer.isst.stars.requirementDSL.impl.PropertySentenceImpl#getPredicateWord <em>Predicate Word</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertySentenceImpl extends ClauseImpl implements PropertySentence
{
  /**
   * The cached value of the '{@link #getProperty() <em>Property</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperty()
   * @generated
   * @ordered
   */
  protected Property property;

  /**
   * The default value of the '{@link #getModelity() <em>Modelity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelity()
   * @generated
   * @ordered
   */
  protected static final Modality MODELITY_EDEFAULT = Modality.SHALL;

  /**
   * The cached value of the '{@link #getModelity() <em>Modelity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelity()
   * @generated
   * @ordered
   */
  protected Modality modelity = MODELITY_EDEFAULT;

  /**
   * The default value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected boolean negation = NEGATION_EDEFAULT;

  /**
   * The default value of the '{@link #getAuxiliarVerb() <em>Auxiliar Verb</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuxiliarVerb()
   * @generated
   * @ordered
   */
  protected static final String AUXILIAR_VERB_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAuxiliarVerb() <em>Auxiliar Verb</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuxiliarVerb()
   * @generated
   * @ordered
   */
  protected String auxiliarVerb = AUXILIAR_VERB_EDEFAULT;

  /**
   * The cached value of the '{@link #getPredicate() <em>Predicate</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredicate()
   * @generated
   * @ordered
   */
  protected Predicate predicate;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected EList<Constraints> constraints;

  /**
   * The cached value of the '{@link #getObject() <em>Object</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObject()
   * @generated
   * @ordered
   */
  protected PredicateObject object;

  /**
   * The default value of the '{@link #getPredicateWord() <em>Predicate Word</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredicateWord()
   * @generated
   * @ordered
   */
  protected static final String PREDICATE_WORD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPredicateWord() <em>Predicate Word</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredicateWord()
   * @generated
   * @ordered
   */
  protected String predicateWord = PREDICATE_WORD_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertySentenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RequirementDSLPackage.Literals.PROPERTY_SENTENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Property getProperty()
  {
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProperty(Property newProperty, NotificationChain msgs)
  {
    Property oldProperty = property;
    property = newProperty;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PROPERTY_SENTENCE__PROPERTY, oldProperty, newProperty);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProperty(Property newProperty)
  {
    if (newProperty != property)
    {
      NotificationChain msgs = null;
      if (property != null)
        msgs = ((InternalEObject)property).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PROPERTY_SENTENCE__PROPERTY, null, msgs);
      if (newProperty != null)
        msgs = ((InternalEObject)newProperty).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PROPERTY_SENTENCE__PROPERTY, null, msgs);
      msgs = basicSetProperty(newProperty, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PROPERTY_SENTENCE__PROPERTY, newProperty, newProperty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Modality getModelity()
  {
    return modelity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setModelity(Modality newModelity)
  {
    Modality oldModelity = modelity;
    modelity = newModelity == null ? MODELITY_EDEFAULT : newModelity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PROPERTY_SENTENCE__MODELITY, oldModelity, modelity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNegation()
  {
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNegation(boolean newNegation)
  {
    boolean oldNegation = negation;
    negation = newNegation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PROPERTY_SENTENCE__NEGATION, oldNegation, negation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAuxiliarVerb()
  {
    return auxiliarVerb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAuxiliarVerb(String newAuxiliarVerb)
  {
    String oldAuxiliarVerb = auxiliarVerb;
    auxiliarVerb = newAuxiliarVerb;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PROPERTY_SENTENCE__AUXILIAR_VERB, oldAuxiliarVerb, auxiliarVerb));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Predicate getPredicate()
  {
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPredicate(Predicate newPredicate, NotificationChain msgs)
  {
    Predicate oldPredicate = predicate;
    predicate = newPredicate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE, oldPredicate, newPredicate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPredicate(Predicate newPredicate)
  {
    if (newPredicate != predicate)
    {
      NotificationChain msgs = null;
      if (predicate != null)
        msgs = ((InternalEObject)predicate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE, null, msgs);
      if (newPredicate != null)
        msgs = ((InternalEObject)newPredicate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE, null, msgs);
      msgs = basicSetPredicate(newPredicate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE, newPredicate, newPredicate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Constraints> getConstraints()
  {
    if (constraints == null)
    {
      constraints = new EObjectContainmentEList<Constraints>(Constraints.class, this, RequirementDSLPackage.PROPERTY_SENTENCE__CONSTRAINTS);
    }
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PredicateObject getObject()
  {
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObject(PredicateObject newObject, NotificationChain msgs)
  {
    PredicateObject oldObject = object;
    object = newObject;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PROPERTY_SENTENCE__OBJECT, oldObject, newObject);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setObject(PredicateObject newObject)
  {
    if (newObject != object)
    {
      NotificationChain msgs = null;
      if (object != null)
        msgs = ((InternalEObject)object).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PROPERTY_SENTENCE__OBJECT, null, msgs);
      if (newObject != null)
        msgs = ((InternalEObject)newObject).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RequirementDSLPackage.PROPERTY_SENTENCE__OBJECT, null, msgs);
      msgs = basicSetObject(newObject, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PROPERTY_SENTENCE__OBJECT, newObject, newObject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPredicateWord()
  {
    return predicateWord;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPredicateWord(String newPredicateWord)
  {
    String oldPredicateWord = predicateWord;
    predicateWord = newPredicateWord;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE_WORD, oldPredicateWord, predicateWord));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.PROPERTY_SENTENCE__PROPERTY:
        return basicSetProperty(null, msgs);
      case RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE:
        return basicSetPredicate(null, msgs);
      case RequirementDSLPackage.PROPERTY_SENTENCE__CONSTRAINTS:
        return ((InternalEList<?>)getConstraints()).basicRemove(otherEnd, msgs);
      case RequirementDSLPackage.PROPERTY_SENTENCE__OBJECT:
        return basicSetObject(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.PROPERTY_SENTENCE__PROPERTY:
        return getProperty();
      case RequirementDSLPackage.PROPERTY_SENTENCE__MODELITY:
        return getModelity();
      case RequirementDSLPackage.PROPERTY_SENTENCE__NEGATION:
        return isNegation();
      case RequirementDSLPackage.PROPERTY_SENTENCE__AUXILIAR_VERB:
        return getAuxiliarVerb();
      case RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE:
        return getPredicate();
      case RequirementDSLPackage.PROPERTY_SENTENCE__CONSTRAINTS:
        return getConstraints();
      case RequirementDSLPackage.PROPERTY_SENTENCE__OBJECT:
        return getObject();
      case RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE_WORD:
        return getPredicateWord();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.PROPERTY_SENTENCE__PROPERTY:
        setProperty((Property)newValue);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__MODELITY:
        setModelity((Modality)newValue);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__NEGATION:
        setNegation((Boolean)newValue);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__AUXILIAR_VERB:
        setAuxiliarVerb((String)newValue);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE:
        setPredicate((Predicate)newValue);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__CONSTRAINTS:
        getConstraints().clear();
        getConstraints().addAll((Collection<? extends Constraints>)newValue);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__OBJECT:
        setObject((PredicateObject)newValue);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE_WORD:
        setPredicateWord((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.PROPERTY_SENTENCE__PROPERTY:
        setProperty((Property)null);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__MODELITY:
        setModelity(MODELITY_EDEFAULT);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__NEGATION:
        setNegation(NEGATION_EDEFAULT);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__AUXILIAR_VERB:
        setAuxiliarVerb(AUXILIAR_VERB_EDEFAULT);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE:
        setPredicate((Predicate)null);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__CONSTRAINTS:
        getConstraints().clear();
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__OBJECT:
        setObject((PredicateObject)null);
        return;
      case RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE_WORD:
        setPredicateWord(PREDICATE_WORD_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RequirementDSLPackage.PROPERTY_SENTENCE__PROPERTY:
        return property != null;
      case RequirementDSLPackage.PROPERTY_SENTENCE__MODELITY:
        return modelity != MODELITY_EDEFAULT;
      case RequirementDSLPackage.PROPERTY_SENTENCE__NEGATION:
        return negation != NEGATION_EDEFAULT;
      case RequirementDSLPackage.PROPERTY_SENTENCE__AUXILIAR_VERB:
        return AUXILIAR_VERB_EDEFAULT == null ? auxiliarVerb != null : !AUXILIAR_VERB_EDEFAULT.equals(auxiliarVerb);
      case RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE:
        return predicate != null;
      case RequirementDSLPackage.PROPERTY_SENTENCE__CONSTRAINTS:
        return constraints != null && !constraints.isEmpty();
      case RequirementDSLPackage.PROPERTY_SENTENCE__OBJECT:
        return object != null;
      case RequirementDSLPackage.PROPERTY_SENTENCE__PREDICATE_WORD:
        return PREDICATE_WORD_EDEFAULT == null ? predicateWord != null : !PREDICATE_WORD_EDEFAULT.equals(predicateWord);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (modelity: ");
    result.append(modelity);
    result.append(", negation: ");
    result.append(negation);
    result.append(", auxiliarVerb: ");
    result.append(auxiliarVerb);
    result.append(", predicateWord: ");
    result.append(predicateWord);
    result.append(')');
    return result.toString();
  }

} //PropertySentenceImpl

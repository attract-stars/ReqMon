/**
 * generated by Xtext 2.17.1
 */
package de.fraunhofer.isst.stars.requirementDSL.util;

import de.fraunhofer.isst.stars.requirementDSL.Actor;
import de.fraunhofer.isst.stars.requirementDSL.Actors;
import de.fraunhofer.isst.stars.requirementDSL.AuxNeg;
import de.fraunhofer.isst.stars.requirementDSL.Clause;
import de.fraunhofer.isst.stars.requirementDSL.Clauses;
import de.fraunhofer.isst.stars.requirementDSL.ConditionalClause;
import de.fraunhofer.isst.stars.requirementDSL.Constraint;
import de.fraunhofer.isst.stars.requirementDSL.ConstraintOrdinators;
import de.fraunhofer.isst.stars.requirementDSL.Constraints;
import de.fraunhofer.isst.stars.requirementDSL.ExistencePreface;
import de.fraunhofer.isst.stars.requirementDSL.ExistenceSentence;
import de.fraunhofer.isst.stars.requirementDSL.FloatValue;
import de.fraunhofer.isst.stars.requirementDSL.IntValue;
import de.fraunhofer.isst.stars.requirementDSL.IntervallConstraints;
import de.fraunhofer.isst.stars.requirementDSL.MainClause;
import de.fraunhofer.isst.stars.requirementDSL.ModalitySentence;
import de.fraunhofer.isst.stars.requirementDSL.Model;
import de.fraunhofer.isst.stars.requirementDSL.ObjectConstraint;
import de.fraunhofer.isst.stars.requirementDSL.ObjectSet;
import de.fraunhofer.isst.stars.requirementDSL.PreNominative;
import de.fraunhofer.isst.stars.requirementDSL.PredOrObject;
import de.fraunhofer.isst.stars.requirementDSL.Predicate;
import de.fraunhofer.isst.stars.requirementDSL.PredicateObject;
import de.fraunhofer.isst.stars.requirementDSL.PredicateSentence;
import de.fraunhofer.isst.stars.requirementDSL.Preds;
import de.fraunhofer.isst.stars.requirementDSL.Property;
import de.fraunhofer.isst.stars.requirementDSL.PropertySentence;
import de.fraunhofer.isst.stars.requirementDSL.RelObjects;
import de.fraunhofer.isst.stars.requirementDSL.Relation;
import de.fraunhofer.isst.stars.requirementDSL.Requirement;
import de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage;
import de.fraunhofer.isst.stars.requirementDSL.RequirementText;
import de.fraunhofer.isst.stars.requirementDSL.SentenceBegin;
import de.fraunhofer.isst.stars.requirementDSL.SentenceEnding;
import de.fraunhofer.isst.stars.requirementDSL.SetConstraint;
import de.fraunhofer.isst.stars.requirementDSL.SingleValueConstraints;
import de.fraunhofer.isst.stars.requirementDSL.TimeConstraint;
import de.fraunhofer.isst.stars.requirementDSL.UnitConstraints;
import de.fraunhofer.isst.stars.requirementDSL.Value;
import de.fraunhofer.isst.stars.requirementDSL.ValueSet;
import de.fraunhofer.isst.stars.requirementDSL.relativeClause;
import de.fraunhofer.isst.stars.requirementDSL.relativeSentence;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage
 * @generated
 */
public class RequirementDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RequirementDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequirementDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = RequirementDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RequirementDSLSwitch<Adapter> modelSwitch =
    new RequirementDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseRequirement(Requirement object)
      {
        return createRequirementAdapter();
      }
      @Override
      public Adapter caseRequirementText(RequirementText object)
      {
        return createRequirementTextAdapter();
      }
      @Override
      public Adapter caseConditionalClause(ConditionalClause object)
      {
        return createConditionalClauseAdapter();
      }
      @Override
      public Adapter caseMainClause(MainClause object)
      {
        return createMainClauseAdapter();
      }
      @Override
      public Adapter caseClauses(Clauses object)
      {
        return createClausesAdapter();
      }
      @Override
      public Adapter caseClause(Clause object)
      {
        return createClauseAdapter();
      }
      @Override
      public Adapter caseModalitySentence(ModalitySentence object)
      {
        return createModalitySentenceAdapter();
      }
      @Override
      public Adapter casePredicateSentence(PredicateSentence object)
      {
        return createPredicateSentenceAdapter();
      }
      @Override
      public Adapter caseExistenceSentence(ExistenceSentence object)
      {
        return createExistenceSentenceAdapter();
      }
      @Override
      public Adapter casePropertySentence(PropertySentence object)
      {
        return createPropertySentenceAdapter();
      }
      @Override
      public Adapter caseProperty(Property object)
      {
        return createPropertyAdapter();
      }
      @Override
      public Adapter caseSentenceBegin(SentenceBegin object)
      {
        return createSentenceBeginAdapter();
      }
      @Override
      public Adapter caseSentenceEnding(SentenceEnding object)
      {
        return createSentenceEndingAdapter();
      }
      @Override
      public Adapter caserelativeClause(relativeClause object)
      {
        return createrelativeClauseAdapter();
      }
      @Override
      public Adapter caserelativeSentence(relativeSentence object)
      {
        return createrelativeSentenceAdapter();
      }
      @Override
      public Adapter caseActors(Actors object)
      {
        return createActorsAdapter();
      }
      @Override
      public Adapter caseActor(Actor object)
      {
        return createActorAdapter();
      }
      @Override
      public Adapter casePreds(Preds object)
      {
        return createPredsAdapter();
      }
      @Override
      public Adapter casePredicate(Predicate object)
      {
        return createPredicateAdapter();
      }
      @Override
      public Adapter casePredicateObject(PredicateObject object)
      {
        return createPredicateObjectAdapter();
      }
      @Override
      public Adapter caseObject(de.fraunhofer.isst.stars.requirementDSL.Object object)
      {
        return createObjectAdapter();
      }
      @Override
      public Adapter casePredOrObject(PredOrObject object)
      {
        return createPredOrObjectAdapter();
      }
      @Override
      public Adapter caseExistencePreface(ExistencePreface object)
      {
        return createExistencePrefaceAdapter();
      }
      @Override
      public Adapter caseAuxNeg(AuxNeg object)
      {
        return createAuxNegAdapter();
      }
      @Override
      public Adapter casePreNominative(PreNominative object)
      {
        return createPreNominativeAdapter();
      }
      @Override
      public Adapter caseRelation(Relation object)
      {
        return createRelationAdapter();
      }
      @Override
      public Adapter caseRelObjects(RelObjects object)
      {
        return createRelObjectsAdapter();
      }
      @Override
      public Adapter caseConstraints(Constraints object)
      {
        return createConstraintsAdapter();
      }
      @Override
      public Adapter caseConstraint(Constraint object)
      {
        return createConstraintAdapter();
      }
      @Override
      public Adapter caseConstraintOrdinators(ConstraintOrdinators object)
      {
        return createConstraintOrdinatorsAdapter();
      }
      @Override
      public Adapter caseSetConstraint(SetConstraint object)
      {
        return createSetConstraintAdapter();
      }
      @Override
      public Adapter caseTimeConstraint(TimeConstraint object)
      {
        return createTimeConstraintAdapter();
      }
      @Override
      public Adapter caseObjectConstraint(ObjectConstraint object)
      {
        return createObjectConstraintAdapter();
      }
      @Override
      public Adapter caseUnitConstraints(UnitConstraints object)
      {
        return createUnitConstraintsAdapter();
      }
      @Override
      public Adapter caseIntervallConstraints(IntervallConstraints object)
      {
        return createIntervallConstraintsAdapter();
      }
      @Override
      public Adapter caseSingleValueConstraints(SingleValueConstraints object)
      {
        return createSingleValueConstraintsAdapter();
      }
      @Override
      public Adapter caseValueSet(ValueSet object)
      {
        return createValueSetAdapter();
      }
      @Override
      public Adapter caseObjectSet(ObjectSet object)
      {
        return createObjectSetAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseIntValue(IntValue object)
      {
        return createIntValueAdapter();
      }
      @Override
      public Adapter caseFloatValue(FloatValue object)
      {
        return createFloatValueAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Requirement <em>Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Requirement
   * @generated
   */
  public Adapter createRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.RequirementText <em>Requirement Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.RequirementText
   * @generated
   */
  public Adapter createRequirementTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.ConditionalClause <em>Conditional Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.ConditionalClause
   * @generated
   */
  public Adapter createConditionalClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.MainClause <em>Main Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.MainClause
   * @generated
   */
  public Adapter createMainClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Clauses <em>Clauses</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Clauses
   * @generated
   */
  public Adapter createClausesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Clause <em>Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Clause
   * @generated
   */
  public Adapter createClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.ModalitySentence <em>Modality Sentence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.ModalitySentence
   * @generated
   */
  public Adapter createModalitySentenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.PredicateSentence <em>Predicate Sentence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.PredicateSentence
   * @generated
   */
  public Adapter createPredicateSentenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.ExistenceSentence <em>Existence Sentence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.ExistenceSentence
   * @generated
   */
  public Adapter createExistenceSentenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.PropertySentence <em>Property Sentence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.PropertySentence
   * @generated
   */
  public Adapter createPropertySentenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Property <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Property
   * @generated
   */
  public Adapter createPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.SentenceBegin <em>Sentence Begin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.SentenceBegin
   * @generated
   */
  public Adapter createSentenceBeginAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.SentenceEnding <em>Sentence Ending</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.SentenceEnding
   * @generated
   */
  public Adapter createSentenceEndingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.relativeClause <em>relative Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.relativeClause
   * @generated
   */
  public Adapter createrelativeClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.relativeSentence <em>relative Sentence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.relativeSentence
   * @generated
   */
  public Adapter createrelativeSentenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Actors <em>Actors</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Actors
   * @generated
   */
  public Adapter createActorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Actor <em>Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Actor
   * @generated
   */
  public Adapter createActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Preds <em>Preds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Preds
   * @generated
   */
  public Adapter createPredsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Predicate <em>Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Predicate
   * @generated
   */
  public Adapter createPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.PredicateObject <em>Predicate Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.PredicateObject
   * @generated
   */
  public Adapter createPredicateObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Object <em>Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Object
   * @generated
   */
  public Adapter createObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.PredOrObject <em>Pred Or Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.PredOrObject
   * @generated
   */
  public Adapter createPredOrObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.ExistencePreface <em>Existence Preface</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.ExistencePreface
   * @generated
   */
  public Adapter createExistencePrefaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.AuxNeg <em>Aux Neg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.AuxNeg
   * @generated
   */
  public Adapter createAuxNegAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.PreNominative <em>Pre Nominative</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.PreNominative
   * @generated
   */
  public Adapter createPreNominativeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Relation <em>Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Relation
   * @generated
   */
  public Adapter createRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.RelObjects <em>Rel Objects</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.RelObjects
   * @generated
   */
  public Adapter createRelObjectsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Constraints <em>Constraints</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Constraints
   * @generated
   */
  public Adapter createConstraintsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Constraint <em>Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Constraint
   * @generated
   */
  public Adapter createConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.ConstraintOrdinators <em>Constraint Ordinators</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.ConstraintOrdinators
   * @generated
   */
  public Adapter createConstraintOrdinatorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.SetConstraint <em>Set Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.SetConstraint
   * @generated
   */
  public Adapter createSetConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.TimeConstraint <em>Time Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.TimeConstraint
   * @generated
   */
  public Adapter createTimeConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.ObjectConstraint <em>Object Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.ObjectConstraint
   * @generated
   */
  public Adapter createObjectConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.UnitConstraints <em>Unit Constraints</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.UnitConstraints
   * @generated
   */
  public Adapter createUnitConstraintsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.IntervallConstraints <em>Intervall Constraints</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.IntervallConstraints
   * @generated
   */
  public Adapter createIntervallConstraintsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.SingleValueConstraints <em>Single Value Constraints</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.SingleValueConstraints
   * @generated
   */
  public Adapter createSingleValueConstraintsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.ValueSet <em>Value Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.ValueSet
   * @generated
   */
  public Adapter createValueSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.ObjectSet <em>Object Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.ObjectSet
   * @generated
   */
  public Adapter createObjectSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.IntValue <em>Int Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.IntValue
   * @generated
   */
  public Adapter createIntValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.fraunhofer.isst.stars.requirementDSL.FloatValue <em>Float Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.fraunhofer.isst.stars.requirementDSL.FloatValue
   * @generated
   */
  public Adapter createFloatValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //RequirementDSLAdapterFactory

/**
 * generated by Xtext 2.14.0
 */
package de.fraunhofer.isst.stars.requirementDSL;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Clause Ordinator</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see de.fraunhofer.isst.stars.requirementDSL.RequirementDSLPackage#getClauseOrdinator()
 * @model
 * @generated
 */
public enum ClauseOrdinator implements Enumerator
{
  /**
   * The '<em><b>IF</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #IF_VALUE
   * @generated
   * @ordered
   */
  IF(0, "IF", "if"),

  /**
   * The '<em><b>AFTER</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #AFTER_VALUE
   * @generated
   * @ordered
   */
  AFTER(1, "AFTER", "after"),

  /**
   * The '<em><b>ONCE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ONCE_VALUE
   * @generated
   * @ordered
   */
  ONCE(2, "ONCE", "once"),

  /**
   * The '<em><b>WHEN</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #WHEN_VALUE
   * @generated
   * @ordered
   */
  WHEN(3, "WHEN", "when"),

  /**
   * The '<em><b>WHENEVER</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #WHENEVER_VALUE
   * @generated
   * @ordered
   */
  WHENEVER(4, "WHENEVER", "whenever"),

  /**
   * The '<em><b>WHILE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #WHILE_VALUE
   * @generated
   * @ordered
   */
  WHILE(5, "WHILE", "while"),

  /**
   * The '<em><b>BEFORE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BEFORE_VALUE
   * @generated
   * @ordered
   */
  BEFORE(6, "BEFORE", "before"),

  /**
   * The '<em><b>UNTIL</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #UNTIL_VALUE
   * @generated
   * @ordered
   */
  UNTIL(7, "UNTIL", "until");

  /**
   * The '<em><b>IF</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>IF</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #IF
   * @model literal="if"
   * @generated
   * @ordered
   */
  public static final int IF_VALUE = 0;

  /**
   * The '<em><b>AFTER</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>AFTER</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #AFTER
   * @model literal="after"
   * @generated
   * @ordered
   */
  public static final int AFTER_VALUE = 1;

  /**
   * The '<em><b>ONCE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>ONCE</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #ONCE
   * @model literal="once"
   * @generated
   * @ordered
   */
  public static final int ONCE_VALUE = 2;

  /**
   * The '<em><b>WHEN</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>WHEN</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #WHEN
   * @model literal="when"
   * @generated
   * @ordered
   */
  public static final int WHEN_VALUE = 3;

  /**
   * The '<em><b>WHENEVER</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>WHENEVER</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #WHENEVER
   * @model literal="whenever"
   * @generated
   * @ordered
   */
  public static final int WHENEVER_VALUE = 4;

  /**
   * The '<em><b>WHILE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>WHILE</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #WHILE
   * @model literal="while"
   * @generated
   * @ordered
   */
  public static final int WHILE_VALUE = 5;

  /**
   * The '<em><b>BEFORE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>BEFORE</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BEFORE
   * @model literal="before"
   * @generated
   * @ordered
   */
  public static final int BEFORE_VALUE = 6;

  /**
   * The '<em><b>UNTIL</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>UNTIL</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #UNTIL
   * @model literal="until"
   * @generated
   * @ordered
   */
  public static final int UNTIL_VALUE = 7;

  /**
   * An array of all the '<em><b>Clause Ordinator</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final ClauseOrdinator[] VALUES_ARRAY =
    new ClauseOrdinator[]
    {
      IF,
      AFTER,
      ONCE,
      WHEN,
      WHENEVER,
      WHILE,
      BEFORE,
      UNTIL,
    };

  /**
   * A public read-only list of all the '<em><b>Clause Ordinator</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<ClauseOrdinator> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Clause Ordinator</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ClauseOrdinator get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ClauseOrdinator result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Clause Ordinator</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ClauseOrdinator getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ClauseOrdinator result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Clause Ordinator</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ClauseOrdinator get(int value)
  {
    switch (value)
    {
      case IF_VALUE: return IF;
      case AFTER_VALUE: return AFTER;
      case ONCE_VALUE: return ONCE;
      case WHEN_VALUE: return WHEN;
      case WHENEVER_VALUE: return WHENEVER;
      case WHILE_VALUE: return WHILE;
      case BEFORE_VALUE: return BEFORE;
      case UNTIL_VALUE: return UNTIL;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private ClauseOrdinator(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //ClauseOrdinator

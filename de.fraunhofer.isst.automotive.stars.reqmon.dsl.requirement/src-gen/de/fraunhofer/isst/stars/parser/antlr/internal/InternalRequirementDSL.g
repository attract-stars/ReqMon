/*
 * generated by Xtext 2.16.0
 */
grammar InternalRequirementDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.fraunhofer.isst.stars.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.fraunhofer.isst.stars.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.fraunhofer.isst.stars.services.RequirementDSLGrammarAccess;

}

@parser::members {

 	private RequirementDSLGrammarAccess grammarAccess;

    public InternalRequirementDSLParser(TokenStream input, RequirementDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected RequirementDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getRequirementsRequirementParserRuleCall_0());
			}
			lv_requirements_0_0=ruleRequirement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"requirements",
					lv_requirements_0_0,
					"de.fraunhofer.isst.stars.RequirementDSL.Requirement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	iv_ruleRequirement=ruleRequirement
	{ $current=$iv_ruleRequirement.current; }
	EOF;

// Rule Requirement
ruleRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Req'
			{
				newLeafNode(otherlv_0, grammarAccess.getRequirementAccess().getReqKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRequirementAccess().getReqIDReqIDParserRuleCall_1_0());
				}
				lv_reqID_1_0=ruleReqID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequirementRule());
					}
					set(
						$current,
						"reqID",
						lv_reqID_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.ReqID");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getRequirementAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRequirementAccess().getTextRequirementTextParserRuleCall_3_0());
				}
				lv_text_3_0=ruleRequirementText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequirementRule());
					}
					set(
						$current,
						"text",
						lv_text_3_0,
						"de.fraunhofer.isst.stars.RequirementDSL.RequirementText");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getRequirementAccess().getFullStopKeyword_4_0());
			}
			    |
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getRequirementAccess().getSemicolonKeyword_4_1());
			}
		)
		(
			otherlv_6='\n'
			{
				newLeafNode(otherlv_6, grammarAccess.getRequirementAccess().getLineFeedKeyword_5());
			}
		)+
	)
;

// Entry rule entryRuleRequirementText
entryRuleRequirementText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementTextRule()); }
	iv_ruleRequirementText=ruleRequirementText
	{ $current=$iv_ruleRequirementText.current; }
	EOF;

// Rule RequirementText
ruleRequirementText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRequirementTextAccess().getCondClausesConditionalClauseParserRuleCall_0_0_0());
					}
					lv_condClauses_0_0=ruleConditionalClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequirementTextRule());
						}
						add(
							$current,
							"condClauses",
							lv_condClauses_0_0,
							"de.fraunhofer.isst.stars.RequirementDSL.ConditionalClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1=','
				{
					newLeafNode(otherlv_1, grammarAccess.getRequirementTextAccess().getCommaKeyword_0_1());
				}
			)?
			otherlv_2='then'
			{
				newLeafNode(otherlv_2, grammarAccess.getRequirementTextAccess().getThenKeyword_0_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRequirementTextAccess().getMainclausesMainClauseParserRuleCall_1_0());
				}
				lv_mainclauses_3_0=ruleMainClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequirementTextRule());
					}
					set(
						$current,
						"mainclauses",
						lv_mainclauses_3_0,
						"de.fraunhofer.isst.stars.RequirementDSL.MainClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getRequirementTextAccess().getCommaKeyword_2_0());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getRequirementTextAccess().getCondClausesConditionalClauseParserRuleCall_2_1_0());
					}
					lv_condClauses_5_0=ruleConditionalClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequirementTextRule());
						}
						add(
							$current,
							"condClauses",
							lv_condClauses_5_0,
							"de.fraunhofer.isst.stars.RequirementDSL.ConditionalClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleConditionalClause
entryRuleConditionalClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalClauseRule()); }
	iv_ruleConditionalClause=ruleConditionalClause
	{ $current=$iv_ruleConditionalClause.current; }
	EOF;

// Rule ConditionalClause
ruleConditionalClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalClauseAccess().getOrdinatorClauseOrdinatorEnumRuleCall_0_0());
				}
				lv_ordinator_0_0=ruleClauseOrdinator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalClauseRule());
					}
					set(
						$current,
						"ordinator",
						lv_ordinator_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.ClauseOrdinator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalClauseAccess().getClausesClausesParserRuleCall_1_0());
				}
				lv_clauses_1_0=ruleClauses
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalClauseRule());
					}
					set(
						$current,
						"clauses",
						lv_clauses_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Clauses");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMainClause
entryRuleMainClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainClauseRule()); }
	iv_ruleMainClause=ruleMainClause
	{ $current=$iv_ruleMainClause.current; }
	EOF;

// Rule MainClause
ruleMainClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMainClauseAccess().getModifierModifierEnumRuleCall_0_0());
				}
				lv_modifier_0_0=ruleModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainClauseRule());
					}
					set(
						$current,
						"modifier",
						lv_modifier_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Modifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMainClauseAccess().getClausesClausesParserRuleCall_1_0());
				}
				lv_clauses_1_0=ruleClauses
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainClauseRule());
					}
					add(
						$current,
						"clauses",
						lv_clauses_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Clauses");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleClauses
entryRuleClauses returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClausesRule()); }
	iv_ruleClauses=ruleClauses
	{ $current=$iv_ruleClauses.current; }
	EOF;

// Rule Clauses
ruleClauses returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClausesAccess().getClausesClauseParserRuleCall_0_0());
				}
				lv_clauses_0_0=ruleClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClausesRule());
					}
					add(
						$current,
						"clauses",
						lv_clauses_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Clause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getClausesAccess().getConjunctionConjunctionParserRuleCall_1_0_0());
					}
					lv_conjunction_1_0=ruleConjunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClausesRule());
						}
						add(
							$current,
							"conjunction",
							lv_conjunction_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Conjunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getClausesAccess().getClausesClauseParserRuleCall_1_1_0());
					}
					lv_clauses_2_0=ruleClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClausesRule());
						}
						add(
							$current,
							"clauses",
							lv_clauses_2_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Clause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	iv_ruleClause=ruleClause
	{ $current=$iv_ruleClause.current; }
	EOF;

// Rule Clause
ruleClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getClauseAccess().getModalitySentenceParserRuleCall_0());
		}
		this_ModalitySentence_0=ruleModalitySentence
		{
			$current = $this_ModalitySentence_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClauseAccess().getPredicateSentenceParserRuleCall_1());
		}
		this_PredicateSentence_1=rulePredicateSentence
		{
			$current = $this_PredicateSentence_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClauseAccess().getExistenceSentenceParserRuleCall_2());
		}
		this_ExistenceSentence_2=ruleExistenceSentence
		{
			$current = $this_ExistenceSentence_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClauseAccess().getPropertySentenceParserRuleCall_3());
		}
		this_PropertySentence_3=rulePropertySentence
		{
			$current = $this_PropertySentence_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModalitySentence
entryRuleModalitySentence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModalitySentenceRule()); }
	iv_ruleModalitySentence=ruleModalitySentence
	{ $current=$iv_ruleModalitySentence.current; }
	EOF;

// Rule ModalitySentence
ruleModalitySentence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModalitySentenceAccess().getBeginSentenceBeginParserRuleCall_0_0());
				}
				lv_begin_0_0=ruleSentenceBegin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModalitySentenceRule());
					}
					set(
						$current,
						"begin",
						lv_begin_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.SentenceBegin");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModalitySentenceAccess().getActorsActorsParserRuleCall_1_0());
				}
				lv_actors_1_0=ruleActors
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModalitySentenceRule());
					}
					set(
						$current,
						"actors",
						lv_actors_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Actors");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModalitySentenceAccess().getModelityModalityEnumRuleCall_2_0());
				}
				lv_modelity_2_0=ruleModality
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModalitySentenceRule());
					}
					set(
						$current,
						"modelity",
						lv_modelity_2_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Modality");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModalitySentenceAccess().getNegationNegationParserRuleCall_3_0());
				}
				lv_negation_3_0=ruleNegation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModalitySentenceRule());
					}
					set(
						$current,
						"negation",
						true,
						"de.fraunhofer.isst.stars.RequirementDSL.Negation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModalitySentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_4_0());
				}
				lv_auxiliarVerb_4_0=ruleAuxiliaryVerb
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModalitySentenceRule());
					}
					set(
						$current,
						"auxiliarVerb",
						lv_auxiliarVerb_4_0,
						"de.fraunhofer.isst.stars.RequirementDSL.AuxiliaryVerb");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModalitySentenceAccess().getPredicatePredicateParserRuleCall_5_0());
				}
				lv_predicate_5_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModalitySentenceRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_5_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModalitySentenceAccess().getEndingSentenceEndingParserRuleCall_6_0());
				}
				lv_ending_6_0=ruleSentenceEnding
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModalitySentenceRule());
					}
					set(
						$current,
						"ending",
						lv_ending_6_0,
						"de.fraunhofer.isst.stars.RequirementDSL.SentenceEnding");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePredicateSentence
entryRulePredicateSentence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateSentenceRule()); }
	iv_rulePredicateSentence=rulePredicateSentence
	{ $current=$iv_rulePredicateSentence.current; }
	EOF;

// Rule PredicateSentence
rulePredicateSentence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateSentenceAccess().getBeginSentenceBeginParserRuleCall_0_0_0());
					}
					lv_begin_0_0=ruleSentenceBegin
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateSentenceRule());
						}
						set(
							$current,
							"begin",
							lv_begin_0_0,
							"de.fraunhofer.isst.stars.RequirementDSL.SentenceBegin");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateSentenceAccess().getActorsActorsParserRuleCall_0_1_0());
					}
					lv_actors_1_0=ruleActors
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateSentenceRule());
						}
						set(
							$current,
							"actors",
							lv_actors_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Actors");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateSentenceAccess().getAuxNegAuxNegParserRuleCall_0_2_0());
					}
					lv_auxNeg_2_0=ruleAuxNeg
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateSentenceRule());
						}
						add(
							$current,
							"auxNeg",
							lv_auxNeg_2_0,
							"de.fraunhofer.isst.stars.RequirementDSL.AuxNeg");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_0_3_0());
					}
					lv_auxiliarVerb_3_0=ruleAuxiliaryVerb
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateSentenceRule());
						}
						add(
							$current,
							"auxiliarVerb",
							lv_auxiliarVerb_3_0,
							"de.fraunhofer.isst.stars.RequirementDSL.AuxiliaryVerb");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateSentenceAccess().getPredsPredsParserRuleCall_0_4_0());
					}
					lv_preds_4_0=rulePreds
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateSentenceRule());
						}
						set(
							$current,
							"preds",
							lv_preds_4_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Preds");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateSentenceAccess().getEndingSentenceEndingParserRuleCall_0_5_0());
					}
					lv_ending_5_0=ruleSentenceEnding
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateSentenceRule());
						}
						set(
							$current,
							"ending",
							lv_ending_5_0,
							"de.fraunhofer.isst.stars.RequirementDSL.SentenceEnding");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateSentenceAccess().getBeginSentenceBeginParserRuleCall_1_0_0());
					}
					lv_begin_6_0=ruleSentenceBegin
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateSentenceRule());
						}
						set(
							$current,
							"begin",
							lv_begin_6_0,
							"de.fraunhofer.isst.stars.RequirementDSL.SentenceBegin");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateSentenceAccess().getActorsActorsParserRuleCall_1_1_0());
					}
					lv_actors_7_0=ruleActors
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateSentenceRule());
						}
						set(
							$current,
							"actors",
							lv_actors_7_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Actors");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateSentenceAccess().getPredsPredsParserRuleCall_1_2_0());
					}
					lv_preds_8_0=rulePreds
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateSentenceRule());
						}
						set(
							$current,
							"preds",
							lv_preds_8_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Preds");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateSentenceAccess().getEndingSentenceEndingParserRuleCall_1_3_0());
					}
					lv_ending_9_0=ruleSentenceEnding
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateSentenceRule());
						}
						set(
							$current,
							"ending",
							lv_ending_9_0,
							"de.fraunhofer.isst.stars.RequirementDSL.SentenceEnding");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleExistenceSentence
entryRuleExistenceSentence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExistenceSentenceRule()); }
	iv_ruleExistenceSentence=ruleExistenceSentence
	{ $current=$iv_ruleExistenceSentence.current; }
	EOF;

// Rule ExistenceSentence
ruleExistenceSentence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExistenceSentenceAccess().getExistenceParserRuleCall_0());
		}
		this_Existence_0=ruleExistence
		{
			$current = $this_Existence_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistenceSentenceAccess().getActorsActorsParserRuleCall_1_0());
				}
				lv_actors_1_0=ruleActors
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistenceSentenceRule());
					}
					set(
						$current,
						"actors",
						lv_actors_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Actors");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getExistenceSentenceAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistenceSentenceAccess().getRelativeClauseRelativeClauseParserRuleCall_3_0());
				}
				lv_relativeClause_3_0=ruleRelativeClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistenceSentenceRule());
					}
					set(
						$current,
						"relativeClause",
						lv_relativeClause_3_0,
						"de.fraunhofer.isst.stars.RequirementDSL.RelativeClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getExistenceSentenceAccess().getCommaKeyword_4());
		}
	)
;

// Entry rule entryRulePropertySentence
entryRulePropertySentence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertySentenceRule()); }
	iv_rulePropertySentence=rulePropertySentence
	{ $current=$iv_rulePropertySentence.current; }
	EOF;

// Rule PropertySentence
rulePropertySentence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getActorsActorsParserRuleCall_0_0_0());
					}
					lv_actors_0_0=ruleActors
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"actors",
							lv_actors_0_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Actors");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getPropertyPropertyParserRuleCall_0_1_0());
					}
					lv_property_1_0=ruleProperty
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"property",
							lv_property_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Property");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getRelaRelationParserRuleCall_0_2_0());
					}
					lv_rela_2_0=ruleRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"rela",
							lv_rela_2_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Relation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getModalityModalityEnumRuleCall_0_3_0());
					}
					lv_modality_3_0=ruleModality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"modality",
							lv_modality_3_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Modality");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getNegationNegationParserRuleCall_0_4_0());
					}
					lv_negation_4_0=ruleNegation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"negation",
							true,
							"de.fraunhofer.isst.stars.RequirementDSL.Negation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_0_5_0());
					}
					lv_auxiliarVerb_5_0=ruleAuxiliaryVerb
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"auxiliarVerb",
							lv_auxiliarVerb_5_0,
							"de.fraunhofer.isst.stars.RequirementDSL.AuxiliaryVerb");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getPredObjPredOrObjectParserRuleCall_0_6_0());
					}
					lv_predObj_6_0=rulePredOrObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"predObj",
							lv_predObj_6_0,
							"de.fraunhofer.isst.stars.RequirementDSL.PredOrObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getEndingSentenceEndingParserRuleCall_0_7_0());
					}
					lv_ending_7_0=ruleSentenceEnding
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"ending",
							lv_ending_7_0,
							"de.fraunhofer.isst.stars.RequirementDSL.SentenceEnding");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getActorsActorsParserRuleCall_1_0_0());
					}
					lv_actors_8_0=ruleActors
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"actors",
							lv_actors_8_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Actors");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getPropertyPropertyParserRuleCall_1_1_0());
					}
					lv_property_9_0=ruleProperty
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"property",
							lv_property_9_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Property");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getRelaRelationParserRuleCall_1_2_0());
					}
					lv_rela_10_0=ruleRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"rela",
							lv_rela_10_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Relation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getAuxNegAuxNegParserRuleCall_1_3_0());
					}
					lv_auxNeg_11_0=ruleAuxNeg
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"auxNeg",
							lv_auxNeg_11_0,
							"de.fraunhofer.isst.stars.RequirementDSL.AuxNeg");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPropertySentenceAccess().getPredObjPredOrObjectParserRuleCall_1_4_0_0());
						}
						lv_predObj_12_0=rulePredOrObject
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
							}
							set(
								$current,
								"predObj",
								lv_predObj_12_0,
								"de.fraunhofer.isst.stars.RequirementDSL.PredOrObject");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_1_4_1_0());
						}
						lv_constraints_13_0=ruleConstraints
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
							}
							set(
								$current,
								"constraints",
								lv_constraints_13_0,
								"de.fraunhofer.isst.stars.RequirementDSL.Constraints");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySentenceAccess().getEndingSentenceEndingParserRuleCall_1_5_0());
					}
					lv_ending_14_0=ruleSentenceEnding
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySentenceRule());
						}
						set(
							$current,
							"ending",
							lv_ending_14_0,
							"de.fraunhofer.isst.stars.RequirementDSL.SentenceEnding");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_PROPERTY_TERM_0=RULE_PROPERTY_TERM
		{
			newLeafNode(this_PROPERTY_TERM_0, grammarAccess.getPropertyAccess().getPROPERTY_TERMTerminalRuleCall_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertyAccess().getPropertyWORDParserRuleCall_1_0_0());
					}
					lv_property_1_0=ruleWORD
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertyRule());
						}
						add(
							$current,
							"property",
							lv_property_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.WORD");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			    |
			(
				(
					lv_property_2_0=RULE_STRING
					{
						newLeafNode(lv_property_2_0, grammarAccess.getPropertyAccess().getPropertySTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyRule());
						}
						addWithLastConsumed(
							$current,
							"property",
							lv_property_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSentenceBegin
entryRuleSentenceBegin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSentenceBeginRule()); }
	iv_ruleSentenceBegin=ruleSentenceBegin
	{ $current=$iv_ruleSentenceBegin.current; }
	EOF;

// Rule SentenceBegin
ruleSentenceBegin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSentenceBeginAccess().getRelaRelationParserRuleCall_0_0());
				}
				lv_rela_0_0=ruleRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSentenceBeginRule());
					}
					set(
						$current,
						"rela",
						lv_rela_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Relation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getSentenceBeginAccess().getCommaKeyword_1());
		}
	)
;

// Entry rule entryRuleSentenceEnding
entryRuleSentenceEnding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSentenceEndingRule()); }
	iv_ruleSentenceEnding=ruleSentenceEnding
	{ $current=$iv_ruleSentenceEnding.current; }
	EOF;

// Rule SentenceEnding
ruleSentenceEnding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSentenceEndingAccess().getConstConstraintsParserRuleCall_0_0());
				}
				lv_const_0_0=ruleConstraints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSentenceEndingRule());
					}
					add(
						$current,
						"const",
						lv_const_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Constraints");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSentenceEndingAccess().getConstConstraintsParserRuleCall_1_0_0());
					}
					lv_const_1_0=ruleConstraints
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSentenceEndingRule());
						}
						add(
							$current,
							"const",
							lv_const_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Constraints");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getSentenceEndingAccess().getRelaRelationParserRuleCall_1_1_0());
					}
					lv_rela_2_0=ruleRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSentenceEndingRule());
						}
						set(
							$current,
							"rela",
							lv_rela_2_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Relation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSentenceEndingAccess().getRelaRelationParserRuleCall_2_0_0());
					}
					lv_rela_3_0=ruleRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSentenceEndingRule());
						}
						set(
							$current,
							"rela",
							lv_rela_3_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Relation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSentenceEndingAccess().getConstConstraintsParserRuleCall_2_1_0());
					}
					lv_const_4_0=ruleConstraints
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSentenceEndingRule());
						}
						add(
							$current,
							"const",
							lv_const_4_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Constraints");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
	)
;

// Entry rule entryRuleRelativeClause
entryRuleRelativeClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelativeClauseRule()); }
	iv_ruleRelativeClause=ruleRelativeClause
	{ $current=$iv_ruleRelativeClause.current; }
	EOF;

// Rule RelativeClause
ruleRelativeClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelativeClauseAccess().getSentenceRelativeSentenceParserRuleCall_0_0());
				}
				lv_sentence_0_0=ruleRelativeSentence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelativeClauseRule());
					}
					set(
						$current,
						"sentence",
						lv_sentence_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.RelativeSentence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeClauseAccess().getConjunctionConjunctionParserRuleCall_1_0_0());
					}
					lv_conjunction_1_0=ruleConjunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeClauseRule());
						}
						add(
							$current,
							"conjunction",
							lv_conjunction_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Conjunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeClauseAccess().getCondClausesConditionalClauseParserRuleCall_1_1_0());
					}
					lv_condClauses_2_0=ruleConditionalClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeClauseRule());
						}
						add(
							$current,
							"condClauses",
							lv_condClauses_2_0,
							"de.fraunhofer.isst.stars.RequirementDSL.ConditionalClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelativeSentence
entryRuleRelativeSentence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelativeSentenceRule()); }
	iv_ruleRelativeSentence=ruleRelativeSentence
	{ $current=$iv_ruleRelativeSentence.current; }
	EOF;

// Rule RelativeSentence
ruleRelativeSentence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeSentenceAccess().getPronounRelativePronounsSubjectParserRuleCall_0_0_0());
					}
					lv_pronoun_0_0=ruleRelativePronounsSubject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
						}
						set(
							$current,
							"pronoun",
							lv_pronoun_0_0,
							"de.fraunhofer.isst.stars.RequirementDSL.RelativePronounsSubject");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeSentenceAccess().getModelityModalityEnumRuleCall_0_1_0());
					}
					lv_modelity_1_0=ruleModality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
						}
						set(
							$current,
							"modelity",
							lv_modelity_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Modality");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeSentenceAccess().getNegationNegationParserRuleCall_0_2_0());
					}
					lv_negation_2_0=ruleNegation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
						}
						set(
							$current,
							"negation",
							true,
							"de.fraunhofer.isst.stars.RequirementDSL.Negation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeSentenceAccess().getPredicatePredicateParserRuleCall_0_3_0());
					}
					lv_predicate_3_0=rulePredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
						}
						set(
							$current,
							"predicate",
							lv_predicate_3_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Predicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeSentenceAccess().getConstraintsConstraintsParserRuleCall_0_4_0());
					}
					lv_constraints_4_0=ruleConstraints
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
						}
						add(
							$current,
							"constraints",
							lv_constraints_4_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Constraints");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeSentenceAccess().getPronounRelativePronounsSubjectParserRuleCall_1_0_0());
					}
					lv_pronoun_5_0=ruleRelativePronounsSubject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
						}
						set(
							$current,
							"pronoun",
							lv_pronoun_5_0,
							"de.fraunhofer.isst.stars.RequirementDSL.RelativePronounsSubject");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRelativeSentenceAccess().getAuxiliarWORDParserRuleCall_1_1_0_0());
						}
						lv_auxiliar_6_0=ruleWORD
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
							}
							set(
								$current,
								"auxiliar",
								lv_auxiliar_6_0,
								"de.fraunhofer.isst.stars.RequirementDSL.WORD");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getRelativeSentenceAccess().getNegationNegationParserRuleCall_1_1_1_0());
						}
						lv_negation_7_0=ruleNegation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
							}
							set(
								$current,
								"negation",
								true,
								"de.fraunhofer.isst.stars.RequirementDSL.Negation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeSentenceAccess().getPredicatePredicateParserRuleCall_1_2_0());
					}
					lv_predicate_8_0=rulePredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
						}
						set(
							$current,
							"predicate",
							lv_predicate_8_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Predicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeSentenceAccess().getConstraintsConstraintsParserRuleCall_1_3_0());
					}
					lv_constraints_9_0=ruleConstraints
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
						}
						add(
							$current,
							"constraints",
							lv_constraints_9_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Constraints");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRelativeSentenceAccess().getPronounRelativePronounsObjectParserRuleCall_2_0_0());
					}
					lv_pronoun_10_0=ruleRelativePronounsObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
						}
						set(
							$current,
							"pronoun",
							lv_pronoun_10_0,
							"de.fraunhofer.isst.stars.RequirementDSL.RelativePronounsObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRelativeSentenceAccess().getClauseModalitySentenceParserRuleCall_2_1_0_0());
						}
						lv_clause_11_0=ruleModalitySentence
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
							}
							set(
								$current,
								"clause",
								lv_clause_11_0,
								"de.fraunhofer.isst.stars.RequirementDSL.ModalitySentence");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getRelativeSentenceAccess().getClausePredicateSentenceParserRuleCall_2_1_1_0());
						}
						lv_clause_12_0=rulePredicateSentence
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRelativeSentenceRule());
							}
							set(
								$current,
								"clause",
								lv_clause_12_0,
								"de.fraunhofer.isst.stars.RequirementDSL.PredicateSentence");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleActors
entryRuleActors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorsRule()); }
	iv_ruleActors=ruleActors
	{ $current=$iv_ruleActors.current; }
	EOF;

// Rule Actors
ruleActors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActorsAccess().getActorsActorParserRuleCall_0_0());
				}
				lv_actors_0_0=ruleActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorsRule());
					}
					add(
						$current,
						"actors",
						lv_actors_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Actor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getActorsAccess().getConjunctionConjunctionParserRuleCall_1_0_0());
					}
					lv_conjunction_1_0=ruleConjunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActorsRule());
						}
						add(
							$current,
							"conjunction",
							lv_conjunction_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Conjunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getActorsAccess().getActorsActorParserRuleCall_1_1_0());
					}
					lv_actors_2_0=ruleActor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActorsRule());
						}
						add(
							$current,
							"actors",
							lv_actors_2_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Actor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	iv_ruleActor=ruleActor
	{ $current=$iv_ruleActor.current; }
	EOF;

// Rule Actor
ruleActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActorAccess().getPreNominativePreNominativeParserRuleCall_0_0());
				}
				lv_PreNominative_0_0=rulePreNominative
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorRule());
					}
					set(
						$current,
						"PreNominative",
						lv_PreNominative_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.PreNominative");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getActorAccess().getActorWORDParserRuleCall_1_0_0());
					}
					lv_actor_1_0=ruleWORD
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActorRule());
						}
						set(
							$current,
							"actor",
							lv_actor_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.WORD");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_actor_2_0=RULE_STRING
					{
						newLeafNode(lv_actor_2_0, grammarAccess.getActorAccess().getActorSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActorRule());
						}
						setWithLastConsumed(
							$current,
							"actor",
							lv_actor_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRulePreds
entryRulePreds returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredsRule()); }
	iv_rulePreds=rulePreds
	{ $current=$iv_rulePreds.current; }
	EOF;

// Rule Preds
rulePreds returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredsAccess().getPredicatePredicateParserRuleCall_0_0());
				}
				lv_predicate_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredsRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPredsAccess().getPredObjPredicateObjectParserRuleCall_1_0());
				}
				lv_predObj_1_0=rulePredicateObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredsRule());
					}
					set(
						$current,
						"predObj",
						lv_predObj_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.PredicateObject");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getPredicatesWORDParserRuleCall_0_0());
				}
				lv_predicates_0_0=ruleWORD
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					add(
						$current,
						"predicates",
						lv_predicates_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.WORD");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		    |
		(
			(
				lv_predicates_1_0=RULE_STRING
				{
					newLeafNode(lv_predicates_1_0, grammarAccess.getPredicateAccess().getPredicatesSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPredicateRule());
					}
					addWithLastConsumed(
						$current,
						"predicates",
						lv_predicates_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateAccess().getPredicatesWORDParserRuleCall_2_0_0());
					}
					lv_predicates_2_0=ruleWORD
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateRule());
						}
						add(
							$current,
							"predicates",
							lv_predicates_2_0,
							"de.fraunhofer.isst.stars.RequirementDSL.WORD");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateAccess().getObjectPredicateObjectParserRuleCall_2_1_0());
					}
					lv_object_3_0=rulePredicateObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateRule());
						}
						set(
							$current,
							"object",
							lv_object_3_0,
							"de.fraunhofer.isst.stars.RequirementDSL.PredicateObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePredicateObject
entryRulePredicateObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateObjectRule()); }
	iv_rulePredicateObject=rulePredicateObject
	{ $current=$iv_rulePredicateObject.current; }
	EOF;

// Rule PredicateObject
rulePredicateObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateObjectAccess().getArticlePreNominativeParserRuleCall_0_0());
				}
				lv_article_0_0=rulePreNominative
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateObjectRule());
					}
					set(
						$current,
						"article",
						lv_article_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.PreNominative");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateObjectAccess().getObjectWORDParserRuleCall_1_0_0());
					}
					lv_object_1_0=ruleWORD
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateObjectRule());
						}
						add(
							$current,
							"object",
							lv_object_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.WORD");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			    |
			(
				(
					lv_object_2_0=RULE_STRING
					{
						newLeafNode(lv_object_2_0, grammarAccess.getPredicateObjectAccess().getObjectSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPredicateObjectRule());
						}
						addWithLastConsumed(
							$current,
							"object",
							lv_object_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	iv_ruleObject=ruleObject
	{ $current=$iv_ruleObject.current; }
	EOF;

// Rule Object
ruleObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectAccess().getArticlePreNominativeParserRuleCall_0_0());
				}
				lv_article_0_0=rulePreNominative
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectRule());
					}
					set(
						$current,
						"article",
						lv_article_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.PreNominative");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectAccess().getObjectWORDParserRuleCall_1_0_0());
					}
					lv_object_1_0=ruleWORD
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectRule());
						}
						add(
							$current,
							"object",
							lv_object_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.WORD");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			    |
			(
				(
					lv_object_2_0=RULE_STRING
					{
						newLeafNode(lv_object_2_0, grammarAccess.getObjectAccess().getObjectSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjectRule());
						}
						addWithLastConsumed(
							$current,
							"object",
							lv_object_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRulePredOrObject
entryRulePredOrObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredOrObjectRule()); }
	iv_rulePredOrObject=rulePredOrObject
	{ $current=$iv_rulePredOrObject.current; }
	EOF;

// Rule PredOrObject
rulePredOrObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredOrObjectAccess().getPredicatePredicateParserRuleCall_0_0());
				}
				lv_predicate_0_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredOrObjectRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPredOrObjectAccess().getPredObjPredicateObjectParserRuleCall_1_0());
				}
				lv_predObj_1_0=rulePredicateObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredOrObjectRule());
					}
					set(
						$current,
						"predObj",
						lv_predObj_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.PredicateObject");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExistence
entryRuleExistence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExistenceRule()); }
	iv_ruleExistence=ruleExistence
	{ $current=$iv_ruleExistence.current; }
	EOF;

// Rule Existence
ruleExistence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExistenceAccess().getExistencePrefaceAction_0(),
					$current);
			}
		)
		(
			otherlv_1='there'
			{
				newLeafNode(otherlv_1, grammarAccess.getExistenceAccess().getThereKeyword_1_0());
			}
			    |
			otherlv_2='There'
			{
				newLeafNode(otherlv_2, grammarAccess.getExistenceAccess().getThereKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExistenceAccess().getModifierModifierEnumRuleCall_2_0());
				}
				lv_modifier_3_0=ruleModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistenceRule());
					}
					set(
						$current,
						"modifier",
						lv_modifier_3_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Modifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_4='exist'
			{
				newLeafNode(otherlv_4, grammarAccess.getExistenceAccess().getExistKeyword_3_0());
			}
			    |
			otherlv_5='exists'
			{
				newLeafNode(otherlv_5, grammarAccess.getExistenceAccess().getExistsKeyword_3_1());
			}
		)
	)
;

// Entry rule entryRuleAuxNeg
entryRuleAuxNeg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAuxNegRule()); }
	iv_ruleAuxNeg=ruleAuxNeg
	{ $current=$iv_ruleAuxNeg.current; }
	EOF;

// Rule AuxNeg
ruleAuxNeg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAuxNegAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_0_0_0());
					}
					lv_auxiliarVerb_0_0=ruleAuxiliaryVerb
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAuxNegRule());
						}
						set(
							$current,
							"auxiliarVerb",
							lv_auxiliarVerb_0_0,
							"de.fraunhofer.isst.stars.RequirementDSL.AuxiliaryVerb");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAuxNegAccess().getNegationNegationParserRuleCall_0_1_0());
					}
					lv_negation_1_0=ruleNegation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAuxNegRule());
						}
						set(
							$current,
							"negation",
							lv_negation_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Negation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAuxNegAccess().getAuxiliarVerbNegAuxiliaryVerbNegationParserRuleCall_1_0());
				}
				lv_auxiliarVerbNeg_2_0=ruleAuxiliaryVerbNegation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAuxNegRule());
					}
					set(
						$current,
						"auxiliarVerbNeg",
						lv_auxiliarVerbNeg_2_0,
						"de.fraunhofer.isst.stars.RequirementDSL.AuxiliaryVerbNegation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePreNominative
entryRulePreNominative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreNominativeRule()); }
	iv_rulePreNominative=rulePreNominative
	{ $current=$iv_rulePreNominative.current; }
	EOF;

// Rule PreNominative
rulePreNominative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPreNominativeAccess().getDeterminerQuantificationParserRuleCall_0_0());
				}
				lv_determiner_0_0=ruleQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreNominativeRule());
					}
					set(
						$current,
						"determiner",
						lv_determiner_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Quantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPreNominativeAccess().getArticleArticlesParserRuleCall_1_0());
				}
				lv_article_1_0=ruleArticles
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreNominativeRule());
					}
					set(
						$current,
						"article",
						lv_article_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Articles");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPreNominativeAccess().getArticleRefArticlesParserRuleCall_2_0());
				}
				lv_article_2_0=ruleRefArticles
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreNominativeRule());
					}
					set(
						$current,
						"article",
						lv_article_2_0,
						"de.fraunhofer.isst.stars.RequirementDSL.RefArticles");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAdverbial
entryRuleAdverbial returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdverbialRule()); }
	iv_ruleAdverbial=ruleAdverbial
	{ $current=$iv_ruleAdverbial.current.getText(); }
	EOF;

// Rule Adverbial
ruleAdverbial returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdverbialAccess().getSizeAdverbialParserRuleCall_0());
		}
		this_SizeAdverbial_0=ruleSizeAdverbial
		{
			$current.merge(this_SizeAdverbial_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAdverbialAccess().getPositionAdverbialParserRuleCall_1());
		}
		this_PositionAdverbial_1=rulePositionAdverbial
		{
			$current.merge(this_PositionAdverbial_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAdverbialAccess().getComparisonAdverbialParserRuleCall_2());
		}
		this_ComparisonAdverbial_2=ruleComparisonAdverbial
		{
			$current.merge(this_ComparisonAdverbial_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	iv_ruleRelation=ruleRelation
	{ $current=$iv_ruleRelation.current; }
	EOF;

// Rule Relation
ruleRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getRelposAdvPositionAdverbialParserRuleCall_0_0());
				}
				lv_relposAdv_0_0=rulePositionAdverbial
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"relposAdv",
						lv_relposAdv_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.PositionAdverbial");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getRelDelRelationDelimiterParserRuleCall_1_0());
				}
				lv_relDel_1_0=ruleRelationDelimiter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"relDel",
						lv_relDel_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.RelationDelimiter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getRelCompComperatorsParserRuleCall_2_0());
				}
				lv_relComp_2_0=ruleComperators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"relComp",
						lv_relComp_2_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Comperators");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getRelElementsRelObjectsParserRuleCall_3_0());
				}
				lv_relElements_3_0=ruleRelObjects
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"relElements",
						lv_relElements_3_0,
						"de.fraunhofer.isst.stars.RequirementDSL.RelObjects");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRelObjects
entryRuleRelObjects returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelObjectsRule()); }
	iv_ruleRelObjects=ruleRelObjects
	{ $current=$iv_ruleRelObjects.current; }
	EOF;

// Rule RelObjects
ruleRelObjects returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelObjectsAccess().getObjectObjectParserRuleCall_0_0());
				}
				lv_object_0_0=ruleObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelObjectsRule());
					}
					add(
						$current,
						"object",
						lv_object_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Object");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelObjectsAccess().getPropertyPropertyParserRuleCall_1_0());
				}
				lv_property_1_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelObjectsRule());
					}
					add(
						$current,
						"property",
						lv_property_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRelObjectsAccess().getRelConjRelConjunctionParserRuleCall_2_0_0());
					}
					lv_relConj_2_0=ruleRelConjunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelObjectsRule());
						}
						add(
							$current,
							"relConj",
							lv_relConj_2_0,
							"de.fraunhofer.isst.stars.RequirementDSL.RelConjunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelObjectsAccess().getObjectObjectParserRuleCall_2_1_0());
					}
					lv_object_3_0=ruleObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelObjectsRule());
						}
						add(
							$current,
							"object",
							lv_object_3_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Object");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelObjectsAccess().getPropertyPropertyParserRuleCall_2_2_0());
					}
					lv_property_4_0=ruleProperty
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelObjectsRule());
						}
						add(
							$current,
							"property",
							lv_property_4_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Property");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)*
	)
;

// Entry rule entryRuleConstraints
entryRuleConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintsRule()); }
	iv_ruleConstraints=ruleConstraints
	{ $current=$iv_ruleConstraints.current; }
	EOF;

// Rule Constraints
ruleConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintsAccess().getTimeConstraintTimeConstraintParserRuleCall_0_0());
				}
				lv_timeConstraint_0_0=ruleTimeConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintsRule());
					}
					set(
						$current,
						"timeConstraint",
						lv_timeConstraint_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.TimeConstraint");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintsAccess().getConstraintConstraintParserRuleCall_1_0());
				}
				lv_constraint_1_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintsRule());
					}
					set(
						$current,
						"constraint",
						lv_constraint_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getOrdinatorConstraintOrdinatorsParserRuleCall_0_0());
				}
				lv_ordinator_0_0=ruleConstraintOrdinators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"ordinator",
						lv_ordinator_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.ConstraintOrdinators");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstraintAccess().getConstraintObjectConstraintParserRuleCall_1_0_0());
					}
					lv_constraint_1_0=ruleObjectConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstraintRule());
						}
						set(
							$current,
							"constraint",
							lv_constraint_1_0,
							"de.fraunhofer.isst.stars.RequirementDSL.ObjectConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getConstraintAccess().getConstraintUnitConstraintsParserRuleCall_1_1_0());
					}
					lv_constraint_2_0=ruleUnitConstraints
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstraintRule());
						}
						set(
							$current,
							"constraint",
							lv_constraint_2_0,
							"de.fraunhofer.isst.stars.RequirementDSL.UnitConstraints");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getConstraintAccess().getConstraintSetConstraintParserRuleCall_1_2_0());
					}
					lv_constraint_3_0=ruleSetConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstraintRule());
						}
						set(
							$current,
							"constraint",
							lv_constraint_3_0,
							"de.fraunhofer.isst.stars.RequirementDSL.SetConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleConstraintOrdinators
entryRuleConstraintOrdinators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintOrdinatorsRule()); }
	iv_ruleConstraintOrdinators=ruleConstraintOrdinators
	{ $current=$iv_ruleConstraintOrdinators.current; }
	EOF;

// Rule ConstraintOrdinators
ruleConstraintOrdinators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintOrdinatorsAccess().getStuffingStuffWordParserRuleCall_0_0());
				}
				lv_stuffing_0_0=ruleStuffWord
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintOrdinatorsRule());
					}
					set(
						$current,
						"stuffing",
						lv_stuffing_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.StuffWord");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintOrdinatorsAccess().getAdverbialAdverbialParserRuleCall_1_0());
				}
				lv_adverbial_1_0=ruleAdverbial
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintOrdinatorsRule());
					}
					set(
						$current,
						"adverbial",
						lv_adverbial_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Adverbial");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintOrdinatorsAccess().getComperatorComperatorsParserRuleCall_2_0());
				}
				lv_comperator_2_0=ruleComperators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintOrdinatorsRule());
					}
					set(
						$current,
						"comperator",
						lv_comperator_2_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Comperators");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSetConstraint
entryRuleSetConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetConstraintRule()); }
	iv_ruleSetConstraint=ruleSetConstraint
	{ $current=$iv_ruleSetConstraint.current; }
	EOF;

// Rule SetConstraint
ruleSetConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSetConstraintAccess().getSetObjectSetParserRuleCall_0_0());
				}
				lv_set_0_0=ruleObjectSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetConstraintRule());
					}
					set(
						$current,
						"set",
						lv_set_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.ObjectSet");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSetConstraintAccess().getSetValueSetParserRuleCall_1_0());
				}
				lv_set_1_0=ruleValueSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetConstraintRule());
					}
					set(
						$current,
						"set",
						lv_set_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.ValueSet");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTimeConstraint
entryRuleTimeConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeConstraintRule()); }
	iv_ruleTimeConstraint=ruleTimeConstraint
	{ $current=$iv_ruleTimeConstraint.current; }
	EOF;

// Rule TimeConstraint
ruleTimeConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeConstraintAccess().getOrdinatorConstraintOrdinatorsParserRuleCall_0_0());
				}
				lv_ordinator_0_0=ruleConstraintOrdinators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeConstraintRule());
					}
					set(
						$current,
						"ordinator",
						lv_ordinator_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.ConstraintOrdinators");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_time_1_0=RULE_INT
				{
					newLeafNode(lv_time_1_0, grammarAccess.getTimeConstraintAccess().getTimeINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeConstraintAccess().getUnitTimeUnitsParserRuleCall_2_0());
				}
				lv_unit_2_0=ruleTimeUnits
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeConstraintRule());
					}
					set(
						$current,
						"unit",
						lv_unit_2_0,
						"de.fraunhofer.isst.stars.RequirementDSL.TimeUnits");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleObjectConstraint
entryRuleObjectConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectConstraintRule()); }
	iv_ruleObjectConstraint=ruleObjectConstraint
	{ $current=$iv_ruleObjectConstraint.current; }
	EOF;

// Rule ObjectConstraint
ruleObjectConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getObjectConstraintAccess().getObjectObjectParserRuleCall_0());
			}
			lv_object_0_0=ruleObject
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getObjectConstraintRule());
				}
				set(
					$current,
					"object",
					lv_object_0_0,
					"de.fraunhofer.isst.stars.RequirementDSL.Object");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleUnitConstraints
entryRuleUnitConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitConstraintsRule()); }
	iv_ruleUnitConstraints=ruleUnitConstraints
	{ $current=$iv_ruleUnitConstraints.current; }
	EOF;

// Rule UnitConstraints
ruleUnitConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnitConstraintsAccess().getSingleValueConstraintsParserRuleCall_0());
		}
		this_SingleValueConstraints_0=ruleSingleValueConstraints
		{
			$current = $this_SingleValueConstraints_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitConstraintsAccess().getIntervallConstraintsParserRuleCall_1());
		}
		this_IntervallConstraints_1=ruleIntervallConstraints
		{
			$current = $this_IntervallConstraints_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntervallConstraints
entryRuleIntervallConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntervallConstraintsRule()); }
	iv_ruleIntervallConstraints=ruleIntervallConstraints
	{ $current=$iv_ruleIntervallConstraints.current; }
	EOF;

// Rule IntervallConstraints
ruleIntervallConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getIntervallConstraintsAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntervallConstraintsAccess().getLowerValueParserRuleCall_1_0());
				}
				lv_lower_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntervallConstraintsRule());
					}
					set(
						$current,
						"lower",
						lv_lower_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getIntervallConstraintsAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntervallConstraintsAccess().getHigherValueParserRuleCall_3_0());
				}
				lv_higher_3_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntervallConstraintsRule());
					}
					set(
						$current,
						"higher",
						lv_higher_3_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getIntervallConstraintsAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleSingleValueConstraints
entryRuleSingleValueConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleValueConstraintsRule()); }
	iv_ruleSingleValueConstraints=ruleSingleValueConstraints
	{ $current=$iv_ruleSingleValueConstraints.current; }
	EOF;

// Rule SingleValueConstraints
ruleSingleValueConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSingleValueConstraintsAccess().getValueValueParserRuleCall_0());
			}
			lv_value_0_0=ruleValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSingleValueConstraintsRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"de.fraunhofer.isst.stars.RequirementDSL.Value");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleValueSet
entryRuleValueSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueSetRule()); }
	iv_ruleValueSet=ruleValueSet
	{ $current=$iv_ruleValueSet.current; }
	EOF;

// Rule ValueSet
ruleValueSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getValueSetAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueSetAccess().getElementsValueParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueSetRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getValueSetAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValueSetAccess().getElementsValueParserRuleCall_2_1_0());
					}
					lv_elements_3_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueSetRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getValueSetAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleObjectSet
entryRuleObjectSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectSetRule()); }
	iv_ruleObjectSet=ruleObjectSet
	{ $current=$iv_ruleObjectSet.current; }
	EOF;

// Rule ObjectSet
ruleObjectSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getObjectSetAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectSetAccess().getElementsActorParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectSetRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Actor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getObjectSetAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectSetAccess().getElementsActorParserRuleCall_2_1_0());
					}
					lv_elements_3_0=ruleActor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectSetRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_0,
							"de.fraunhofer.isst.stars.RequirementDSL.Actor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getObjectSetAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getIntValueParserRuleCall_0());
		}
		this_IntValue_0=ruleIntValue
		{
			$current = $this_IntValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getFloatValueParserRuleCall_1());
		}
		this_FloatValue_1=ruleFloatValue
		{
			$current = $this_FloatValue_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	iv_ruleIntValue=ruleIntValue
	{ $current=$iv_ruleIntValue.current; }
	EOF;

// Rule IntValue
ruleIntValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_INT
				{
					newLeafNode(lv_value_0_0, grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIntValueAccess().getUnitUnitParserRuleCall_1_0());
				}
				lv_unit_1_0=ruleUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntValueRule());
					}
					set(
						$current,
						"unit",
						lv_unit_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Unit");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getIntValueAccess().getObjectWORDParserRuleCall_2_0());
				}
				lv_object_2_0=ruleWORD
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntValueRule());
					}
					add(
						$current,
						"object",
						lv_object_2_0,
						"de.fraunhofer.isst.stars.RequirementDSL.WORD");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	iv_ruleFloatValue=ruleFloatValue
	{ $current=$iv_ruleFloatValue.current; }
	EOF;

// Rule FloatValue
ruleFloatValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatValueAccess().getValueFLOATParserRuleCall_0_0());
				}
				lv_value_0_0=ruleFLOAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatValueRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"de.fraunhofer.isst.stars.RequirementDSL.FLOAT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatValueAccess().getUnitUnitParserRuleCall_1_0());
				}
				lv_unit_1_0=ruleUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatValueRule());
					}
					set(
						$current,
						"unit",
						lv_unit_1_0,
						"de.fraunhofer.isst.stars.RequirementDSL.Unit");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFloatValueAccess().getObjectWORDParserRuleCall_2_0());
				}
				lv_object_2_0=ruleWORD
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFloatValueRule());
					}
					add(
						$current,
						"object",
						lv_object_2_0,
						"de.fraunhofer.isst.stars.RequirementDSL.WORD");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleReqID
entryRuleReqID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReqIDRule()); }
	iv_ruleReqID=ruleReqID
	{ $current=$iv_ruleReqID.current.getText(); }
	EOF;

// Rule ReqID
ruleReqID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getReqIDAccess().getIDTerminalRuleCall_0_0());
			}
			    |
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getReqIDAccess().getINTTerminalRuleCall_0_1());
			}
		)
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getReqIDAccess().getFullStopKeyword_1_0());
			}
			    |
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getReqIDAccess().getINTTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleWORD
entryRuleWORD returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWORDRule()); }
	iv_ruleWORD=ruleWORD
	{ $current=$iv_ruleWORD.current.getText(); }
	EOF;

// Rule WORD
ruleWORD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getWORDAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getWORDAccess().getHyphenMinusKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getWORDAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleRelationDelimiter
entryRuleRelationDelimiter returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelationDelimiterRule()); }
	iv_ruleRelationDelimiter=ruleRelationDelimiter
	{ $current=$iv_ruleRelationDelimiter.current.getText(); }
	EOF;

// Rule RelationDelimiter
ruleRelationDelimiter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='relation'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRelationDelimiterAccess().getRelationKeyword());
	}
;

// Entry rule entryRuleAuxiliaryVerb
entryRuleAuxiliaryVerb returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAuxiliaryVerbRule()); }
	iv_ruleAuxiliaryVerb=ruleAuxiliaryVerb
	{ $current=$iv_ruleAuxiliaryVerb.current.getText(); }
	EOF;

// Rule AuxiliaryVerb
ruleAuxiliaryVerb returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='is'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbAccess().getIsKeyword_0());
		}
		    |
		kw='are'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbAccess().getAreKeyword_1());
		}
		    |
		kw='be'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbAccess().getBeKeyword_2());
		}
		    |
		kw='been'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbAccess().getBeenKeyword_3());
		}
		    |
		kw='has'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbAccess().getHasKeyword_4());
		}
		    |
		kw='have'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbAccess().getHaveKeyword_5());
		}
		    |
		kw='do'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbAccess().getDoKeyword_6());
		}
		    |
		kw='does'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbAccess().getDoesKeyword_7());
		}
	)
;

// Entry rule entryRuleConjunction
entryRuleConjunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); }
	iv_ruleConjunction=ruleConjunction
	{ $current=$iv_ruleConjunction.current.getText(); }
	EOF;

// Rule Conjunction
ruleConjunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConjunctionAccess().getAndKeyword_0());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConjunctionAccess().getOrKeyword_1());
		}
	)
;

// Entry rule entryRuleRelConjunction
entryRuleRelConjunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelConjunctionRule()); }
	iv_ruleRelConjunction=ruleRelConjunction
	{ $current=$iv_ruleRelConjunction.current.getText(); }
	EOF;

// Rule RelConjunction
ruleRelConjunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='and_to'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelConjunctionAccess().getAnd_toKeyword_0());
		}
		    |
		kw='or_to'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelConjunctionAccess().getOr_toKeyword_1());
		}
	)
;

// Entry rule entryRuleComperators
entryRuleComperators returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComperatorsRule()); }
	iv_ruleComperators=ruleComperators
	{ $current=$iv_ruleComperators.current.getText(); }
	EOF;

// Rule Comperators
ruleComperators returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='than'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComperatorsAccess().getThanKeyword_0());
		}
		    |
		kw='as'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComperatorsAccess().getAsKeyword_1());
		}
		    |
		kw='to'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComperatorsAccess().getToKeyword_2());
		}
		    |
		kw='of'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComperatorsAccess().getOfKeyword_3());
		}
	)
;

// Entry rule entryRuleSizeAdverbial
entryRuleSizeAdverbial returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSizeAdverbialRule()); }
	iv_ruleSizeAdverbial=ruleSizeAdverbial
	{ $current=$iv_ruleSizeAdverbial.current.getText(); }
	EOF;

// Rule SizeAdverbial
ruleSizeAdverbial returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='higher'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSizeAdverbialAccess().getHigherKeyword_0());
		}
		    |
		kw='less'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSizeAdverbialAccess().getLessKeyword_1());
		}
		    |
		kw='more'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSizeAdverbialAccess().getMoreKeyword_2());
		}
		    |
		kw='larger'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSizeAdverbialAccess().getLargerKeyword_3());
		}
		    |
		kw='smaller'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSizeAdverbialAccess().getSmallerKeyword_4());
		}
		    |
		kw='as_long_as'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSizeAdverbialAccess().getAs_long_asKeyword_5());
		}
	)
;

// Entry rule entryRulePositionAdverbial
entryRulePositionAdverbial returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPositionAdverbialRule()); }
	iv_rulePositionAdverbial=rulePositionAdverbial
	{ $current=$iv_rulePositionAdverbial.current.getText(); }
	EOF;

// Rule PositionAdverbial
rulePositionAdverbial returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='between'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getBetweenKeyword_0());
		}
		    |
		kw='next'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getNextKeyword_1());
		}
		    |
		kw='on'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getOnKeyword_2());
		}
		    |
		kw='above'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getAboveKeyword_3());
		}
		    |
		kw='below'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getBelowKeyword_4());
		}
		    |
		kw='in'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getInKeyword_5());
		}
		    |
		kw='within'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getWithinKeyword_6());
		}
		    |
		kw='in_front_of'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getIn_front_ofKeyword_7());
		}
		    |
		kw='behind'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getBehindKeyword_8());
		}
		    |
		kw='out'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getOutKeyword_9());
		}
		    |
		kw='under'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPositionAdverbialAccess().getUnderKeyword_10());
		}
	)
;

// Entry rule entryRuleComparisonAdverbial
entryRuleComparisonAdverbial returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComparisonAdverbialRule()); }
	iv_ruleComparisonAdverbial=ruleComparisonAdverbial
	{ $current=$iv_ruleComparisonAdverbial.current.getText(); }
	EOF;

// Rule ComparisonAdverbial
ruleComparisonAdverbial returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='equal'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonAdverbialAccess().getEqualKeyword_0());
		}
		    |
		kw='faster'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonAdverbialAccess().getFasterKeyword_1());
		}
		    |
		kw='slower'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonAdverbialAccess().getSlowerKeyword_2());
		}
		    |
		kw='better'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonAdverbialAccess().getBetterKeyword_3());
		}
		    |
		kw='by'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonAdverbialAccess().getByKeyword_4());
		}
		    |
		kw='to'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonAdverbialAccess().getToKeyword_5());
		}
	)
;

// Entry rule entryRuleQuantification
entryRuleQuantification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQuantificationRule()); }
	iv_ruleQuantification=ruleQuantification
	{ $current=$iv_ruleQuantification.current.getText(); }
	EOF;

// Rule Quantification
ruleQuantification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='all'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getAllKeyword_0());
		}
		    |
		kw='every'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getEveryKeyword_1());
		}
		    |
		kw='each'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getEachKeyword_2());
		}
		    |
		kw='whole'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getWholeKeyword_3());
		}
		    |
		kw='any'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getAnyKeyword_4());
		}
		    |
		kw='several'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getSeveralKeyword_5());
		}
		    |
		kw='either'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getEitherKeyword_6());
		}
		    |
		kw='All'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getAllKeyword_7());
		}
		    |
		kw='Every'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getEveryKeyword_8());
		}
		    |
		kw='Each'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getEachKeyword_9());
		}
		    |
		kw='Whole'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getWholeKeyword_10());
		}
		    |
		kw='Any'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getAnyKeyword_11());
		}
		    |
		kw='Several'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getSeveralKeyword_12());
		}
		    |
		kw='Either'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuantificationAccess().getEitherKeyword_13());
		}
	)
;

// Entry rule entryRuleNegation
entryRuleNegation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	iv_ruleNegation=ruleNegation
	{ $current=$iv_ruleNegation.current.getText(); }
	EOF;

// Rule Negation
ruleNegation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='not'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNegationAccess().getNotKeyword());
	}
;

// Entry rule entryRuleAuxiliaryVerbNegation
entryRuleAuxiliaryVerbNegation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAuxiliaryVerbNegationRule()); }
	iv_ruleAuxiliaryVerbNegation=ruleAuxiliaryVerbNegation
	{ $current=$iv_ruleAuxiliaryVerbNegation.current.getText(); }
	EOF;

// Rule AuxiliaryVerbNegation
ruleAuxiliaryVerbNegation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='doesn\u00B4t'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbNegationAccess().getDoesnTKeyword_0());
		}
		    |
		kw='don\u00B4t'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbNegationAccess().getDonTKeyword_1());
		}
		    |
		kw='isn\u00B4t'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbNegationAccess().getIsnTKeyword_2());
		}
		    |
		kw='aren\u00B4t'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAuxiliaryVerbNegationAccess().getArenTKeyword_3());
		}
	)
;

// Entry rule entryRuleArticles
entryRuleArticles returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArticlesRule()); }
	iv_ruleArticles=ruleArticles
	{ $current=$iv_ruleArticles.current.getText(); }
	EOF;

// Rule Articles
ruleArticles returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='the'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArticlesAccess().getTheKeyword_0());
		}
		    |
		kw='a'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArticlesAccess().getAKeyword_1());
		}
		    |
		kw='an'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArticlesAccess().getAnKeyword_2());
		}
		    |
		kw='The'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArticlesAccess().getTheKeyword_3());
		}
		    |
		kw='A'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArticlesAccess().getAKeyword_4());
		}
		    |
		kw='An'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArticlesAccess().getAnKeyword_5());
		}
	)
;

// Entry rule entryRuleRefArticles
entryRuleRefArticles returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRefArticlesRule()); }
	iv_ruleRefArticles=ruleRefArticles
	{ $current=$iv_ruleRefArticles.current.getText(); }
	EOF;

// Rule RefArticles
ruleRefArticles returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='that'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRefArticlesAccess().getThatKeyword_0());
		}
		    |
		kw='this'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRefArticlesAccess().getThisKeyword_1());
		}
		    |
		kw='That'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRefArticlesAccess().getThatKeyword_2());
		}
		    |
		kw='This'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRefArticlesAccess().getThisKeyword_3());
		}
	)
;

// Entry rule entryRuleStuffWord
entryRuleStuffWord returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStuffWordRule()); }
	iv_ruleStuffWord=ruleStuffWord
	{ $current=$iv_ruleStuffWord.current.getText(); }
	EOF;

// Rule StuffWord
ruleStuffWord returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='with'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getStuffWordAccess().getWithKeyword());
	}
;

// Entry rule entryRuleRelativePronounsSubject
entryRuleRelativePronounsSubject returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelativePronounsSubjectRule()); }
	iv_ruleRelativePronounsSubject=ruleRelativePronounsSubject
	{ $current=$iv_ruleRelativePronounsSubject.current.getText(); }
	EOF;

// Rule RelativePronounsSubject
ruleRelativePronounsSubject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='which'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelativePronounsSubjectAccess().getWhichKeyword_0());
		}
		    |
		kw='who'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelativePronounsSubjectAccess().getWhoKeyword_1());
		}
		    |
		kw='that'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelativePronounsSubjectAccess().getThatKeyword_2());
		}
	)
;

// Entry rule entryRuleRelativePronounsObject
entryRuleRelativePronounsObject returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelativePronounsObjectRule()); }
	iv_ruleRelativePronounsObject=ruleRelativePronounsObject
	{ $current=$iv_ruleRelativePronounsObject.current.getText(); }
	EOF;

// Rule RelativePronounsObject
ruleRelativePronounsObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='whose'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelativePronounsObjectAccess().getWhoseKeyword_0());
		}
		    |
		kw='whom'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelativePronounsObjectAccess().getWhomKeyword_1());
		}
	)
;

// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFLOATRule()); }
	iv_ruleFLOAT=ruleFLOAT
	{ $current=$iv_ruleFLOAT.current.getText(); }
	EOF;

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFLOATAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleUnit
entryRuleUnit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnitRule()); }
	iv_ruleUnit=ruleUnit
	{ $current=$iv_ruleUnit.current.getText(); }
	EOF;

// Rule Unit
ruleUnit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnitAccess().getLengthUnitsParserRuleCall_0());
		}
		this_LengthUnits_0=ruleLengthUnits
		{
			$current.merge(this_LengthUnits_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getPresureUnitsParserRuleCall_1());
		}
		this_PresureUnits_1=rulePresureUnits
		{
			$current.merge(this_PresureUnits_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getHeatUnitsParserRuleCall_2());
		}
		this_HeatUnits_2=ruleHeatUnits
		{
			$current.merge(this_HeatUnits_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getMassUnitsParserRuleCall_3());
		}
		this_MassUnits_3=ruleMassUnits
		{
			$current.merge(this_MassUnits_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getVelcoityUnitsParserRuleCall_4());
		}
		this_VelcoityUnits_4=ruleVelcoityUnits
		{
			$current.merge(this_VelcoityUnits_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getCuvatureParserRuleCall_5());
		}
		this_Cuvature_5=ruleCuvature
		{
			$current.merge(this_Cuvature_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCuvature
entryRuleCuvature returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCuvatureRule()); }
	iv_ruleCuvature=ruleCuvature
	{ $current=$iv_ruleCuvature.current.getText(); }
	EOF;

// Rule Cuvature
ruleCuvature returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='rad/m'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCuvatureAccess().getRadMKeyword_0());
		}
		    |
		kw='\u00B0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCuvatureAccess().getDegreeSignKeyword_1());
		}
		    |
		kw='rad'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCuvatureAccess().getRadKeyword_2());
		}
		    |
		kw='\u00B0/m'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCuvatureAccess().getMKeyword_3());
		}
	)
;

// Entry rule entryRuleVelcoityUnits
entryRuleVelcoityUnits returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVelcoityUnitsRule()); }
	iv_ruleVelcoityUnits=ruleVelcoityUnits
	{ $current=$iv_ruleVelcoityUnits.current.getText(); }
	EOF;

// Rule VelcoityUnits
ruleVelcoityUnits returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='m/s'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVelcoityUnitsAccess().getMSKeyword_0());
		}
		    |
		kw='knots'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVelcoityUnitsAccess().getKnotsKeyword_1());
		}
		    |
		kw='km/h'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVelcoityUnitsAccess().getKmHKeyword_2());
		}
		    |
		kw='m/min'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVelcoityUnitsAccess().getMMinKeyword_3());
		}
	)
;

// Entry rule entryRuleMassUnits
entryRuleMassUnits returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMassUnitsRule()); }
	iv_ruleMassUnits=ruleMassUnits
	{ $current=$iv_ruleMassUnits.current.getText(); }
	EOF;

// Rule MassUnits
ruleMassUnits returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='kg'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMassUnitsAccess().getKgKeyword_0());
		}
		    |
		kw='g'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMassUnitsAccess().getGKeyword_1());
		}
		    |
		kw='mg'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMassUnitsAccess().getMgKeyword_2());
		}
		    |
		kw='t'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMassUnitsAccess().getTKeyword_3());
		}
	)
;

// Entry rule entryRuleHeatUnits
entryRuleHeatUnits returns [String current=null]:
	{ newCompositeNode(grammarAccess.getHeatUnitsRule()); }
	iv_ruleHeatUnits=ruleHeatUnits
	{ $current=$iv_ruleHeatUnits.current.getText(); }
	EOF;

// Rule HeatUnits
ruleHeatUnits returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='C'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHeatUnitsAccess().getCKeyword_0());
		}
		    |
		kw='F'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHeatUnitsAccess().getFKeyword_1());
		}
	)
;

// Entry rule entryRulePresureUnits
entryRulePresureUnits returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPresureUnitsRule()); }
	iv_rulePresureUnits=rulePresureUnits
	{ $current=$iv_rulePresureUnits.current.getText(); }
	EOF;

// Rule PresureUnits
rulePresureUnits returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='bar'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPresureUnitsAccess().getBarKeyword_0());
		}
		    |
		kw='Pa'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPresureUnitsAccess().getPaKeyword_1());
		}
		    |
		kw='hPa'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPresureUnitsAccess().getHPaKeyword_2());
		}
	)
;

// Entry rule entryRuleLengthUnits
entryRuleLengthUnits returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLengthUnitsRule()); }
	iv_ruleLengthUnits=ruleLengthUnits
	{ $current=$iv_ruleLengthUnits.current.getText(); }
	EOF;

// Rule LengthUnits
ruleLengthUnits returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='m'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLengthUnitsAccess().getMKeyword_0());
		}
		    |
		kw='f'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLengthUnitsAccess().getFKeyword_1());
		}
		    |
		kw='km'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLengthUnitsAccess().getKmKeyword_2());
		}
		    |
		kw='cm'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLengthUnitsAccess().getCmKeyword_3());
		}
		    |
		kw='mm'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLengthUnitsAccess().getMmKeyword_4());
		}
		    |
		kw='nm'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLengthUnitsAccess().getNmKeyword_5());
		}
	)
;

// Entry rule entryRuleTimeUnits
entryRuleTimeUnits returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTimeUnitsRule()); }
	iv_ruleTimeUnits=ruleTimeUnits
	{ $current=$iv_ruleTimeUnits.current.getText(); }
	EOF;

// Rule TimeUnits
ruleTimeUnits returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='ns'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getNsKeyword_0());
		}
		    |
		kw='ms'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getMsKeyword_1());
		}
		    |
		kw='s'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getSKeyword_2());
		}
		    |
		kw='sec'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getSecKeyword_3());
		}
		    |
		kw='second'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getSecondKeyword_4());
		}
		    |
		kw='seconds'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getSecondsKeyword_5());
		}
		    |
		kw='minute'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getMinuteKeyword_6());
		}
		    |
		kw='minutes'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getMinutesKeyword_7());
		}
		    |
		kw='min'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getMinKeyword_8());
		}
		    |
		kw='hour'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getHourKeyword_9());
		}
		    |
		kw='hours'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getHoursKeyword_10());
		}
		    |
		kw='h'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getHKeyword_11());
		}
		    |
		kw='day'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getDayKeyword_12());
		}
		    |
		kw='days'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getDaysKeyword_13());
		}
		    |
		kw='d'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getDKeyword_14());
		}
		    |
		kw='month'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getMonthKeyword_15());
		}
		    |
		kw='months'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getMonthsKeyword_16());
		}
		    |
		kw='mon'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getMonKeyword_17());
		}
		    |
		kw='year'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getYearKeyword_18());
		}
		    |
		kw='years'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getYearsKeyword_19());
		}
		    |
		kw='y'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitsAccess().getYKeyword_20());
		}
	)
;

// Rule Modality
ruleModality returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='shall'
			{
				$current = grammarAccess.getModalityAccess().getSHALLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getModalityAccess().getSHALLEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='should'
			{
				$current = grammarAccess.getModalityAccess().getSHOULDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getModalityAccess().getSHOULDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='will'
			{
				$current = grammarAccess.getModalityAccess().getWILLEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getModalityAccess().getWILLEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='would'
			{
				$current = grammarAccess.getModalityAccess().getWOULDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getModalityAccess().getWOULDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='can'
			{
				$current = grammarAccess.getModalityAccess().getCANEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getModalityAccess().getCANEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='could'
			{
				$current = grammarAccess.getModalityAccess().getCOULDEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getModalityAccess().getCOULDEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='must'
			{
				$current = grammarAccess.getModalityAccess().getMUSTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getModalityAccess().getMUSTEnumLiteralDeclaration_6());
			}
		)
	)
;

// Rule Modifier
ruleModifier returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Globally'
			{
				$current = grammarAccess.getModifierAccess().getGLOBALLYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getModifierAccess().getGLOBALLYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='globally'
			{
				$current = grammarAccess.getModifierAccess().getGLOBALLY_LEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getModifierAccess().getGLOBALLY_LEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Always'
			{
				$current = grammarAccess.getModifierAccess().getALWAYSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getModifierAccess().getALWAYSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='always'
			{
				$current = grammarAccess.getModifierAccess().getALWAYS_LEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getModifierAccess().getALWAYS_LEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Sometimes'
			{
				$current = grammarAccess.getModifierAccess().getSOMETIMESEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getModifierAccess().getSOMETIMESEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='sometimes'
			{
				$current = grammarAccess.getModifierAccess().getSOMETIMES_LEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getModifierAccess().getSOMETIMES_LEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Eventually'
			{
				$current = grammarAccess.getModifierAccess().getEVENTUALLYEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getModifierAccess().getEVENTUALLYEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='eventually'
			{
				$current = grammarAccess.getModifierAccess().getEVENTUALLY_LEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getModifierAccess().getEVENTUALLY_LEnumLiteralDeclaration_7());
			}
		)
	)
;

// Rule ClauseOrdinator
ruleClauseOrdinator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='if'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getIF_LEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getClauseOrdinatorAccess().getIF_LEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='after'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getAFTER_LEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getClauseOrdinatorAccess().getAFTER_LEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='once'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getONCE_LEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getClauseOrdinatorAccess().getONCE_LEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='when'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getWHEN_LEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getClauseOrdinatorAccess().getWHEN_LEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='whenever'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getWHENEVER_LEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getClauseOrdinatorAccess().getWHENEVER_LEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='while'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getWHILE_LEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getClauseOrdinatorAccess().getWHILE_LEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='before'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getBEFORE_LEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getClauseOrdinatorAccess().getBEFORE_LEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='until'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getUNTIL_LEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getClauseOrdinatorAccess().getUNTIL_LEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='If'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getIFEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getClauseOrdinatorAccess().getIFEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='After'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getAFTEREnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getClauseOrdinatorAccess().getAFTEREnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='Once'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getONCEEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getClauseOrdinatorAccess().getONCEEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='When'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getWHENEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getClauseOrdinatorAccess().getWHENEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='Whenever'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getWHENEVEREnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getClauseOrdinatorAccess().getWHENEVEREnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='While'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getWHILEEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getClauseOrdinatorAccess().getWHILEEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='Before'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getBEFOREEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getClauseOrdinatorAccess().getBEFOREEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='Until'
			{
				$current = grammarAccess.getClauseOrdinatorAccess().getUNTILEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getClauseOrdinatorAccess().getUNTILEnumLiteralDeclaration_15());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_WS_HYPHEN : ' - ';

RULE_WS : (' '|'\t'|'\r')+;

RULE_PROPERTY_TERM : '\u00B4s';

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;

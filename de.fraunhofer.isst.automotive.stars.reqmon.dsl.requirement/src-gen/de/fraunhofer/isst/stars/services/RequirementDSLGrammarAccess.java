/*
 * generated by Xtext 2.16.0
 */
package de.fraunhofer.isst.stars.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RequirementDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Model");
		private final Assignment cRequirementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRequirementsRequirementParserRuleCall_0 = (RuleCall)cRequirementsAssignment.eContents().get(0);
		
		///* =========== Model =========== */ Model:
		//	requirements+=Requirement*;
		@Override public ParserRule getRule() { return rule; }
		
		//requirements+=Requirement*
		public Assignment getRequirementsAssignment() { return cRequirementsAssignment; }
		
		//Requirement
		public RuleCall getRequirementsRequirementParserRuleCall_0() { return cRequirementsRequirementParserRuleCall_0; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReqIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReqIDReqIDParserRuleCall_1_0 = (RuleCall)cReqIDAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextRequirementTextParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cLineFeedKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cEOFKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		////Requirement:
		////	(condClauses+=Subclause)* (mainclauses+=Clauses) (condClauses+=Subclause)*
		////	;
		//Requirement: //PROBLEM condClauses before and after mainClause lead to ambiguity
		//	'Req'? reqID=ReqID? ':' text=RequirementText ('.' | ';') ('\n'+ | 'EOF');
		@Override public ParserRule getRule() { return rule; }
		
		////PROBLEM condClauses before and after mainClause lead to ambiguity
		//'Req'? reqID=ReqID? ':' text=RequirementText ('.' | ';') ('\n'+ | 'EOF')
		public Group getGroup() { return cGroup; }
		
		////PROBLEM condClauses before and after mainClause lead to ambiguity
		//'Req'?
		public Keyword getReqKeyword_0() { return cReqKeyword_0; }
		
		//reqID=ReqID?
		public Assignment getReqIDAssignment_1() { return cReqIDAssignment_1; }
		
		//ReqID
		public RuleCall getReqIDReqIDParserRuleCall_1_0() { return cReqIDReqIDParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//text=RequirementText
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }
		
		//RequirementText
		public RuleCall getTextRequirementTextParserRuleCall_3_0() { return cTextRequirementTextParserRuleCall_3_0; }
		
		//'.' | ';'
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'.'
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'\n'+ | 'EOF'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'\n'+
		public Keyword getLineFeedKeyword_5_0() { return cLineFeedKeyword_5_0; }
		
		//'EOF'
		public Keyword getEOFKeyword_5_1() { return cEOFKeyword_5_1; }
	}
	public class RequirementTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.RequirementText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cCondClausesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCondClausesConditionalClauseParserRuleCall_0_0_0 = (RuleCall)cCondClausesAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cThenKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cMainclausesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainclausesMainClauseParserRuleCall_1_0 = (RuleCall)cMainclausesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCondClausesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCondClausesConditionalClauseParserRuleCall_2_1_0 = (RuleCall)cCondClausesAssignment_2_1.eContents().get(0);
		
		//RequirementText:
		//	(condClauses+=ConditionalClause ','? 'then')? mainclauses=MainClause (','? condClauses+=ConditionalClause)?
		//	//If mainclause is the second part then 'then' has to be added. IF maincluase is first part then 'then' is not necessary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(condClauses+=ConditionalClause ','? 'then')? mainclauses=MainClause (','? condClauses+=ConditionalClause)?
		public Group getGroup() { return cGroup; }
		
		//(condClauses+=ConditionalClause ','? 'then')?
		public Group getGroup_0() { return cGroup_0; }
		
		//condClauses+=ConditionalClause
		public Assignment getCondClausesAssignment_0_0() { return cCondClausesAssignment_0_0; }
		
		//ConditionalClause
		public RuleCall getCondClausesConditionalClauseParserRuleCall_0_0_0() { return cCondClausesConditionalClauseParserRuleCall_0_0_0; }
		
		//','?
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//'then'
		public Keyword getThenKeyword_0_2() { return cThenKeyword_0_2; }
		
		//mainclauses=MainClause
		public Assignment getMainclausesAssignment_1() { return cMainclausesAssignment_1; }
		
		//MainClause
		public RuleCall getMainclausesMainClauseParserRuleCall_1_0() { return cMainclausesMainClauseParserRuleCall_1_0; }
		
		//(','? condClauses+=ConditionalClause)?
		public Group getGroup_2() { return cGroup_2; }
		
		//','?
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//condClauses+=ConditionalClause
		public Assignment getCondClausesAssignment_2_1() { return cCondClausesAssignment_2_1; }
		
		//ConditionalClause
		public RuleCall getCondClausesConditionalClauseParserRuleCall_2_1_0() { return cCondClausesConditionalClauseParserRuleCall_2_1_0; }
	}
	public class ConditionalClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ConditionalClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrdinatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrdinatorClauseOrdinatorEnumRuleCall_0_0 = (RuleCall)cOrdinatorAssignment_0.eContents().get(0);
		private final Assignment cClausesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClausesClausesParserRuleCall_1_0 = (RuleCall)cClausesAssignment_1.eContents().get(0);
		
		///* =========== Clauses =========== */ ConditionalClause:
		//	ordinator=ClauseOrdinator clauses=Clauses;
		@Override public ParserRule getRule() { return rule; }
		
		//ordinator=ClauseOrdinator clauses=Clauses
		public Group getGroup() { return cGroup; }
		
		//ordinator=ClauseOrdinator
		public Assignment getOrdinatorAssignment_0() { return cOrdinatorAssignment_0; }
		
		//ClauseOrdinator
		public RuleCall getOrdinatorClauseOrdinatorEnumRuleCall_0_0() { return cOrdinatorClauseOrdinatorEnumRuleCall_0_0; }
		
		//clauses=Clauses
		public Assignment getClausesAssignment_1() { return cClausesAssignment_1; }
		
		//Clauses
		public RuleCall getClausesClausesParserRuleCall_1_0() { return cClausesClausesParserRuleCall_1_0; }
	}
	public class MainClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.MainClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierEnumRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cClausesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClausesClausesParserRuleCall_1_0 = (RuleCall)cClausesAssignment_1.eContents().get(0);
		
		//MainClause:
		//	modifier=Modifier? clauses+=Clauses //(conjunction+=Conjunction clauses+=MainClause)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//modifier=Modifier? clauses+=Clauses
		public Group getGroup() { return cGroup; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//Modifier
		public RuleCall getModifierModifierEnumRuleCall_0_0() { return cModifierModifierEnumRuleCall_0_0; }
		
		//clauses+=Clauses
		public Assignment getClausesAssignment_1() { return cClausesAssignment_1; }
		
		//Clauses
		public RuleCall getClausesClausesParserRuleCall_1_0() { return cClausesClausesParserRuleCall_1_0; }
	}
	public class ClausesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Clauses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClausesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClausesClauseParserRuleCall_0_0 = (RuleCall)cClausesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cConjunctionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConjunctionConjunctionParserRuleCall_1_0_0 = (RuleCall)cConjunctionAssignment_1_0.eContents().get(0);
		private final Assignment cClausesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClausesClauseParserRuleCall_1_1_0 = (RuleCall)cClausesAssignment_1_1.eContents().get(0);
		
		//Clauses:
		//	clauses+=Clause (conjunction+=Conjunction clauses+=Clause)*;
		@Override public ParserRule getRule() { return rule; }
		
		//clauses+=Clause (conjunction+=Conjunction clauses+=Clause)*
		public Group getGroup() { return cGroup; }
		
		//clauses+=Clause
		public Assignment getClausesAssignment_0() { return cClausesAssignment_0; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_0_0() { return cClausesClauseParserRuleCall_0_0; }
		
		//(conjunction+=Conjunction clauses+=Clause)*
		public Group getGroup_1() { return cGroup_1; }
		
		//conjunction+=Conjunction
		public Assignment getConjunctionAssignment_1_0() { return cConjunctionAssignment_1_0; }
		
		//Conjunction
		public RuleCall getConjunctionConjunctionParserRuleCall_1_0_0() { return cConjunctionConjunctionParserRuleCall_1_0_0; }
		
		//clauses+=Clause
		public Assignment getClausesAssignment_1_1() { return cClausesAssignment_1_1; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_1_1_0() { return cClausesClauseParserRuleCall_1_1_0; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModalitySentenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPredicateSentenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExistenceSentenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertySentenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Clause:
		//	ModalitySentence | PredicateSentence | ExistenceSentence | PropertySentence;
		@Override public ParserRule getRule() { return rule; }
		
		//ModalitySentence | PredicateSentence | ExistenceSentence | PropertySentence
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ModalitySentence
		public RuleCall getModalitySentenceParserRuleCall_0() { return cModalitySentenceParserRuleCall_0; }
		
		//PredicateSentence
		public RuleCall getPredicateSentenceParserRuleCall_1() { return cPredicateSentenceParserRuleCall_1; }
		
		//ExistenceSentence
		public RuleCall getExistenceSentenceParserRuleCall_2() { return cExistenceSentenceParserRuleCall_2; }
		
		//PropertySentence
		public RuleCall getPropertySentenceParserRuleCall_3() { return cPropertySentenceParserRuleCall_3; }
	}
	public class ModalitySentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ModalitySentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBeginAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBeginSentenceBeginParserRuleCall_0_0 = (RuleCall)cBeginAssignment_0.eContents().get(0);
		private final Assignment cActorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActorsActorsParserRuleCall_1_0 = (RuleCall)cActorsAssignment_1.eContents().get(0);
		private final Assignment cModelityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelityModalityEnumRuleCall_2_0 = (RuleCall)cModelityAssignment_2.eContents().get(0);
		private final Assignment cNegationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNegationNegationParserRuleCall_3_0 = (RuleCall)cNegationAssignment_3.eContents().get(0);
		private final Assignment cAuxiliarVerbAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAuxiliarVerbAuxiliaryVerbParserRuleCall_4_0 = (RuleCall)cAuxiliarVerbAssignment_4.eContents().get(0);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicatePredicateParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		private final Assignment cEndingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndingSentenceEndingParserRuleCall_6_0 = (RuleCall)cEndingAssignment_6.eContents().get(0);
		
		//ModalitySentence:
		//	begin=SentenceBegin? actors=Actors modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb?
		//	predicate=Predicate ending=SentenceEnding?
		//	//actors=Actors modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb? predicate=Predicate  constraints+=Constraints* 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//begin=SentenceBegin? actors=Actors modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb? predicate=Predicate
		//ending=SentenceEnding?
		public Group getGroup() { return cGroup; }
		
		//begin=SentenceBegin?
		public Assignment getBeginAssignment_0() { return cBeginAssignment_0; }
		
		//SentenceBegin
		public RuleCall getBeginSentenceBeginParserRuleCall_0_0() { return cBeginSentenceBeginParserRuleCall_0_0; }
		
		//actors=Actors
		public Assignment getActorsAssignment_1() { return cActorsAssignment_1; }
		
		//Actors
		public RuleCall getActorsActorsParserRuleCall_1_0() { return cActorsActorsParserRuleCall_1_0; }
		
		//modelity=Modality
		public Assignment getModelityAssignment_2() { return cModelityAssignment_2; }
		
		//Modality
		public RuleCall getModelityModalityEnumRuleCall_2_0() { return cModelityModalityEnumRuleCall_2_0; }
		
		//negation?=Negation?
		public Assignment getNegationAssignment_3() { return cNegationAssignment_3; }
		
		//Negation
		public RuleCall getNegationNegationParserRuleCall_3_0() { return cNegationNegationParserRuleCall_3_0; }
		
		//auxiliarVerb=AuxiliaryVerb?
		public Assignment getAuxiliarVerbAssignment_4() { return cAuxiliarVerbAssignment_4; }
		
		//AuxiliaryVerb
		public RuleCall getAuxiliarVerbAuxiliaryVerbParserRuleCall_4_0() { return cAuxiliarVerbAuxiliaryVerbParserRuleCall_4_0; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_5_0() { return cPredicatePredicateParserRuleCall_5_0; }
		
		//ending=SentenceEnding?
		public Assignment getEndingAssignment_6() { return cEndingAssignment_6; }
		
		//SentenceEnding
		public RuleCall getEndingSentenceEndingParserRuleCall_6_0() { return cEndingSentenceEndingParserRuleCall_6_0; }
	}
	public class PredicateSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.PredicateSentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBeginAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cBeginSentenceBeginParserRuleCall_0_0_0 = (RuleCall)cBeginAssignment_0_0.eContents().get(0);
		private final Assignment cActorsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cActorsActorsParserRuleCall_0_1_0 = (RuleCall)cActorsAssignment_0_1.eContents().get(0);
		private final Assignment cAuxNegAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAuxNegAuxNegParserRuleCall_0_2_0 = (RuleCall)cAuxNegAssignment_0_2.eContents().get(0);
		private final Assignment cAuxiliarVerbAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cAuxiliarVerbAuxiliaryVerbParserRuleCall_0_3_0 = (RuleCall)cAuxiliarVerbAssignment_0_3.eContents().get(0);
		private final Assignment cPredsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cPredsPredsParserRuleCall_0_4_0 = (RuleCall)cPredsAssignment_0_4.eContents().get(0);
		private final Assignment cEndingAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cEndingSentenceEndingParserRuleCall_0_5_0 = (RuleCall)cEndingAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBeginAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBeginSentenceBeginParserRuleCall_1_0_0 = (RuleCall)cBeginAssignment_1_0.eContents().get(0);
		private final Assignment cActorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActorsActorsParserRuleCall_1_1_0 = (RuleCall)cActorsAssignment_1_1.eContents().get(0);
		private final Assignment cPredsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPredsPredsParserRuleCall_1_2_0 = (RuleCall)cPredsAssignment_1_2.eContents().get(0);
		private final Assignment cEndingAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEndingSentenceEndingParserRuleCall_1_3_0 = (RuleCall)cEndingAssignment_1_3.eContents().get(0);
		
		//PredicateSentence:
		//	begin=SentenceBegin? actors=Actors auxNeg+=AuxNeg auxiliarVerb+=AuxiliaryVerb? preds=Preds? ending=SentenceEnding? |
		//	begin=SentenceBegin? actors=Actors preds=Preds ending=SentenceEnding?
		//	//actors=Actors  (auxiliarVerb+=WORD negation?=Negation)? predicate=Predicate  constraints+=Constraints* |
		//	//actors=Actors  predicate=Predicate constraints+=Constraints* |	
		//	//actors=Actors  auxiliarVerb+=AuxiliaryVerb negation?=Negation? auxiliarVerb+=AuxiliaryVerb? predicate=Predicate  constraints+=Constraints* |
		//	//actors=Actors  auxiliarVerb+=AuxiliaryVerb negation?=Negation? object=PredicateObject? constraints+=Constraints* 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//begin=SentenceBegin? actors=Actors auxNeg+=AuxNeg auxiliarVerb+=AuxiliaryVerb? preds=Preds? ending=SentenceEnding? |
		//begin=SentenceBegin? actors=Actors preds=Preds ending=SentenceEnding?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//begin=SentenceBegin? actors=Actors auxNeg+=AuxNeg auxiliarVerb+=AuxiliaryVerb? preds=Preds? ending=SentenceEnding?
		public Group getGroup_0() { return cGroup_0; }
		
		//begin=SentenceBegin?
		public Assignment getBeginAssignment_0_0() { return cBeginAssignment_0_0; }
		
		//SentenceBegin
		public RuleCall getBeginSentenceBeginParserRuleCall_0_0_0() { return cBeginSentenceBeginParserRuleCall_0_0_0; }
		
		//actors=Actors
		public Assignment getActorsAssignment_0_1() { return cActorsAssignment_0_1; }
		
		//Actors
		public RuleCall getActorsActorsParserRuleCall_0_1_0() { return cActorsActorsParserRuleCall_0_1_0; }
		
		//auxNeg+=AuxNeg
		public Assignment getAuxNegAssignment_0_2() { return cAuxNegAssignment_0_2; }
		
		//AuxNeg
		public RuleCall getAuxNegAuxNegParserRuleCall_0_2_0() { return cAuxNegAuxNegParserRuleCall_0_2_0; }
		
		//auxiliarVerb+=AuxiliaryVerb?
		public Assignment getAuxiliarVerbAssignment_0_3() { return cAuxiliarVerbAssignment_0_3; }
		
		//AuxiliaryVerb
		public RuleCall getAuxiliarVerbAuxiliaryVerbParserRuleCall_0_3_0() { return cAuxiliarVerbAuxiliaryVerbParserRuleCall_0_3_0; }
		
		//preds=Preds?
		public Assignment getPredsAssignment_0_4() { return cPredsAssignment_0_4; }
		
		//Preds
		public RuleCall getPredsPredsParserRuleCall_0_4_0() { return cPredsPredsParserRuleCall_0_4_0; }
		
		//ending=SentenceEnding?
		public Assignment getEndingAssignment_0_5() { return cEndingAssignment_0_5; }
		
		//SentenceEnding
		public RuleCall getEndingSentenceEndingParserRuleCall_0_5_0() { return cEndingSentenceEndingParserRuleCall_0_5_0; }
		
		//begin=SentenceBegin? actors=Actors preds=Preds ending=SentenceEnding?
		public Group getGroup_1() { return cGroup_1; }
		
		//begin=SentenceBegin?
		public Assignment getBeginAssignment_1_0() { return cBeginAssignment_1_0; }
		
		//SentenceBegin
		public RuleCall getBeginSentenceBeginParserRuleCall_1_0_0() { return cBeginSentenceBeginParserRuleCall_1_0_0; }
		
		//actors=Actors
		public Assignment getActorsAssignment_1_1() { return cActorsAssignment_1_1; }
		
		//Actors
		public RuleCall getActorsActorsParserRuleCall_1_1_0() { return cActorsActorsParserRuleCall_1_1_0; }
		
		//preds=Preds
		public Assignment getPredsAssignment_1_2() { return cPredsAssignment_1_2; }
		
		//Preds
		public RuleCall getPredsPredsParserRuleCall_1_2_0() { return cPredsPredsParserRuleCall_1_2_0; }
		
		//ending=SentenceEnding?
		public Assignment getEndingAssignment_1_3() { return cEndingAssignment_1_3; }
		
		//SentenceEnding
		public RuleCall getEndingSentenceEndingParserRuleCall_1_3_0() { return cEndingSentenceEndingParserRuleCall_1_3_0; }
	}
	public class ExistenceSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ExistenceSentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExistencePrefaceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cActorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActorsActorsParserRuleCall_1_0 = (RuleCall)cActorsAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRelativeClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelativeClauseRelativeClauseParserRuleCall_3_0 = (RuleCall)cRelativeClauseAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExistenceSentence:
		//	ExistencePreface actors=Actors ',' relativeClause=relativeClause ',';
		@Override public ParserRule getRule() { return rule; }
		
		//ExistencePreface actors=Actors ',' relativeClause=relativeClause ','
		public Group getGroup() { return cGroup; }
		
		//ExistencePreface
		public RuleCall getExistencePrefaceParserRuleCall_0() { return cExistencePrefaceParserRuleCall_0; }
		
		//actors=Actors
		public Assignment getActorsAssignment_1() { return cActorsAssignment_1; }
		
		//Actors
		public RuleCall getActorsActorsParserRuleCall_1_0() { return cActorsActorsParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//relativeClause=relativeClause
		public Assignment getRelativeClauseAssignment_3() { return cRelativeClauseAssignment_3; }
		
		//relativeClause
		public RuleCall getRelativeClauseRelativeClauseParserRuleCall_3_0() { return cRelativeClauseRelativeClauseParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}
	public class PropertySentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.PropertySentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cActorsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cActorsActorsParserRuleCall_0_0_0 = (RuleCall)cActorsAssignment_0_0.eContents().get(0);
		private final Assignment cPropertyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_0_1_0 = (RuleCall)cPropertyAssignment_0_1.eContents().get(0);
		private final Assignment cRelaAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRelaRelationParserRuleCall_0_2_0 = (RuleCall)cRelaAssignment_0_2.eContents().get(0);
		private final Assignment cModalityAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cModalityModalityEnumRuleCall_0_3_0 = (RuleCall)cModalityAssignment_0_3.eContents().get(0);
		private final Assignment cNegationAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cNegationNegationParserRuleCall_0_4_0 = (RuleCall)cNegationAssignment_0_4.eContents().get(0);
		private final Assignment cAuxiliarVerbAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cAuxiliarVerbAuxiliaryVerbParserRuleCall_0_5_0 = (RuleCall)cAuxiliarVerbAssignment_0_5.eContents().get(0);
		private final Assignment cPredObjAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cPredObjPredOrObjectParserRuleCall_0_6_0 = (RuleCall)cPredObjAssignment_0_6.eContents().get(0);
		private final Assignment cEndingAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cEndingSentenceEndingParserRuleCall_0_7_0 = (RuleCall)cEndingAssignment_0_7.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cActorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cActorsActorsParserRuleCall_1_0_0 = (RuleCall)cActorsAssignment_1_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_1_1_0 = (RuleCall)cPropertyAssignment_1_1.eContents().get(0);
		private final Assignment cRelaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRelaRelationParserRuleCall_1_2_0 = (RuleCall)cRelaAssignment_1_2.eContents().get(0);
		private final Assignment cAuxNegAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cAuxNegAuxNegParserRuleCall_1_3_0 = (RuleCall)cAuxNegAssignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cPredObjAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final RuleCall cPredObjPredOrObjectParserRuleCall_1_4_0_0 = (RuleCall)cPredObjAssignment_1_4_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_4_1 = (Assignment)cAlternatives_1_4.eContents().get(1);
		private final RuleCall cConstraintsConstraintsParserRuleCall_1_4_1_0 = (RuleCall)cConstraintsAssignment_1_4_1.eContents().get(0);
		private final Assignment cEndingAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cEndingSentenceEndingParserRuleCall_1_5_0 = (RuleCall)cEndingAssignment_1_5.eContents().get(0);
		
		//PropertySentence:
		//	actors=Actors property=Property rela=Relation? modality=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb?
		//	predObj=PredOrObject ending=SentenceEnding? | actors=Actors property=Property rela=Relation? auxNeg=AuxNeg
		//	(predObj=PredOrObject | constraints=Constraints) ending=SentenceEnding?
		//	//property=Property modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb? predicate=Predicate  constraints+=Constraints* |
		//	//property=Property modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb object=PredicateObject?  constraints+=Constraints* |
		//	//property=Property auxiliarVerb=AuxiliaryVerb negation?=Negation? ((predicate=Predicate|object=PredicateObject) constraints+=Constraints* | constraints+=Constraints+)  |
		//	//property=Property (predicateWord=WORD| predicateWord=STRING) object=PredicateObject? constraints+=Constraints* //Leads to mismatch in xtext but not in AntLRworks
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//actors=Actors property=Property rela=Relation? modality=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb?
		//predObj=PredOrObject ending=SentenceEnding? | actors=Actors property=Property rela=Relation? auxNeg=AuxNeg
		//(predObj=PredOrObject | constraints=Constraints) ending=SentenceEnding?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//actors=Actors property=Property rela=Relation? modality=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb?
		//predObj=PredOrObject ending=SentenceEnding?
		public Group getGroup_0() { return cGroup_0; }
		
		//actors=Actors
		public Assignment getActorsAssignment_0_0() { return cActorsAssignment_0_0; }
		
		//Actors
		public RuleCall getActorsActorsParserRuleCall_0_0_0() { return cActorsActorsParserRuleCall_0_0_0; }
		
		//property=Property
		public Assignment getPropertyAssignment_0_1() { return cPropertyAssignment_0_1; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_0_1_0() { return cPropertyPropertyParserRuleCall_0_1_0; }
		
		//rela=Relation?
		public Assignment getRelaAssignment_0_2() { return cRelaAssignment_0_2; }
		
		//Relation
		public RuleCall getRelaRelationParserRuleCall_0_2_0() { return cRelaRelationParserRuleCall_0_2_0; }
		
		//modality=Modality
		public Assignment getModalityAssignment_0_3() { return cModalityAssignment_0_3; }
		
		//Modality
		public RuleCall getModalityModalityEnumRuleCall_0_3_0() { return cModalityModalityEnumRuleCall_0_3_0; }
		
		//negation?=Negation?
		public Assignment getNegationAssignment_0_4() { return cNegationAssignment_0_4; }
		
		//Negation
		public RuleCall getNegationNegationParserRuleCall_0_4_0() { return cNegationNegationParserRuleCall_0_4_0; }
		
		//auxiliarVerb=AuxiliaryVerb?
		public Assignment getAuxiliarVerbAssignment_0_5() { return cAuxiliarVerbAssignment_0_5; }
		
		//AuxiliaryVerb
		public RuleCall getAuxiliarVerbAuxiliaryVerbParserRuleCall_0_5_0() { return cAuxiliarVerbAuxiliaryVerbParserRuleCall_0_5_0; }
		
		//predObj=PredOrObject
		public Assignment getPredObjAssignment_0_6() { return cPredObjAssignment_0_6; }
		
		//PredOrObject
		public RuleCall getPredObjPredOrObjectParserRuleCall_0_6_0() { return cPredObjPredOrObjectParserRuleCall_0_6_0; }
		
		//ending=SentenceEnding?
		public Assignment getEndingAssignment_0_7() { return cEndingAssignment_0_7; }
		
		//SentenceEnding
		public RuleCall getEndingSentenceEndingParserRuleCall_0_7_0() { return cEndingSentenceEndingParserRuleCall_0_7_0; }
		
		//actors=Actors property=Property rela=Relation? auxNeg=AuxNeg (predObj=PredOrObject | constraints=Constraints)
		//ending=SentenceEnding?
		public Group getGroup_1() { return cGroup_1; }
		
		//actors=Actors
		public Assignment getActorsAssignment_1_0() { return cActorsAssignment_1_0; }
		
		//Actors
		public RuleCall getActorsActorsParserRuleCall_1_0_0() { return cActorsActorsParserRuleCall_1_0_0; }
		
		//property=Property
		public Assignment getPropertyAssignment_1_1() { return cPropertyAssignment_1_1; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_1_1_0() { return cPropertyPropertyParserRuleCall_1_1_0; }
		
		//rela=Relation?
		public Assignment getRelaAssignment_1_2() { return cRelaAssignment_1_2; }
		
		//Relation
		public RuleCall getRelaRelationParserRuleCall_1_2_0() { return cRelaRelationParserRuleCall_1_2_0; }
		
		//auxNeg=AuxNeg
		public Assignment getAuxNegAssignment_1_3() { return cAuxNegAssignment_1_3; }
		
		//AuxNeg
		public RuleCall getAuxNegAuxNegParserRuleCall_1_3_0() { return cAuxNegAuxNegParserRuleCall_1_3_0; }
		
		//predObj=PredOrObject | constraints=Constraints
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//predObj=PredOrObject
		public Assignment getPredObjAssignment_1_4_0() { return cPredObjAssignment_1_4_0; }
		
		//PredOrObject
		public RuleCall getPredObjPredOrObjectParserRuleCall_1_4_0_0() { return cPredObjPredOrObjectParserRuleCall_1_4_0_0; }
		
		//constraints=Constraints
		public Assignment getConstraintsAssignment_1_4_1() { return cConstraintsAssignment_1_4_1; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_1_4_1_0() { return cConstraintsConstraintsParserRuleCall_1_4_1_0; }
		
		//ending=SentenceEnding?
		public Assignment getEndingAssignment_1_5() { return cEndingAssignment_1_5; }
		
		//SentenceEnding
		public RuleCall getEndingSentenceEndingParserRuleCall_1_5_0() { return cEndingSentenceEndingParserRuleCall_1_5_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPROPERTY_TERMTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPropertyWORDParserRuleCall_1_0_0 = (RuleCall)cPropertyAssignment_1_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cPropertySTRINGTerminalRuleCall_1_1_0 = (RuleCall)cPropertyAssignment_1_1.eContents().get(0);
		
		//Property:
		//	PROPERTY_TERM (property+=WORD+ | property+=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//PROPERTY_TERM (property+=WORD+ | property+=STRING)
		public Group getGroup() { return cGroup; }
		
		//PROPERTY_TERM
		public RuleCall getPROPERTY_TERMTerminalRuleCall_0() { return cPROPERTY_TERMTerminalRuleCall_0; }
		
		//property+=WORD+ | property+=STRING
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//property+=WORD+
		public Assignment getPropertyAssignment_1_0() { return cPropertyAssignment_1_0; }
		
		//WORD
		public RuleCall getPropertyWORDParserRuleCall_1_0_0() { return cPropertyWORDParserRuleCall_1_0_0; }
		
		//property+=STRING
		public Assignment getPropertyAssignment_1_1() { return cPropertyAssignment_1_1; }
		
		//STRING
		public RuleCall getPropertySTRINGTerminalRuleCall_1_1_0() { return cPropertySTRINGTerminalRuleCall_1_1_0; }
	}
	public class SentenceBeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.SentenceBegin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelaRelationParserRuleCall_0_0 = (RuleCall)cRelaAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SentenceBegin:
		//	rela=Relation ',';
		@Override public ParserRule getRule() { return rule; }
		
		//rela=Relation ','
		public Group getGroup() { return cGroup; }
		
		//rela=Relation
		public Assignment getRelaAssignment_0() { return cRelaAssignment_0; }
		
		//Relation
		public RuleCall getRelaRelationParserRuleCall_0_0() { return cRelaRelationParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}
	public class SentenceEndingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.SentenceEnding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstConstraintsParserRuleCall_0_0 = (RuleCall)cConstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cConstAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConstConstraintsParserRuleCall_1_0_0 = (RuleCall)cConstAssignment_1_0.eContents().get(0);
		private final Assignment cRelaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelaRelationParserRuleCall_1_1_0 = (RuleCall)cRelaAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cRelaAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRelaRelationParserRuleCall_2_0_0 = (RuleCall)cRelaAssignment_2_0.eContents().get(0);
		private final Assignment cConstAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstConstraintsParserRuleCall_2_1_0 = (RuleCall)cConstAssignment_2_1.eContents().get(0);
		
		//SentenceEnding:
		//	const+=Constraints+ | const+=Constraints* rela=Relation | rela=Relation const+=Constraints+;
		@Override public ParserRule getRule() { return rule; }
		
		//const+=Constraints+ | const+=Constraints* rela=Relation | rela=Relation const+=Constraints+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//const+=Constraints+
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }
		
		//Constraints
		public RuleCall getConstConstraintsParserRuleCall_0_0() { return cConstConstraintsParserRuleCall_0_0; }
		
		//const+=Constraints* rela=Relation
		public Group getGroup_1() { return cGroup_1; }
		
		//const+=Constraints*
		public Assignment getConstAssignment_1_0() { return cConstAssignment_1_0; }
		
		//Constraints
		public RuleCall getConstConstraintsParserRuleCall_1_0_0() { return cConstConstraintsParserRuleCall_1_0_0; }
		
		//rela=Relation
		public Assignment getRelaAssignment_1_1() { return cRelaAssignment_1_1; }
		
		//Relation
		public RuleCall getRelaRelationParserRuleCall_1_1_0() { return cRelaRelationParserRuleCall_1_1_0; }
		
		//rela=Relation const+=Constraints+
		public Group getGroup_2() { return cGroup_2; }
		
		//rela=Relation
		public Assignment getRelaAssignment_2_0() { return cRelaAssignment_2_0; }
		
		//Relation
		public RuleCall getRelaRelationParserRuleCall_2_0_0() { return cRelaRelationParserRuleCall_2_0_0; }
		
		//const+=Constraints+
		public Assignment getConstAssignment_2_1() { return cConstAssignment_2_1; }
		
		//Constraints
		public RuleCall getConstConstraintsParserRuleCall_2_1_0() { return cConstConstraintsParserRuleCall_2_1_0; }
	}
	public class RelativeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.relativeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSentenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSentenceRelativeSentenceParserRuleCall_0_0 = (RuleCall)cSentenceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cConjunctionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConjunctionConjunctionParserRuleCall_1_0_0 = (RuleCall)cConjunctionAssignment_1_0.eContents().get(0);
		private final Assignment cCondClausesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCondClausesConditionalClauseParserRuleCall_1_1_0 = (RuleCall)cCondClausesAssignment_1_1.eContents().get(0);
		
		///* =========== RELATIVE CLAUSE =========== */ relativeClause:
		//	sentence=relativeSentence (conjunction+=Conjunction condClauses+=ConditionalClause)*;
		@Override public ParserRule getRule() { return rule; }
		
		////  pronoun=RelativePronouns actors=Actors? modelity=Modality? negation?=Negation? predicate=Predicate constraints+=Constraints*
		//sentence=relativeSentence (conjunction+=Conjunction condClauses+=ConditionalClause)*
		public Group getGroup() { return cGroup; }
		
		////  pronoun=RelativePronouns actors=Actors? modelity=Modality? negation?=Negation? predicate=Predicate constraints+=Constraints*
		//sentence=relativeSentence
		public Assignment getSentenceAssignment_0() { return cSentenceAssignment_0; }
		
		//relativeSentence
		public RuleCall getSentenceRelativeSentenceParserRuleCall_0_0() { return cSentenceRelativeSentenceParserRuleCall_0_0; }
		
		//(conjunction+=Conjunction condClauses+=ConditionalClause)*
		public Group getGroup_1() { return cGroup_1; }
		
		//conjunction+=Conjunction
		public Assignment getConjunctionAssignment_1_0() { return cConjunctionAssignment_1_0; }
		
		//Conjunction
		public RuleCall getConjunctionConjunctionParserRuleCall_1_0_0() { return cConjunctionConjunctionParserRuleCall_1_0_0; }
		
		//condClauses+=ConditionalClause
		public Assignment getCondClausesAssignment_1_1() { return cCondClausesAssignment_1_1; }
		
		//ConditionalClause
		public RuleCall getCondClausesConditionalClauseParserRuleCall_1_1_0() { return cCondClausesConditionalClauseParserRuleCall_1_1_0; }
	}
	public class RelativeSentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.relativeSentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPronounAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPronounRelativePronounsSubjectParserRuleCall_0_0_0 = (RuleCall)cPronounAssignment_0_0.eContents().get(0);
		private final Assignment cModelityAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cModelityModalityEnumRuleCall_0_1_0 = (RuleCall)cModelityAssignment_0_1.eContents().get(0);
		private final Assignment cNegationAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNegationNegationParserRuleCall_0_2_0 = (RuleCall)cNegationAssignment_0_2.eContents().get(0);
		private final Assignment cPredicateAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cPredicatePredicateParserRuleCall_0_3_0 = (RuleCall)cPredicateAssignment_0_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cConstraintsConstraintsParserRuleCall_0_4_0 = (RuleCall)cConstraintsAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPronounAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPronounRelativePronounsSubjectParserRuleCall_1_0_0 = (RuleCall)cPronounAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cAuxiliarAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cAuxiliarWORDParserRuleCall_1_1_0_0 = (RuleCall)cAuxiliarAssignment_1_1_0.eContents().get(0);
		private final Assignment cNegationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNegationNegationParserRuleCall_1_1_1_0 = (RuleCall)cNegationAssignment_1_1_1.eContents().get(0);
		private final Assignment cPredicateAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPredicatePredicateParserRuleCall_1_2_0 = (RuleCall)cPredicateAssignment_1_2.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cConstraintsConstraintsParserRuleCall_1_3_0 = (RuleCall)cConstraintsAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPronounAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPronounRelativePronounsObjectParserRuleCall_2_0_0 = (RuleCall)cPronounAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cClauseAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cClauseModalitySentenceParserRuleCall_2_1_0_0 = (RuleCall)cClauseAssignment_2_1_0.eContents().get(0);
		private final Assignment cClauseAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cClausePredicateSentenceParserRuleCall_2_1_1_0 = (RuleCall)cClauseAssignment_2_1_1.eContents().get(0);
		
		//relativeSentence:
		//	pronoun=RelativePronounsSubject modelity=Modality negation?=Negation? predicate=Predicate constraints+=Constraints* |
		//	pronoun=RelativePronounsSubject (auxiliar=WORD negation?=Negation)? predicate=Predicate constraints+=Constraints* |
		//	pronoun=RelativePronounsObject (clause=ModalitySentence | clause=PredicateSentence);
		@Override public ParserRule getRule() { return rule; }
		
		//pronoun=RelativePronounsSubject modelity=Modality negation?=Negation? predicate=Predicate constraints+=Constraints* |
		//pronoun=RelativePronounsSubject (auxiliar=WORD negation?=Negation)? predicate=Predicate constraints+=Constraints* |
		//pronoun=RelativePronounsObject (clause=ModalitySentence | clause=PredicateSentence)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pronoun=RelativePronounsSubject modelity=Modality negation?=Negation? predicate=Predicate constraints+=Constraints*
		public Group getGroup_0() { return cGroup_0; }
		
		//pronoun=RelativePronounsSubject
		public Assignment getPronounAssignment_0_0() { return cPronounAssignment_0_0; }
		
		//RelativePronounsSubject
		public RuleCall getPronounRelativePronounsSubjectParserRuleCall_0_0_0() { return cPronounRelativePronounsSubjectParserRuleCall_0_0_0; }
		
		//modelity=Modality
		public Assignment getModelityAssignment_0_1() { return cModelityAssignment_0_1; }
		
		//Modality
		public RuleCall getModelityModalityEnumRuleCall_0_1_0() { return cModelityModalityEnumRuleCall_0_1_0; }
		
		//negation?=Negation?
		public Assignment getNegationAssignment_0_2() { return cNegationAssignment_0_2; }
		
		//Negation
		public RuleCall getNegationNegationParserRuleCall_0_2_0() { return cNegationNegationParserRuleCall_0_2_0; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0_3() { return cPredicateAssignment_0_3; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_3_0() { return cPredicatePredicateParserRuleCall_0_3_0; }
		
		//constraints+=Constraints*
		public Assignment getConstraintsAssignment_0_4() { return cConstraintsAssignment_0_4; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_0_4_0() { return cConstraintsConstraintsParserRuleCall_0_4_0; }
		
		//pronoun=RelativePronounsSubject (auxiliar=WORD negation?=Negation)? predicate=Predicate constraints+=Constraints*
		public Group getGroup_1() { return cGroup_1; }
		
		//pronoun=RelativePronounsSubject
		public Assignment getPronounAssignment_1_0() { return cPronounAssignment_1_0; }
		
		//RelativePronounsSubject
		public RuleCall getPronounRelativePronounsSubjectParserRuleCall_1_0_0() { return cPronounRelativePronounsSubjectParserRuleCall_1_0_0; }
		
		//(auxiliar=WORD negation?=Negation)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//auxiliar=WORD
		public Assignment getAuxiliarAssignment_1_1_0() { return cAuxiliarAssignment_1_1_0; }
		
		//WORD
		public RuleCall getAuxiliarWORDParserRuleCall_1_1_0_0() { return cAuxiliarWORDParserRuleCall_1_1_0_0; }
		
		//negation?=Negation
		public Assignment getNegationAssignment_1_1_1() { return cNegationAssignment_1_1_1; }
		
		//Negation
		public RuleCall getNegationNegationParserRuleCall_1_1_1_0() { return cNegationNegationParserRuleCall_1_1_1_0; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_1_2() { return cPredicateAssignment_1_2; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_1_2_0() { return cPredicatePredicateParserRuleCall_1_2_0; }
		
		//constraints+=Constraints*
		public Assignment getConstraintsAssignment_1_3() { return cConstraintsAssignment_1_3; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_1_3_0() { return cConstraintsConstraintsParserRuleCall_1_3_0; }
		
		//pronoun=RelativePronounsObject (clause=ModalitySentence | clause=PredicateSentence)
		public Group getGroup_2() { return cGroup_2; }
		
		//pronoun=RelativePronounsObject
		public Assignment getPronounAssignment_2_0() { return cPronounAssignment_2_0; }
		
		//RelativePronounsObject
		public RuleCall getPronounRelativePronounsObjectParserRuleCall_2_0_0() { return cPronounRelativePronounsObjectParserRuleCall_2_0_0; }
		
		//clause=ModalitySentence | clause=PredicateSentence
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//clause=ModalitySentence
		public Assignment getClauseAssignment_2_1_0() { return cClauseAssignment_2_1_0; }
		
		//ModalitySentence
		public RuleCall getClauseModalitySentenceParserRuleCall_2_1_0_0() { return cClauseModalitySentenceParserRuleCall_2_1_0_0; }
		
		//clause=PredicateSentence
		public Assignment getClauseAssignment_2_1_1() { return cClauseAssignment_2_1_1; }
		
		//PredicateSentence
		public RuleCall getClausePredicateSentenceParserRuleCall_2_1_1_0() { return cClausePredicateSentenceParserRuleCall_2_1_1_0; }
	}
	public class ActorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Actors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActorsActorParserRuleCall_0_0 = (RuleCall)cActorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cConjunctionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConjunctionConjunctionParserRuleCall_1_0_0 = (RuleCall)cConjunctionAssignment_1_0.eContents().get(0);
		private final Assignment cActorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActorsActorParserRuleCall_1_1_0 = (RuleCall)cActorsAssignment_1_1.eContents().get(0);
		
		///* =========== CLAUSE ITEMS =========== */ Actors:
		//	actors+=Actor (conjunction+=Conjunction actors+=Actor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//actors+=Actor (conjunction+=Conjunction actors+=Actor)*
		public Group getGroup() { return cGroup; }
		
		//actors+=Actor
		public Assignment getActorsAssignment_0() { return cActorsAssignment_0; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_0_0() { return cActorsActorParserRuleCall_0_0; }
		
		//(conjunction+=Conjunction actors+=Actor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//conjunction+=Conjunction
		public Assignment getConjunctionAssignment_1_0() { return cConjunctionAssignment_1_0; }
		
		//Conjunction
		public RuleCall getConjunctionConjunctionParserRuleCall_1_0_0() { return cConjunctionConjunctionParserRuleCall_1_0_0; }
		
		//actors+=Actor
		public Assignment getActorsAssignment_1_1() { return cActorsAssignment_1_1; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_1_1_0() { return cActorsActorParserRuleCall_1_1_0; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPreNominativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cActorAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cActorWORDParserRuleCall_1_0_0 = (RuleCall)cActorAssignment_1_0.eContents().get(0);
		private final Assignment cActorAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cActorSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cActorAssignment_1_1.eContents().get(0);
		
		//Actor:
		//	PreNominative? (actor=WORD | actor=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//PreNominative? (actor=WORD | actor=STRING)
		public Group getGroup() { return cGroup; }
		
		//PreNominative?
		public RuleCall getPreNominativeParserRuleCall_0() { return cPreNominativeParserRuleCall_0; }
		
		//actor=WORD | actor=STRING
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//actor=WORD
		public Assignment getActorAssignment_1_0() { return cActorAssignment_1_0; }
		
		//WORD
		public RuleCall getActorWORDParserRuleCall_1_0_0() { return cActorWORDParserRuleCall_1_0_0; }
		
		//actor=STRING
		public Assignment getActorAssignment_1_1() { return cActorAssignment_1_1; }
		
		//STRING
		public RuleCall getActorSTRINGTerminalRuleCall_1_1_0() { return cActorSTRINGTerminalRuleCall_1_1_0; }
	}
	public class PredsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Preds");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Assignment cPredObjAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPredObjPredicateObjectParserRuleCall_1_0 = (RuleCall)cPredObjAssignment_1.eContents().get(0);
		
		//Preds:
		//	predicate=Predicate | predObj=PredicateObject;
		@Override public ParserRule getRule() { return rule; }
		
		//predicate=Predicate | predObj=PredicateObject
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0() { return cPredicatePredicateParserRuleCall_0_0; }
		
		//predObj=PredicateObject
		public Assignment getPredObjAssignment_1() { return cPredObjAssignment_1; }
		
		//PredicateObject
		public RuleCall getPredObjPredicateObjectParserRuleCall_1_0() { return cPredObjPredicateObjectParserRuleCall_1_0; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Predicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPredicatesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPredicatesWORDParserRuleCall_0_0 = (RuleCall)cPredicatesAssignment_0.eContents().get(0);
		private final Assignment cPredicatesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPredicatesSTRINGTerminalRuleCall_1_0 = (RuleCall)cPredicatesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPredicatesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPredicatesWORDParserRuleCall_2_0_0 = (RuleCall)cPredicatesAssignment_2_0.eContents().get(0);
		private final Assignment cObjectAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cObjectPredicateObjectParserRuleCall_2_1_0 = (RuleCall)cObjectAssignment_2_1.eContents().get(0);
		
		//Predicate:
		//	predicates+=WORD+ | predicates+=STRING | predicates+=WORD+ object=PredicateObject;
		@Override public ParserRule getRule() { return rule; }
		
		////verb=Verb | activity=Activity
		//predicates+=WORD+ | predicates+=STRING | predicates+=WORD+ object=PredicateObject
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////verb=Verb | activity=Activity
		//predicates+=WORD+
		public Assignment getPredicatesAssignment_0() { return cPredicatesAssignment_0; }
		
		//WORD
		public RuleCall getPredicatesWORDParserRuleCall_0_0() { return cPredicatesWORDParserRuleCall_0_0; }
		
		//predicates+=STRING
		public Assignment getPredicatesAssignment_1() { return cPredicatesAssignment_1; }
		
		//STRING
		public RuleCall getPredicatesSTRINGTerminalRuleCall_1_0() { return cPredicatesSTRINGTerminalRuleCall_1_0; }
		
		//predicates+=WORD+ object=PredicateObject
		public Group getGroup_2() { return cGroup_2; }
		
		//predicates+=WORD+
		public Assignment getPredicatesAssignment_2_0() { return cPredicatesAssignment_2_0; }
		
		//WORD
		public RuleCall getPredicatesWORDParserRuleCall_2_0_0() { return cPredicatesWORDParserRuleCall_2_0_0; }
		
		//object=PredicateObject
		public Assignment getObjectAssignment_2_1() { return cObjectAssignment_2_1; }
		
		//PredicateObject
		public RuleCall getObjectPredicateObjectParserRuleCall_2_1_0() { return cObjectPredicateObjectParserRuleCall_2_1_0; }
	}
	public class PredicateObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.PredicateObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArticleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArticlePreNominativeParserRuleCall_0_0 = (RuleCall)cArticleAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cObjectAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cObjectWORDParserRuleCall_1_0_0 = (RuleCall)cObjectAssignment_1_0.eContents().get(0);
		private final Assignment cObjectAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cObjectSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cObjectAssignment_1_1.eContents().get(0);
		
		//PredicateObject:
		//	article=PreNominative (object+=WORD+ | object+=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//article=PreNominative (object+=WORD+ | object+=STRING)
		public Group getGroup() { return cGroup; }
		
		//article=PreNominative
		public Assignment getArticleAssignment_0() { return cArticleAssignment_0; }
		
		//PreNominative
		public RuleCall getArticlePreNominativeParserRuleCall_0_0() { return cArticlePreNominativeParserRuleCall_0_0; }
		
		//object+=WORD+ | object+=STRING
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//object+=WORD+
		public Assignment getObjectAssignment_1_0() { return cObjectAssignment_1_0; }
		
		//WORD
		public RuleCall getObjectWORDParserRuleCall_1_0_0() { return cObjectWORDParserRuleCall_1_0_0; }
		
		//object+=STRING
		public Assignment getObjectAssignment_1_1() { return cObjectAssignment_1_1; }
		
		//STRING
		public RuleCall getObjectSTRINGTerminalRuleCall_1_1_0() { return cObjectSTRINGTerminalRuleCall_1_1_0; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArticleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArticlePreNominativeParserRuleCall_0_0 = (RuleCall)cArticleAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cObjectAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cObjectWORDParserRuleCall_1_0_0 = (RuleCall)cObjectAssignment_1_0.eContents().get(0);
		private final Assignment cObjectAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cObjectSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cObjectAssignment_1_1.eContents().get(0);
		
		//Object:
		//	article=PreNominative? (object+=WORD+ | object+=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//article=PreNominative? (object+=WORD+ | object+=STRING)
		public Group getGroup() { return cGroup; }
		
		//article=PreNominative?
		public Assignment getArticleAssignment_0() { return cArticleAssignment_0; }
		
		//PreNominative
		public RuleCall getArticlePreNominativeParserRuleCall_0_0() { return cArticlePreNominativeParserRuleCall_0_0; }
		
		//object+=WORD+ | object+=STRING
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//object+=WORD+
		public Assignment getObjectAssignment_1_0() { return cObjectAssignment_1_0; }
		
		//WORD
		public RuleCall getObjectWORDParserRuleCall_1_0_0() { return cObjectWORDParserRuleCall_1_0_0; }
		
		//object+=STRING
		public Assignment getObjectAssignment_1_1() { return cObjectAssignment_1_1; }
		
		//STRING
		public RuleCall getObjectSTRINGTerminalRuleCall_1_1_0() { return cObjectSTRINGTerminalRuleCall_1_1_0; }
	}
	public class PredOrObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.PredOrObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPredicatePredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Assignment cPredObjAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPredObjPredicateObjectParserRuleCall_1_0 = (RuleCall)cPredObjAssignment_1.eContents().get(0);
		
		//PredOrObject:
		//	predicate=Predicate | predObj=PredicateObject;
		@Override public ParserRule getRule() { return rule; }
		
		//predicate=Predicate | predObj=PredicateObject
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_0_0() { return cPredicatePredicateParserRuleCall_0_0; }
		
		//predObj=PredicateObject
		public Assignment getPredObjAssignment_1() { return cPredObjAssignment_1; }
		
		//PredicateObject
		public RuleCall getPredObjPredicateObjectParserRuleCall_1_0() { return cPredObjPredicateObjectParserRuleCall_1_0; }
	}
	public class ExistencePrefaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ExistencePreface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExistencePrefaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cThereKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cThereKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cModifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModifierModifierEnumRuleCall_2_0 = (RuleCall)cModifierAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cExistKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cExistsKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//ExistencePreface:
		//	{ExistencePreface} ('there' | 'There') modifier=Modifier? ('exist' | 'exists');
		@Override public ParserRule getRule() { return rule; }
		
		//{ExistencePreface} ('there' | 'There') modifier=Modifier? ('exist' | 'exists')
		public Group getGroup() { return cGroup; }
		
		//{ExistencePreface}
		public Action getExistencePrefaceAction_0() { return cExistencePrefaceAction_0; }
		
		//'there' | 'There'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'there'
		public Keyword getThereKeyword_1_0() { return cThereKeyword_1_0; }
		
		//'There'
		public Keyword getThereKeyword_1_1() { return cThereKeyword_1_1; }
		
		//modifier=Modifier?
		public Assignment getModifierAssignment_2() { return cModifierAssignment_2; }
		
		//Modifier
		public RuleCall getModifierModifierEnumRuleCall_2_0() { return cModifierModifierEnumRuleCall_2_0; }
		
		//'exist' | 'exists'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'exist'
		public Keyword getExistKeyword_3_0() { return cExistKeyword_3_0; }
		
		//'exists'
		public Keyword getExistsKeyword_3_1() { return cExistsKeyword_3_1; }
	}
	public class AuxNegElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.AuxNeg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAuxiliarVerbAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAuxiliarVerbAuxiliaryVerbParserRuleCall_0_0_0 = (RuleCall)cAuxiliarVerbAssignment_0_0.eContents().get(0);
		private final Assignment cNegationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNegationNegationParserRuleCall_0_1_0 = (RuleCall)cNegationAssignment_0_1.eContents().get(0);
		private final Assignment cAuxiliarVerbNegAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAuxiliarVerbNegAuxiliaryVerbNegationParserRuleCall_1_0 = (RuleCall)cAuxiliarVerbNegAssignment_1.eContents().get(0);
		
		///* The same as Actors and Actor
		//Objects:
		//	(objects+=Object) (conjunction+=Conjunction objects+=Object)*
		//;
		//
		//Object:
		//    PreNominative? (object+=WORD+ | object+=STRING)  
		//;
		//*/ AuxNeg:
		//	auxiliarVerb=AuxiliaryVerb negation=Negation? | auxiliarVerbNeg=AuxiliaryVerbNegation;
		@Override public ParserRule getRule() { return rule; }
		
		//auxiliarVerb=AuxiliaryVerb negation=Negation? | auxiliarVerbNeg=AuxiliaryVerbNegation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//auxiliarVerb=AuxiliaryVerb negation=Negation?
		public Group getGroup_0() { return cGroup_0; }
		
		//auxiliarVerb=AuxiliaryVerb
		public Assignment getAuxiliarVerbAssignment_0_0() { return cAuxiliarVerbAssignment_0_0; }
		
		//AuxiliaryVerb
		public RuleCall getAuxiliarVerbAuxiliaryVerbParserRuleCall_0_0_0() { return cAuxiliarVerbAuxiliaryVerbParserRuleCall_0_0_0; }
		
		//negation=Negation?
		public Assignment getNegationAssignment_0_1() { return cNegationAssignment_0_1; }
		
		//Negation
		public RuleCall getNegationNegationParserRuleCall_0_1_0() { return cNegationNegationParserRuleCall_0_1_0; }
		
		//auxiliarVerbNeg=AuxiliaryVerbNegation
		public Assignment getAuxiliarVerbNegAssignment_1() { return cAuxiliarVerbNegAssignment_1; }
		
		//AuxiliaryVerbNegation
		public RuleCall getAuxiliarVerbNegAuxiliaryVerbNegationParserRuleCall_1_0() { return cAuxiliarVerbNegAuxiliaryVerbNegationParserRuleCall_1_0; }
	}
	public class PreNominativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.PreNominative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeterminerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeterminerQuantificationParserRuleCall_0_0 = (RuleCall)cDeterminerAssignment_0.eContents().get(0);
		private final Assignment cArticleAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArticleArticlesParserRuleCall_1_0 = (RuleCall)cArticleAssignment_1.eContents().get(0);
		private final Assignment cArticleAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cArticleRefArticlesParserRuleCall_2_0 = (RuleCall)cArticleAssignment_2.eContents().get(0);
		
		//PreNominative:
		//	determiner=Quantification | article=Articles | article=RefArticles;
		@Override public ParserRule getRule() { return rule; }
		
		//determiner=Quantification | article=Articles | article=RefArticles
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//determiner=Quantification
		public Assignment getDeterminerAssignment_0() { return cDeterminerAssignment_0; }
		
		//Quantification
		public RuleCall getDeterminerQuantificationParserRuleCall_0_0() { return cDeterminerQuantificationParserRuleCall_0_0; }
		
		//article=Articles
		public Assignment getArticleAssignment_1() { return cArticleAssignment_1; }
		
		//Articles
		public RuleCall getArticleArticlesParserRuleCall_1_0() { return cArticleArticlesParserRuleCall_1_0; }
		
		//article=RefArticles
		public Assignment getArticleAssignment_2() { return cArticleAssignment_2; }
		
		//RefArticles
		public RuleCall getArticleRefArticlesParserRuleCall_2_0() { return cArticleRefArticlesParserRuleCall_2_0; }
	}
	public class AdverbialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Adverbial");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSizeAdverbialParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionAdverbialParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComparisonAdverbialParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Adverbial:
		//	SizeAdverbial | PositionAdverbial | ComparisonAdverbial //| (WORD 'of')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SizeAdverbial | PositionAdverbial | ComparisonAdverbial
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SizeAdverbial
		public RuleCall getSizeAdverbialParserRuleCall_0() { return cSizeAdverbialParserRuleCall_0; }
		
		//PositionAdverbial
		public RuleCall getPositionAdverbialParserRuleCall_1() { return cPositionAdverbialParserRuleCall_1; }
		
		//ComparisonAdverbial
		public RuleCall getComparisonAdverbialParserRuleCall_2() { return cComparisonAdverbialParserRuleCall_2; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelposAdvAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelposAdvPositionAdverbialParserRuleCall_0_0 = (RuleCall)cRelposAdvAssignment_0.eContents().get(0);
		private final Assignment cRelDelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelDelRelationDelimiterParserRuleCall_1_0 = (RuleCall)cRelDelAssignment_1.eContents().get(0);
		private final Assignment cRelCompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelCompComperatorsParserRuleCall_2_0 = (RuleCall)cRelCompAssignment_2.eContents().get(0);
		private final Assignment cRelElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelElementsRelObjectsParserRuleCall_3_0 = (RuleCall)cRelElementsAssignment_3.eContents().get(0);
		
		///* =========== Relations =========== */ //Currently not used -> False identification of properties
		//Relation:
		//	relposAdv=PositionAdverbial relDel=RelationDelimiter relComp=Comperators relElements=RelObjects;
		@Override public ParserRule getRule() { return rule; }
		
		//relposAdv=PositionAdverbial relDel=RelationDelimiter relComp=Comperators relElements=RelObjects
		public Group getGroup() { return cGroup; }
		
		//relposAdv=PositionAdverbial
		public Assignment getRelposAdvAssignment_0() { return cRelposAdvAssignment_0; }
		
		//PositionAdverbial
		public RuleCall getRelposAdvPositionAdverbialParserRuleCall_0_0() { return cRelposAdvPositionAdverbialParserRuleCall_0_0; }
		
		//relDel=RelationDelimiter
		public Assignment getRelDelAssignment_1() { return cRelDelAssignment_1; }
		
		//RelationDelimiter
		public RuleCall getRelDelRelationDelimiterParserRuleCall_1_0() { return cRelDelRelationDelimiterParserRuleCall_1_0; }
		
		//relComp=Comperators
		public Assignment getRelCompAssignment_2() { return cRelCompAssignment_2; }
		
		//Comperators
		public RuleCall getRelCompComperatorsParserRuleCall_2_0() { return cRelCompComperatorsParserRuleCall_2_0; }
		
		//relElements=RelObjects
		public Assignment getRelElementsAssignment_3() { return cRelElementsAssignment_3; }
		
		//RelObjects
		public RuleCall getRelElementsRelObjectsParserRuleCall_3_0() { return cRelElementsRelObjectsParserRuleCall_3_0; }
	}
	public class RelObjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.RelObjects");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectObjectParserRuleCall_0_0 = (RuleCall)cObjectAssignment_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRelConjAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRelConjRelConjunctionParserRuleCall_2_0_0 = (RuleCall)cRelConjAssignment_2_0.eContents().get(0);
		private final Assignment cObjectAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cObjectObjectParserRuleCall_2_1_0 = (RuleCall)cObjectAssignment_2_1.eContents().get(0);
		private final Assignment cPropertyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cPropertyPropertyParserRuleCall_2_2_0 = (RuleCall)cPropertyAssignment_2_2.eContents().get(0);
		
		//RelObjects:
		//	object+=Object property+=Property? (relConj+=RelConjunction object+=Object property+=Property?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//object+=Object property+=Property? (relConj+=RelConjunction object+=Object property+=Property?)*
		public Group getGroup() { return cGroup; }
		
		//object+=Object
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }
		
		//Object
		public RuleCall getObjectObjectParserRuleCall_0_0() { return cObjectObjectParserRuleCall_0_0; }
		
		//property+=Property?
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_1_0() { return cPropertyPropertyParserRuleCall_1_0; }
		
		//(relConj+=RelConjunction object+=Object property+=Property?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//relConj+=RelConjunction
		public Assignment getRelConjAssignment_2_0() { return cRelConjAssignment_2_0; }
		
		//RelConjunction
		public RuleCall getRelConjRelConjunctionParserRuleCall_2_0_0() { return cRelConjRelConjunctionParserRuleCall_2_0_0; }
		
		//object+=Object
		public Assignment getObjectAssignment_2_1() { return cObjectAssignment_2_1; }
		
		//Object
		public RuleCall getObjectObjectParserRuleCall_2_1_0() { return cObjectObjectParserRuleCall_2_1_0; }
		
		//property+=Property?
		public Assignment getPropertyAssignment_2_2() { return cPropertyAssignment_2_2; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_2_2_0() { return cPropertyPropertyParserRuleCall_2_2_0; }
	}
	public class ConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Constraints");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTimeConstraintAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTimeConstraintTimeConstraintParserRuleCall_0_0 = (RuleCall)cTimeConstraintAssignment_0.eContents().get(0);
		private final Assignment cConstraintAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstraintConstraintParserRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		
		///*Properties:
		//	(properties+=Property) (conjunction+=Conjunction properties+=Property)* 
		//;*/ /* =========== CONSTRAINTS =========== */ Constraints:
		//	timeConstraint=TimeConstraint | constraint=Constraint;
		@Override public ParserRule getRule() { return rule; }
		
		//timeConstraint=TimeConstraint | constraint=Constraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//timeConstraint=TimeConstraint
		public Assignment getTimeConstraintAssignment_0() { return cTimeConstraintAssignment_0; }
		
		//TimeConstraint
		public RuleCall getTimeConstraintTimeConstraintParserRuleCall_0_0() { return cTimeConstraintTimeConstraintParserRuleCall_0_0; }
		
		//constraint=Constraint
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_1_0() { return cConstraintConstraintParserRuleCall_1_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrdinatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrdinatorConstraintOrdinatorsParserRuleCall_0_0 = (RuleCall)cOrdinatorAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConstraintAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConstraintObjectConstraintParserRuleCall_1_0_0 = (RuleCall)cConstraintAssignment_1_0.eContents().get(0);
		private final Assignment cConstraintAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstraintUnitConstraintsParserRuleCall_1_1_0 = (RuleCall)cConstraintAssignment_1_1.eContents().get(0);
		private final Assignment cConstraintAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cConstraintSetConstraintParserRuleCall_1_2_0 = (RuleCall)cConstraintAssignment_1_2.eContents().get(0);
		
		//Constraint:
		//	ordinator=ConstraintOrdinators (constraint=ObjectConstraint | constraint=UnitConstraints | constraint=SetConstraint);
		@Override public ParserRule getRule() { return rule; }
		
		//ordinator=ConstraintOrdinators (constraint=ObjectConstraint | constraint=UnitConstraints | constraint=SetConstraint)
		public Group getGroup() { return cGroup; }
		
		//ordinator=ConstraintOrdinators
		public Assignment getOrdinatorAssignment_0() { return cOrdinatorAssignment_0; }
		
		//ConstraintOrdinators
		public RuleCall getOrdinatorConstraintOrdinatorsParserRuleCall_0_0() { return cOrdinatorConstraintOrdinatorsParserRuleCall_0_0; }
		
		//constraint=ObjectConstraint | constraint=UnitConstraints | constraint=SetConstraint
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//constraint=ObjectConstraint
		public Assignment getConstraintAssignment_1_0() { return cConstraintAssignment_1_0; }
		
		//ObjectConstraint
		public RuleCall getConstraintObjectConstraintParserRuleCall_1_0_0() { return cConstraintObjectConstraintParserRuleCall_1_0_0; }
		
		//constraint=UnitConstraints
		public Assignment getConstraintAssignment_1_1() { return cConstraintAssignment_1_1; }
		
		//UnitConstraints
		public RuleCall getConstraintUnitConstraintsParserRuleCall_1_1_0() { return cConstraintUnitConstraintsParserRuleCall_1_1_0; }
		
		//constraint=SetConstraint
		public Assignment getConstraintAssignment_1_2() { return cConstraintAssignment_1_2; }
		
		//SetConstraint
		public RuleCall getConstraintSetConstraintParserRuleCall_1_2_0() { return cConstraintSetConstraintParserRuleCall_1_2_0; }
	}
	public class ConstraintOrdinatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ConstraintOrdinators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStuffingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStuffingStuffWordParserRuleCall_0_0 = (RuleCall)cStuffingAssignment_0.eContents().get(0);
		private final Assignment cAdverbialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdverbialAdverbialParserRuleCall_1_0 = (RuleCall)cAdverbialAssignment_1.eContents().get(0);
		private final Assignment cComperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComperatorComperatorsParserRuleCall_2_0 = (RuleCall)cComperatorAssignment_2.eContents().get(0);
		
		//ConstraintOrdinators:
		//	stuffing=StuffWord? adverbial=Adverbial comperator=Comperators?;
		@Override public ParserRule getRule() { return rule; }
		
		//stuffing=StuffWord? adverbial=Adverbial comperator=Comperators?
		public Group getGroup() { return cGroup; }
		
		//stuffing=StuffWord?
		public Assignment getStuffingAssignment_0() { return cStuffingAssignment_0; }
		
		//StuffWord
		public RuleCall getStuffingStuffWordParserRuleCall_0_0() { return cStuffingStuffWordParserRuleCall_0_0; }
		
		//adverbial=Adverbial
		public Assignment getAdverbialAssignment_1() { return cAdverbialAssignment_1; }
		
		//Adverbial
		public RuleCall getAdverbialAdverbialParserRuleCall_1_0() { return cAdverbialAdverbialParserRuleCall_1_0; }
		
		//comperator=Comperators?
		public Assignment getComperatorAssignment_2() { return cComperatorAssignment_2; }
		
		//Comperators
		public RuleCall getComperatorComperatorsParserRuleCall_2_0() { return cComperatorComperatorsParserRuleCall_2_0; }
	}
	public class SetConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.SetConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSetAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSetObjectSetParserRuleCall_0_0 = (RuleCall)cSetAssignment_0.eContents().get(0);
		private final Assignment cSetAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSetValueSetParserRuleCall_1_0 = (RuleCall)cSetAssignment_1.eContents().get(0);
		
		//SetConstraint:
		//	set=ObjectSet | set=ValueSet;
		@Override public ParserRule getRule() { return rule; }
		
		////Difference between ObjectSet and Value set in order to exclude a mixture of both in a single set
		//set=ObjectSet | set=ValueSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////Difference between ObjectSet and Value set in order to exclude a mixture of both in a single set
		//set=ObjectSet
		public Assignment getSetAssignment_0() { return cSetAssignment_0; }
		
		//ObjectSet
		public RuleCall getSetObjectSetParserRuleCall_0_0() { return cSetObjectSetParserRuleCall_0_0; }
		
		//set=ValueSet
		public Assignment getSetAssignment_1() { return cSetAssignment_1; }
		
		//ValueSet
		public RuleCall getSetValueSetParserRuleCall_1_0() { return cSetValueSetParserRuleCall_1_0; }
	}
	public class TimeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.TimeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrdinatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrdinatorConstraintOrdinatorsParserRuleCall_0_0 = (RuleCall)cOrdinatorAssignment_0.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitTimeUnitsParserRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//TimeConstraint:
		//	ordinator=ConstraintOrdinators time=INT unit=TimeUnits;
		@Override public ParserRule getRule() { return rule; }
		
		//ordinator=ConstraintOrdinators time=INT unit=TimeUnits
		public Group getGroup() { return cGroup; }
		
		//ordinator=ConstraintOrdinators
		public Assignment getOrdinatorAssignment_0() { return cOrdinatorAssignment_0; }
		
		//ConstraintOrdinators
		public RuleCall getOrdinatorConstraintOrdinatorsParserRuleCall_0_0() { return cOrdinatorConstraintOrdinatorsParserRuleCall_0_0; }
		
		//time=INT
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_1_0() { return cTimeINTTerminalRuleCall_1_0; }
		
		//unit=TimeUnits
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//TimeUnits
		public RuleCall getUnitTimeUnitsParserRuleCall_2_0() { return cUnitTimeUnitsParserRuleCall_2_0; }
	}
	public class ObjectConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ObjectConstraint");
		private final Assignment cObjectAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cObjectObjectParserRuleCall_0 = (RuleCall)cObjectAssignment.eContents().get(0);
		
		//ObjectConstraint:
		//	object=Object;
		@Override public ParserRule getRule() { return rule; }
		
		//object=Object
		public Assignment getObjectAssignment() { return cObjectAssignment; }
		
		//Object
		public RuleCall getObjectObjectParserRuleCall_0() { return cObjectObjectParserRuleCall_0; }
	}
	public class UnitConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.UnitConstraints");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleValueConstraintsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntervallConstraintsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnitConstraints:
		//	SingleValueConstraints | IntervallConstraints;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleValueConstraints | IntervallConstraints
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleValueConstraints
		public RuleCall getSingleValueConstraintsParserRuleCall_0() { return cSingleValueConstraintsParserRuleCall_0; }
		
		//IntervallConstraints
		public RuleCall getIntervallConstraintsParserRuleCall_1() { return cIntervallConstraintsParserRuleCall_1; }
	}
	public class IntervallConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.IntervallConstraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerValueParserRuleCall_1_0 = (RuleCall)cLowerAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHigherAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHigherValueParserRuleCall_3_0 = (RuleCall)cHigherAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IntervallConstraints:
		//	'[' lower=Value ',' higher=Value ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' lower=Value ',' higher=Value ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//lower=Value
		public Assignment getLowerAssignment_1() { return cLowerAssignment_1; }
		
		//Value
		public RuleCall getLowerValueParserRuleCall_1_0() { return cLowerValueParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//higher=Value
		public Assignment getHigherAssignment_3() { return cHigherAssignment_3; }
		
		//Value
		public RuleCall getHigherValueParserRuleCall_3_0() { return cHigherValueParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class SingleValueConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.SingleValueConstraints");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SingleValueConstraints:
		//	value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Value
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_0() { return cValueValueParserRuleCall_0; }
	}
	public class ValueSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ValueSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsValueParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsValueParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* =========== VALUES =========== */ ValueSet:
		//	'{' elements+=Value (';' elements+=Value)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' elements+=Value (';' elements+=Value)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//elements+=Value
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Value
		public RuleCall getElementsValueParserRuleCall_1_0() { return cElementsValueParserRuleCall_1_0; }
		
		//(';' elements+=Value)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//elements+=Value
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//Value
		public RuleCall getElementsValueParserRuleCall_2_1_0() { return cElementsValueParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ObjectSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ObjectSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsActorParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsActorParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectSet:
		//	'{' elements+=Actor (';' elements+=Actor)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' elements+=Actor (';' elements+=Actor)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//elements+=Actor
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Actor
		public RuleCall getElementsActorParserRuleCall_1_0() { return cElementsActorParserRuleCall_1_0; }
		
		//(';' elements+=Actor)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//elements+=Actor
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//Actor
		public RuleCall getElementsActorParserRuleCall_2_1_0() { return cElementsActorParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	IntValue | FloatValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | FloatValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.IntValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		private final Assignment cObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectWORDParserRuleCall_2_0 = (RuleCall)cObjectAssignment_2.eContents().get(0);
		
		//IntValue:
		//	value=INT unit=Unit? object+=WORD*;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT unit=Unit? object+=WORD*
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//unit=Unit?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_0() { return cUnitUnitParserRuleCall_1_0; }
		
		//object+=WORD*
		public Assignment getObjectAssignment_2() { return cObjectAssignment_2; }
		
		//WORD
		public RuleCall getObjectWORDParserRuleCall_2_0() { return cObjectWORDParserRuleCall_2_0; }
	}
	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.FloatValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueFLOATParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		private final Assignment cObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectWORDParserRuleCall_2_0 = (RuleCall)cObjectAssignment_2.eContents().get(0);
		
		//FloatValue:
		//	value=FLOAT unit=Unit? object+=WORD*;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT unit=Unit? object+=WORD*
		public Group getGroup() { return cGroup; }
		
		//value=FLOAT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//FLOAT
		public RuleCall getValueFLOATParserRuleCall_0_0() { return cValueFLOATParserRuleCall_0_0; }
		
		//unit=Unit?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_0() { return cUnitUnitParserRuleCall_1_0; }
		
		//object+=WORD*
		public Assignment getObjectAssignment_2() { return cObjectAssignment_2; }
		
		//WORD
		public RuleCall getObjectWORDParserRuleCall_2_0() { return cObjectWORDParserRuleCall_2_0; }
	}
	public class ReqIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ReqID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		///* =========== BASIC TEXT BLOCKS / WORDS =========== */ ReqID:
		//	(ID | INT) ('.' | INT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | INT) ('.' | INT)*
		public Group getGroup() { return cGroup; }
		
		//ID | INT
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//('.' | INT)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class WORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.WORD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////just extension to allow naming with '-' like ego-lane -> ITS NOT MATCHED PROPERLY
		//WORD:
		//	ID ('-' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('-' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('-' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class RelationDelimiterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.RelationDelimiter");
		private final Keyword cRelationKeyword = (Keyword)rule.eContents().get(1);
		
		///* =========== BASIC SYNTAX =========== */ RelationDelimiter:
		//	'relation'
		//	//'in' 'relation' 'to'  | 'relative' 'to' //mutiple word relation leads to false identification of properties
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'relation'
		public Keyword getRelationKeyword() { return cRelationKeyword; }
	}
	public class AuxiliaryVerbElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.AuxiliaryVerb");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAreKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBeenKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHasKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHaveKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDoKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDoesKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//AuxiliaryVerb:
		//	'is' | 'are' | 'be' | 'been' | 'has' | 'have' | 'do' | 'does';
		@Override public ParserRule getRule() { return rule; }
		
		//'is' | 'are' | 'be' | 'been' | 'has' | 'have' | 'do' | 'does'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'is'
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }
		
		//'are'
		public Keyword getAreKeyword_1() { return cAreKeyword_1; }
		
		//'be'
		public Keyword getBeKeyword_2() { return cBeKeyword_2; }
		
		//'been'
		public Keyword getBeenKeyword_3() { return cBeenKeyword_3; }
		
		//'has'
		public Keyword getHasKeyword_4() { return cHasKeyword_4; }
		
		//'have'
		public Keyword getHaveKeyword_5() { return cHaveKeyword_5; }
		
		//'do'
		public Keyword getDoKeyword_6() { return cDoKeyword_6; }
		
		//'does'
		public Keyword getDoesKeyword_7() { return cDoesKeyword_7; }
	}
	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Conjunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Conjunction:
		//	'and' | 'or';
		@Override public ParserRule getRule() { return rule; }
		
		//'and' | 'or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}
	public class RelConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.RelConjunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAnd_toKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOr_toKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//RelConjunction:
		//	'and_to' | 'or_to';
		@Override public ParserRule getRule() { return rule; }
		
		//'and_to' | 'or_to'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and_to'
		public Keyword getAnd_toKeyword_0() { return cAnd_toKeyword_0; }
		
		//'or_to'
		public Keyword getOr_toKeyword_1() { return cOr_toKeyword_1; }
	}
	public class ComperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Comperators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cThanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Comperators:
		//	'than' | 'as' | 'to' | 'of';
		@Override public ParserRule getRule() { return rule; }
		
		//'than' | 'as' | 'to' | 'of'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'than'
		public Keyword getThanKeyword_0() { return cThanKeyword_0; }
		
		//'as'
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
	}
	public class SizeAdverbialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.SizeAdverbial");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHigherKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMoreKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLargerKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSmallerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAs_long_asKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//SizeAdverbial:
		//	'higher' | 'less' | 'more' | 'larger' | 'smaller' | 'as_long_as';
		@Override public ParserRule getRule() { return rule; }
		
		//'higher' | 'less' | 'more' | 'larger' | 'smaller' | 'as_long_as'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'higher'
		public Keyword getHigherKeyword_0() { return cHigherKeyword_0; }
		
		//'less'
		public Keyword getLessKeyword_1() { return cLessKeyword_1; }
		
		//'more'
		public Keyword getMoreKeyword_2() { return cMoreKeyword_2; }
		
		//'larger'
		public Keyword getLargerKeyword_3() { return cLargerKeyword_3; }
		
		//'smaller'
		public Keyword getSmallerKeyword_4() { return cSmallerKeyword_4; }
		
		//'as_long_as'
		public Keyword getAs_long_asKeyword_5() { return cAs_long_asKeyword_5; }
	}
	public class PositionAdverbialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.PositionAdverbial");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBetweenKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAboveKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBelowKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cInKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cWithinKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cIn_front_ofKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBehindKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOutKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cUnderKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//PositionAdverbial:
		//	'between' | 'next' | 'on' | 'above' | 'below' | 'in' | 'within' | 'in_front_of' | 'behind' | 'out' | 'under';
		@Override public ParserRule getRule() { return rule; }
		
		//'between' | 'next' | 'on' | 'above' | 'below' | 'in' | 'within' | 'in_front_of' | 'behind' | 'out' | 'under'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'between'
		public Keyword getBetweenKeyword_0() { return cBetweenKeyword_0; }
		
		//'next'
		public Keyword getNextKeyword_1() { return cNextKeyword_1; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//'above'
		public Keyword getAboveKeyword_3() { return cAboveKeyword_3; }
		
		//'below'
		public Keyword getBelowKeyword_4() { return cBelowKeyword_4; }
		
		//'in'
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//'within'
		public Keyword getWithinKeyword_6() { return cWithinKeyword_6; }
		
		//'in_front_of'
		public Keyword getIn_front_ofKeyword_7() { return cIn_front_ofKeyword_7; }
		
		//'behind'
		public Keyword getBehindKeyword_8() { return cBehindKeyword_8; }
		
		//'out'
		public Keyword getOutKeyword_9() { return cOutKeyword_9; }
		
		//'under'
		public Keyword getUnderKeyword_10() { return cUnderKeyword_10; }
	}
	public class ComparisonAdverbialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ComparisonAdverbial");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFasterKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSlowerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBetterKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cByKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cToKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ComparisonAdverbial:
		//	'equal' | 'faster' | 'slower' | 'better' | 'by' | 'to';
		@Override public ParserRule getRule() { return rule; }
		
		//'equal' | 'faster' | 'slower' | 'better' | 'by' | 'to'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'equal'
		public Keyword getEqualKeyword_0() { return cEqualKeyword_0; }
		
		//'faster'
		public Keyword getFasterKeyword_1() { return cFasterKeyword_1; }
		
		//'slower'
		public Keyword getSlowerKeyword_2() { return cSlowerKeyword_2; }
		
		//'better'
		public Keyword getBetterKeyword_3() { return cBetterKeyword_3; }
		
		//'by'
		public Keyword getByKeyword_4() { return cByKeyword_4; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
	}
	public class QuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Quantification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEveryKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEachKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cWholeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAnyKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSeveralKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEitherKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAllKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEveryKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cEachKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cWholeKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cAnyKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSeveralKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cEitherKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//Quantification:
		//	'all' | 'every' | 'each' | 'whole' | 'any' | 'several' | 'either' |
		//	'All' | 'Every' | 'Each' | 'Whole' | 'Any' | 'Several' | 'Either';
		@Override public ParserRule getRule() { return rule; }
		
		//'all' | 'every' | 'each' | 'whole' | 'any' | 'several' | 'either' | 'All' | 'Every' | 'Each' | 'Whole' | 'Any' |
		//'Several' | 'Either'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'all'
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }
		
		//'every'
		public Keyword getEveryKeyword_1() { return cEveryKeyword_1; }
		
		//'each'
		public Keyword getEachKeyword_2() { return cEachKeyword_2; }
		
		//'whole'
		public Keyword getWholeKeyword_3() { return cWholeKeyword_3; }
		
		//'any'
		public Keyword getAnyKeyword_4() { return cAnyKeyword_4; }
		
		//'several'
		public Keyword getSeveralKeyword_5() { return cSeveralKeyword_5; }
		
		//'either'
		public Keyword getEitherKeyword_6() { return cEitherKeyword_6; }
		
		//'All'
		public Keyword getAllKeyword_7() { return cAllKeyword_7; }
		
		//'Every'
		public Keyword getEveryKeyword_8() { return cEveryKeyword_8; }
		
		//'Each'
		public Keyword getEachKeyword_9() { return cEachKeyword_9; }
		
		//'Whole'
		public Keyword getWholeKeyword_10() { return cWholeKeyword_10; }
		
		//'Any'
		public Keyword getAnyKeyword_11() { return cAnyKeyword_11; }
		
		//'Several'
		public Keyword getSeveralKeyword_12() { return cSeveralKeyword_12; }
		
		//'Either'
		public Keyword getEitherKeyword_13() { return cEitherKeyword_13; }
	}
	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Negation");
		private final Keyword cNotKeyword = (Keyword)rule.eContents().get(1);
		
		//Negation:
		//	'not' //| 'donot' | 'doesnot' | 'doesn\'t' | 'don\'t'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'not'
		public Keyword getNotKeyword() { return cNotKeyword; }
	}
	public class AuxiliaryVerbNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.AuxiliaryVerbNegation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDoesnTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDonTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIsnTKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cArenTKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//AuxiliaryVerbNegation:
		//	'doesn´t' | 'don´t' | 'isn´t' | 'aren´t';
		@Override public ParserRule getRule() { return rule; }
		
		//'doesn´t' | 'don´t' | 'isn´t' | 'aren´t'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'doesn´t'
		public Keyword getDoesnTKeyword_0() { return cDoesnTKeyword_0; }
		
		//'don´t'
		public Keyword getDonTKeyword_1() { return cDonTKeyword_1; }
		
		//'isn´t'
		public Keyword getIsnTKeyword_2() { return cIsnTKeyword_2; }
		
		//'aren´t'
		public Keyword getArenTKeyword_3() { return cArenTKeyword_3; }
	}
	public class ArticlesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Articles");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAnKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTheKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAnKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Articles:
		//	'the' | 'a' | 'an' |
		//	'The' | 'A' | 'An';
		@Override public ParserRule getRule() { return rule; }
		
		//'the' | 'a' | 'an' | 'The' | 'A' | 'An'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'a'
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//'an'
		public Keyword getAnKeyword_2() { return cAnKeyword_2; }
		
		//'The'
		public Keyword getTheKeyword_3() { return cTheKeyword_3; }
		
		//'A'
		public Keyword getAKeyword_4() { return cAKeyword_4; }
		
		//'An'
		public Keyword getAnKeyword_5() { return cAnKeyword_5; }
	}
	public class RefArticlesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.RefArticles");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cThatKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cThatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cThisKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RefArticles:
		//	'that' | 'this' | 'That' | 'This';
		@Override public ParserRule getRule() { return rule; }
		
		//'that' | 'this' | 'That' | 'This'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'that'
		public Keyword getThatKeyword_0() { return cThatKeyword_0; }
		
		//'this'
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
		
		//'That'
		public Keyword getThatKeyword_2() { return cThatKeyword_2; }
		
		//'This'
		public Keyword getThisKeyword_3() { return cThisKeyword_3; }
	}
	public class StuffWordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.StuffWord");
		private final Keyword cWithKeyword = (Keyword)rule.eContents().get(1);
		
		//StuffWord:
		//	'with';
		@Override public ParserRule getRule() { return rule; }
		
		//'with'
		public Keyword getWithKeyword() { return cWithKeyword; }
	}
	public class RelativePronounsSubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.RelativePronounsSubject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWhichKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWhoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cThatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// Separation of Relative Pronouns due to impact on the following sentence structure
		//RelativePronounsSubject:
		//	'which' | 'who' | 'that';
		@Override public ParserRule getRule() { return rule; }
		
		//'which' | 'who' | 'that'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'which'
		public Keyword getWhichKeyword_0() { return cWhichKeyword_0; }
		
		//'who'
		public Keyword getWhoKeyword_1() { return cWhoKeyword_1; }
		
		//'that'
		public Keyword getThatKeyword_2() { return cThatKeyword_2; }
	}
	public class RelativePronounsObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.RelativePronounsObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWhoseKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWhomKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//RelativePronounsObject:
		//	'whose' | 'whom';
		@Override public ParserRule getRule() { return rule; }
		
		//'whose' | 'whom'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'whose'
		public Keyword getWhoseKeyword_0() { return cWhoseKeyword_0; }
		
		//'whom'
		public Keyword getWhomKeyword_1() { return cWhomKeyword_1; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		///* =========== BASIC UNITS =========== */ FLOAT ecore::EFloat:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLengthUnitsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPresureUnitsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHeatUnitsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMassUnitsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVelcoityUnitsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCuvatureParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Unit:
		//	LengthUnits | PresureUnits | HeatUnits | MassUnits | VelcoityUnits | Cuvature;
		@Override public ParserRule getRule() { return rule; }
		
		//LengthUnits | PresureUnits | HeatUnits | MassUnits | VelcoityUnits | Cuvature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LengthUnits
		public RuleCall getLengthUnitsParserRuleCall_0() { return cLengthUnitsParserRuleCall_0; }
		
		//PresureUnits
		public RuleCall getPresureUnitsParserRuleCall_1() { return cPresureUnitsParserRuleCall_1; }
		
		//HeatUnits
		public RuleCall getHeatUnitsParserRuleCall_2() { return cHeatUnitsParserRuleCall_2; }
		
		//MassUnits
		public RuleCall getMassUnitsParserRuleCall_3() { return cMassUnitsParserRuleCall_3; }
		
		//VelcoityUnits
		public RuleCall getVelcoityUnitsParserRuleCall_4() { return cVelcoityUnitsParserRuleCall_4; }
		
		//Cuvature
		public RuleCall getCuvatureParserRuleCall_5() { return cCuvatureParserRuleCall_5; }
	}
	public class CuvatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Cuvature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRadMKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDegreeSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRadKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Cuvature:
		//	'rad/m' | '°' | 'rad' | '°/m';
		@Override public ParserRule getRule() { return rule; }
		
		//'rad/m' | '°' | 'rad' | '°/m'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'rad/m'
		public Keyword getRadMKeyword_0() { return cRadMKeyword_0; }
		
		//'°'
		public Keyword getDegreeSignKeyword_1() { return cDegreeSignKeyword_1; }
		
		//'rad'
		public Keyword getRadKeyword_2() { return cRadKeyword_2; }
		
		//'°/m'
		public Keyword getMKeyword_3() { return cMKeyword_3; }
	}
	public class VelcoityUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.VelcoityUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cKnotsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cKmHKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMMinKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//VelcoityUnits:
		//	'm/s' | 'knots' | 'km/h' | 'm/min';
		@Override public ParserRule getRule() { return rule; }
		
		//'m/s' | 'knots' | 'km/h' | 'm/min'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'m/s'
		public Keyword getMSKeyword_0() { return cMSKeyword_0; }
		
		//'knots'
		public Keyword getKnotsKeyword_1() { return cKnotsKeyword_1; }
		
		//'km/h'
		public Keyword getKmHKeyword_2() { return cKmHKeyword_2; }
		
		//'m/min'
		public Keyword getMMinKeyword_3() { return cMMinKeyword_3; }
	}
	public class MassUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.MassUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cKgKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMgKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//MassUnits:
		//	'kg' | 'g' | 'mg' | 't';
		@Override public ParserRule getRule() { return rule; }
		
		//'kg' | 'g' | 'mg' | 't'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'kg'
		public Keyword getKgKeyword_0() { return cKgKeyword_0; }
		
		//'g'
		public Keyword getGKeyword_1() { return cGKeyword_1; }
		
		//'mg'
		public Keyword getMgKeyword_2() { return cMgKeyword_2; }
		
		//'t'
		public Keyword getTKeyword_3() { return cTKeyword_3; }
	}
	public class HeatUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.HeatUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//HeatUnits:
		//	'C' | 'F';
		@Override public ParserRule getRule() { return rule; }
		
		//'C' | 'F'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'C'
		public Keyword getCKeyword_0() { return cCKeyword_0; }
		
		//'F'
		public Keyword getFKeyword_1() { return cFKeyword_1; }
	}
	public class PresureUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.PresureUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBarKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHPaKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//PresureUnits:
		//	'bar' | 'Pa' | 'hPa';
		@Override public ParserRule getRule() { return rule; }
		
		//'bar' | 'Pa' | 'hPa'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'bar'
		public Keyword getBarKeyword_0() { return cBarKeyword_0; }
		
		//'Pa'
		public Keyword getPaKeyword_1() { return cPaKeyword_1; }
		
		//'hPa'
		public Keyword getHPaKeyword_2() { return cHPaKeyword_2; }
	}
	public class LengthUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.LengthUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cKmKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCmKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMmKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNmKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//LengthUnits:
		//	'm' | 'f' | 'km' | 'cm' | 'mm' | 'nm';
		@Override public ParserRule getRule() { return rule; }
		
		//'m' | 'f' | 'km' | 'cm' | 'mm' | 'nm'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'m'
		public Keyword getMKeyword_0() { return cMKeyword_0; }
		
		//'f'
		public Keyword getFKeyword_1() { return cFKeyword_1; }
		
		//'km'
		public Keyword getKmKeyword_2() { return cKmKeyword_2; }
		
		//'cm'
		public Keyword getCmKeyword_3() { return cCmKeyword_3; }
		
		//'mm'
		public Keyword getMmKeyword_4() { return cMmKeyword_4; }
		
		//'nm'
		public Keyword getNmKeyword_5() { return cNmKeyword_5; }
	}
	public class TimeUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.TimeUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSecKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSecondKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSecondsKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cMinuteKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMinutesKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMinKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cHourKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cHoursKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cHKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cDayKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cDaysKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cDKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cMonthKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cMonthsKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cMonKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cYearKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cYearsKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cYKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		
		//TimeUnits:
		//	'ns' | 'ms' | 's' | 'sec' | 'second' | 'seconds' | 'minute' | 'minutes' | 'min' | 'hour' | 'hours' | 'h' | 'day' |
		//	'days' | 'd' | 'month' | 'months' | 'mon' | 'year' | 'years' | 'y';
		@Override public ParserRule getRule() { return rule; }
		
		//'ns' | 'ms' | 's' | 'sec' | 'second' | 'seconds' | 'minute' | 'minutes' | 'min' | 'hour' | 'hours' | 'h' | 'day' |
		//'days' | 'd' | 'month' | 'months' | 'mon' | 'year' | 'years' | 'y'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ns'
		public Keyword getNsKeyword_0() { return cNsKeyword_0; }
		
		//'ms'
		public Keyword getMsKeyword_1() { return cMsKeyword_1; }
		
		//'s'
		public Keyword getSKeyword_2() { return cSKeyword_2; }
		
		//'sec'
		public Keyword getSecKeyword_3() { return cSecKeyword_3; }
		
		//'second'
		public Keyword getSecondKeyword_4() { return cSecondKeyword_4; }
		
		//'seconds'
		public Keyword getSecondsKeyword_5() { return cSecondsKeyword_5; }
		
		//'minute'
		public Keyword getMinuteKeyword_6() { return cMinuteKeyword_6; }
		
		//'minutes'
		public Keyword getMinutesKeyword_7() { return cMinutesKeyword_7; }
		
		//'min'
		public Keyword getMinKeyword_8() { return cMinKeyword_8; }
		
		//'hour'
		public Keyword getHourKeyword_9() { return cHourKeyword_9; }
		
		//'hours'
		public Keyword getHoursKeyword_10() { return cHoursKeyword_10; }
		
		//'h'
		public Keyword getHKeyword_11() { return cHKeyword_11; }
		
		//'day'
		public Keyword getDayKeyword_12() { return cDayKeyword_12; }
		
		//'days'
		public Keyword getDaysKeyword_13() { return cDaysKeyword_13; }
		
		//'d'
		public Keyword getDKeyword_14() { return cDKeyword_14; }
		
		//'month'
		public Keyword getMonthKeyword_15() { return cMonthKeyword_15; }
		
		//'months'
		public Keyword getMonthsKeyword_16() { return cMonthsKeyword_16; }
		
		//'mon'
		public Keyword getMonKeyword_17() { return cMonKeyword_17; }
		
		//'year'
		public Keyword getYearKeyword_18() { return cYearKeyword_18; }
		
		//'years'
		public Keyword getYearsKeyword_19() { return cYearsKeyword_19; }
		
		//'y'
		public Keyword getYKeyword_20() { return cYKeyword_20; }
	}
	
	public class ModalityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Modality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSHALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSHALLShallKeyword_0_0 = (Keyword)cSHALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSHOULDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSHOULDShouldKeyword_1_0 = (Keyword)cSHOULDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWILLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWILLWillKeyword_2_0 = (Keyword)cWILLEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWOULDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWOULDWouldKeyword_3_0 = (Keyword)cWOULDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCANEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCANCanKeyword_4_0 = (Keyword)cCANEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCOULDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCOULDCouldKeyword_5_0 = (Keyword)cCOULDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cMUSTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cMUSTMustKeyword_6_0 = (Keyword)cMUSTEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Modality:
		//	SHALL='shall' | SHOULD='should' | WILL='will' | WOULD='would' | CAN='can' | COULD='could' | MUST='must';
		public EnumRule getRule() { return rule; }
		
		//SHALL='shall' | SHOULD='should' | WILL='will' | WOULD='would' | CAN='can' | COULD='could' | MUST='must'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SHALL='shall'
		public EnumLiteralDeclaration getSHALLEnumLiteralDeclaration_0() { return cSHALLEnumLiteralDeclaration_0; }
		
		//'shall'
		public Keyword getSHALLShallKeyword_0_0() { return cSHALLShallKeyword_0_0; }
		
		//SHOULD='should'
		public EnumLiteralDeclaration getSHOULDEnumLiteralDeclaration_1() { return cSHOULDEnumLiteralDeclaration_1; }
		
		//'should'
		public Keyword getSHOULDShouldKeyword_1_0() { return cSHOULDShouldKeyword_1_0; }
		
		//WILL='will'
		public EnumLiteralDeclaration getWILLEnumLiteralDeclaration_2() { return cWILLEnumLiteralDeclaration_2; }
		
		//'will'
		public Keyword getWILLWillKeyword_2_0() { return cWILLWillKeyword_2_0; }
		
		//WOULD='would'
		public EnumLiteralDeclaration getWOULDEnumLiteralDeclaration_3() { return cWOULDEnumLiteralDeclaration_3; }
		
		//'would'
		public Keyword getWOULDWouldKeyword_3_0() { return cWOULDWouldKeyword_3_0; }
		
		//CAN='can'
		public EnumLiteralDeclaration getCANEnumLiteralDeclaration_4() { return cCANEnumLiteralDeclaration_4; }
		
		//'can'
		public Keyword getCANCanKeyword_4_0() { return cCANCanKeyword_4_0; }
		
		//COULD='could'
		public EnumLiteralDeclaration getCOULDEnumLiteralDeclaration_5() { return cCOULDEnumLiteralDeclaration_5; }
		
		//'could'
		public Keyword getCOULDCouldKeyword_5_0() { return cCOULDCouldKeyword_5_0; }
		
		//MUST='must'
		public EnumLiteralDeclaration getMUSTEnumLiteralDeclaration_6() { return cMUSTEnumLiteralDeclaration_6; }
		
		//'must'
		public Keyword getMUSTMustKeyword_6_0() { return cMUSTMustKeyword_6_0; }
	}
	public class ModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGLOBALLYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGLOBALLYGloballyKeyword_0_0 = (Keyword)cGLOBALLYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGLOBALLY_LEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGLOBALLY_LGloballyKeyword_1_0 = (Keyword)cGLOBALLY_LEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cALWAYSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cALWAYSAlwaysKeyword_2_0 = (Keyword)cALWAYSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cALWAYS_LEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cALWAYS_LAlwaysKeyword_3_0 = (Keyword)cALWAYS_LEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSOMETIMESEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSOMETIMESSometimesKeyword_4_0 = (Keyword)cSOMETIMESEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSOMETIMES_LEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSOMETIMES_LSometimesKeyword_5_0 = (Keyword)cSOMETIMES_LEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEVENTUALLYEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEVENTUALLYEventuallyKeyword_6_0 = (Keyword)cEVENTUALLYEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cEVENTUALLY_LEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cEVENTUALLY_LEventuallyKeyword_7_0 = (Keyword)cEVENTUALLY_LEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Modifier:
		//	GLOBALLY='Globally' | GLOBALLY_L='globally' | ALWAYS='Always' | ALWAYS_L='always' | SOMETIMES='Sometimes' |
		//	SOMETIMES_L='sometimes' | EVENTUALLY='Eventually' | EVENTUALLY_L='eventually';
		public EnumRule getRule() { return rule; }
		
		//GLOBALLY='Globally' | GLOBALLY_L='globally' | ALWAYS='Always' | ALWAYS_L='always' | SOMETIMES='Sometimes' |
		//SOMETIMES_L='sometimes' | EVENTUALLY='Eventually' | EVENTUALLY_L='eventually'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GLOBALLY='Globally'
		public EnumLiteralDeclaration getGLOBALLYEnumLiteralDeclaration_0() { return cGLOBALLYEnumLiteralDeclaration_0; }
		
		//'Globally'
		public Keyword getGLOBALLYGloballyKeyword_0_0() { return cGLOBALLYGloballyKeyword_0_0; }
		
		//GLOBALLY_L='globally'
		public EnumLiteralDeclaration getGLOBALLY_LEnumLiteralDeclaration_1() { return cGLOBALLY_LEnumLiteralDeclaration_1; }
		
		//'globally'
		public Keyword getGLOBALLY_LGloballyKeyword_1_0() { return cGLOBALLY_LGloballyKeyword_1_0; }
		
		//ALWAYS='Always'
		public EnumLiteralDeclaration getALWAYSEnumLiteralDeclaration_2() { return cALWAYSEnumLiteralDeclaration_2; }
		
		//'Always'
		public Keyword getALWAYSAlwaysKeyword_2_0() { return cALWAYSAlwaysKeyword_2_0; }
		
		//ALWAYS_L='always'
		public EnumLiteralDeclaration getALWAYS_LEnumLiteralDeclaration_3() { return cALWAYS_LEnumLiteralDeclaration_3; }
		
		//'always'
		public Keyword getALWAYS_LAlwaysKeyword_3_0() { return cALWAYS_LAlwaysKeyword_3_0; }
		
		//SOMETIMES='Sometimes'
		public EnumLiteralDeclaration getSOMETIMESEnumLiteralDeclaration_4() { return cSOMETIMESEnumLiteralDeclaration_4; }
		
		//'Sometimes'
		public Keyword getSOMETIMESSometimesKeyword_4_0() { return cSOMETIMESSometimesKeyword_4_0; }
		
		//SOMETIMES_L='sometimes'
		public EnumLiteralDeclaration getSOMETIMES_LEnumLiteralDeclaration_5() { return cSOMETIMES_LEnumLiteralDeclaration_5; }
		
		//'sometimes'
		public Keyword getSOMETIMES_LSometimesKeyword_5_0() { return cSOMETIMES_LSometimesKeyword_5_0; }
		
		//EVENTUALLY='Eventually'
		public EnumLiteralDeclaration getEVENTUALLYEnumLiteralDeclaration_6() { return cEVENTUALLYEnumLiteralDeclaration_6; }
		
		//'Eventually'
		public Keyword getEVENTUALLYEventuallyKeyword_6_0() { return cEVENTUALLYEventuallyKeyword_6_0; }
		
		//EVENTUALLY_L='eventually'
		public EnumLiteralDeclaration getEVENTUALLY_LEnumLiteralDeclaration_7() { return cEVENTUALLY_LEnumLiteralDeclaration_7; }
		
		//'eventually'
		public Keyword getEVENTUALLY_LEventuallyKeyword_7_0() { return cEVENTUALLY_LEventuallyKeyword_7_0; }
	}
	public class ClauseOrdinatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ClauseOrdinator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIF_LEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIF_LIfKeyword_0_0 = (Keyword)cIF_LEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAFTER_LEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAFTER_LAfterKeyword_1_0 = (Keyword)cAFTER_LEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cONCE_LEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cONCE_LOnceKeyword_2_0 = (Keyword)cONCE_LEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWHEN_LEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWHEN_LWhenKeyword_3_0 = (Keyword)cWHEN_LEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWHENEVER_LEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWHENEVER_LWheneverKeyword_4_0 = (Keyword)cWHENEVER_LEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cWHILE_LEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cWHILE_LWhileKeyword_5_0 = (Keyword)cWHILE_LEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBEFORE_LEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBEFORE_LBeforeKeyword_6_0 = (Keyword)cBEFORE_LEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cUNTIL_LEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cUNTIL_LUntilKeyword_7_0 = (Keyword)cUNTIL_LEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cIFEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cIFIfKeyword_8_0 = (Keyword)cIFEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cAFTEREnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cAFTERAfterKeyword_9_0 = (Keyword)cAFTEREnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cONCEEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cONCEOnceKeyword_10_0 = (Keyword)cONCEEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cWHENEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cWHENWhenKeyword_11_0 = (Keyword)cWHENEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cWHENEVEREnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cWHENEVERWheneverKeyword_12_0 = (Keyword)cWHENEVEREnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cWHILEEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cWHILEWhileKeyword_13_0 = (Keyword)cWHILEEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cBEFOREEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cBEFOREBeforeKeyword_14_0 = (Keyword)cBEFOREEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cUNTILEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cUNTILUntilKeyword_15_0 = (Keyword)cUNTILEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum ClauseOrdinator:
		//	IF_L='if' | AFTER_L='after' | ONCE_L='once' | WHEN_L='when' | WHENEVER_L='whenever' | WHILE_L='while' |
		//	BEFORE_L='before' | UNTIL_L='until' |
		//	IF='If' | AFTER='After' | ONCE='Once' | WHEN='When' | WHENEVER='Whenever' | WHILE='While' | BEFORE='Before' |
		//	UNTIL='Until';
		public EnumRule getRule() { return rule; }
		
		//IF_L='if' | AFTER_L='after' | ONCE_L='once' | WHEN_L='when' | WHENEVER_L='whenever' | WHILE_L='while' |
		//BEFORE_L='before' | UNTIL_L='until' | IF='If' | AFTER='After' | ONCE='Once' | WHEN='When' | WHENEVER='Whenever' |
		//WHILE='While' | BEFORE='Before' | UNTIL='Until'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IF_L='if'
		public EnumLiteralDeclaration getIF_LEnumLiteralDeclaration_0() { return cIF_LEnumLiteralDeclaration_0; }
		
		//'if'
		public Keyword getIF_LIfKeyword_0_0() { return cIF_LIfKeyword_0_0; }
		
		//AFTER_L='after'
		public EnumLiteralDeclaration getAFTER_LEnumLiteralDeclaration_1() { return cAFTER_LEnumLiteralDeclaration_1; }
		
		//'after'
		public Keyword getAFTER_LAfterKeyword_1_0() { return cAFTER_LAfterKeyword_1_0; }
		
		//ONCE_L='once'
		public EnumLiteralDeclaration getONCE_LEnumLiteralDeclaration_2() { return cONCE_LEnumLiteralDeclaration_2; }
		
		//'once'
		public Keyword getONCE_LOnceKeyword_2_0() { return cONCE_LOnceKeyword_2_0; }
		
		//WHEN_L='when'
		public EnumLiteralDeclaration getWHEN_LEnumLiteralDeclaration_3() { return cWHEN_LEnumLiteralDeclaration_3; }
		
		//'when'
		public Keyword getWHEN_LWhenKeyword_3_0() { return cWHEN_LWhenKeyword_3_0; }
		
		//WHENEVER_L='whenever'
		public EnumLiteralDeclaration getWHENEVER_LEnumLiteralDeclaration_4() { return cWHENEVER_LEnumLiteralDeclaration_4; }
		
		//'whenever'
		public Keyword getWHENEVER_LWheneverKeyword_4_0() { return cWHENEVER_LWheneverKeyword_4_0; }
		
		//WHILE_L='while'
		public EnumLiteralDeclaration getWHILE_LEnumLiteralDeclaration_5() { return cWHILE_LEnumLiteralDeclaration_5; }
		
		//'while'
		public Keyword getWHILE_LWhileKeyword_5_0() { return cWHILE_LWhileKeyword_5_0; }
		
		//BEFORE_L='before'
		public EnumLiteralDeclaration getBEFORE_LEnumLiteralDeclaration_6() { return cBEFORE_LEnumLiteralDeclaration_6; }
		
		//'before'
		public Keyword getBEFORE_LBeforeKeyword_6_0() { return cBEFORE_LBeforeKeyword_6_0; }
		
		//UNTIL_L='until'
		public EnumLiteralDeclaration getUNTIL_LEnumLiteralDeclaration_7() { return cUNTIL_LEnumLiteralDeclaration_7; }
		
		//'until'
		public Keyword getUNTIL_LUntilKeyword_7_0() { return cUNTIL_LUntilKeyword_7_0; }
		
		//IF='If'
		public EnumLiteralDeclaration getIFEnumLiteralDeclaration_8() { return cIFEnumLiteralDeclaration_8; }
		
		//'If'
		public Keyword getIFIfKeyword_8_0() { return cIFIfKeyword_8_0; }
		
		//AFTER='After'
		public EnumLiteralDeclaration getAFTEREnumLiteralDeclaration_9() { return cAFTEREnumLiteralDeclaration_9; }
		
		//'After'
		public Keyword getAFTERAfterKeyword_9_0() { return cAFTERAfterKeyword_9_0; }
		
		//ONCE='Once'
		public EnumLiteralDeclaration getONCEEnumLiteralDeclaration_10() { return cONCEEnumLiteralDeclaration_10; }
		
		//'Once'
		public Keyword getONCEOnceKeyword_10_0() { return cONCEOnceKeyword_10_0; }
		
		//WHEN='When'
		public EnumLiteralDeclaration getWHENEnumLiteralDeclaration_11() { return cWHENEnumLiteralDeclaration_11; }
		
		//'When'
		public Keyword getWHENWhenKeyword_11_0() { return cWHENWhenKeyword_11_0; }
		
		//WHENEVER='Whenever'
		public EnumLiteralDeclaration getWHENEVEREnumLiteralDeclaration_12() { return cWHENEVEREnumLiteralDeclaration_12; }
		
		//'Whenever'
		public Keyword getWHENEVERWheneverKeyword_12_0() { return cWHENEVERWheneverKeyword_12_0; }
		
		//WHILE='While'
		public EnumLiteralDeclaration getWHILEEnumLiteralDeclaration_13() { return cWHILEEnumLiteralDeclaration_13; }
		
		//'While'
		public Keyword getWHILEWhileKeyword_13_0() { return cWHILEWhileKeyword_13_0; }
		
		//BEFORE='Before'
		public EnumLiteralDeclaration getBEFOREEnumLiteralDeclaration_14() { return cBEFOREEnumLiteralDeclaration_14; }
		
		//'Before'
		public Keyword getBEFOREBeforeKeyword_14_0() { return cBEFOREBeforeKeyword_14_0; }
		
		//UNTIL='Until'
		public EnumLiteralDeclaration getUNTILEnumLiteralDeclaration_15() { return cUNTILEnumLiteralDeclaration_15; }
		
		//'Until'
		public Keyword getUNTILUntilKeyword_15_0() { return cUNTILUntilKeyword_15_0; }
	}
	
	private final ModelElements pModel;
	private final RequirementElements pRequirement;
	private final RequirementTextElements pRequirementText;
	private final ConditionalClauseElements pConditionalClause;
	private final MainClauseElements pMainClause;
	private final ClausesElements pClauses;
	private final ClauseElements pClause;
	private final ModalitySentenceElements pModalitySentence;
	private final PredicateSentenceElements pPredicateSentence;
	private final ExistenceSentenceElements pExistenceSentence;
	private final PropertySentenceElements pPropertySentence;
	private final PropertyElements pProperty;
	private final SentenceBeginElements pSentenceBegin;
	private final SentenceEndingElements pSentenceEnding;
	private final RelativeClauseElements pRelativeClause;
	private final RelativeSentenceElements pRelativeSentence;
	private final ActorsElements pActors;
	private final ActorElements pActor;
	private final PredsElements pPreds;
	private final PredicateElements pPredicate;
	private final PredicateObjectElements pPredicateObject;
	private final ObjectElements pObject;
	private final PredOrObjectElements pPredOrObject;
	private final ExistencePrefaceElements pExistencePreface;
	private final AuxNegElements pAuxNeg;
	private final PreNominativeElements pPreNominative;
	private final AdverbialElements pAdverbial;
	private final RelationElements pRelation;
	private final RelObjectsElements pRelObjects;
	private final ConstraintsElements pConstraints;
	private final ConstraintElements pConstraint;
	private final ConstraintOrdinatorsElements pConstraintOrdinators;
	private final SetConstraintElements pSetConstraint;
	private final TimeConstraintElements pTimeConstraint;
	private final ObjectConstraintElements pObjectConstraint;
	private final UnitConstraintsElements pUnitConstraints;
	private final IntervallConstraintsElements pIntervallConstraints;
	private final SingleValueConstraintsElements pSingleValueConstraints;
	private final ValueSetElements pValueSet;
	private final ObjectSetElements pObjectSet;
	private final ValueElements pValue;
	private final IntValueElements pIntValue;
	private final FloatValueElements pFloatValue;
	private final ReqIDElements pReqID;
	private final WORDElements pWORD;
	private final TerminalRule tID;
	private final TerminalRule tWS_HYPHEN;
	private final TerminalRule tWS;
	private final TerminalRule tPROPERTY_TERM;
	private final RelationDelimiterElements pRelationDelimiter;
	private final AuxiliaryVerbElements pAuxiliaryVerb;
	private final ConjunctionElements pConjunction;
	private final RelConjunctionElements pRelConjunction;
	private final ComperatorsElements pComperators;
	private final SizeAdverbialElements pSizeAdverbial;
	private final PositionAdverbialElements pPositionAdverbial;
	private final ComparisonAdverbialElements pComparisonAdverbial;
	private final QuantificationElements pQuantification;
	private final NegationElements pNegation;
	private final AuxiliaryVerbNegationElements pAuxiliaryVerbNegation;
	private final ModalityElements eModality;
	private final ModifierElements eModifier;
	private final ClauseOrdinatorElements eClauseOrdinator;
	private final ArticlesElements pArticles;
	private final RefArticlesElements pRefArticles;
	private final StuffWordElements pStuffWord;
	private final RelativePronounsSubjectElements pRelativePronounsSubject;
	private final RelativePronounsObjectElements pRelativePronounsObject;
	private final FLOATElements pFLOAT;
	private final UnitElements pUnit;
	private final CuvatureElements pCuvature;
	private final VelcoityUnitsElements pVelcoityUnits;
	private final MassUnitsElements pMassUnits;
	private final HeatUnitsElements pHeatUnits;
	private final PresureUnitsElements pPresureUnits;
	private final LengthUnitsElements pLengthUnits;
	private final TimeUnitsElements pTimeUnits;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RequirementDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRequirement = new RequirementElements();
		this.pRequirementText = new RequirementTextElements();
		this.pConditionalClause = new ConditionalClauseElements();
		this.pMainClause = new MainClauseElements();
		this.pClauses = new ClausesElements();
		this.pClause = new ClauseElements();
		this.pModalitySentence = new ModalitySentenceElements();
		this.pPredicateSentence = new PredicateSentenceElements();
		this.pExistenceSentence = new ExistenceSentenceElements();
		this.pPropertySentence = new PropertySentenceElements();
		this.pProperty = new PropertyElements();
		this.pSentenceBegin = new SentenceBeginElements();
		this.pSentenceEnding = new SentenceEndingElements();
		this.pRelativeClause = new RelativeClauseElements();
		this.pRelativeSentence = new RelativeSentenceElements();
		this.pActors = new ActorsElements();
		this.pActor = new ActorElements();
		this.pPreds = new PredsElements();
		this.pPredicate = new PredicateElements();
		this.pPredicateObject = new PredicateObjectElements();
		this.pObject = new ObjectElements();
		this.pPredOrObject = new PredOrObjectElements();
		this.pExistencePreface = new ExistencePrefaceElements();
		this.pAuxNeg = new AuxNegElements();
		this.pPreNominative = new PreNominativeElements();
		this.pAdverbial = new AdverbialElements();
		this.pRelation = new RelationElements();
		this.pRelObjects = new RelObjectsElements();
		this.pConstraints = new ConstraintsElements();
		this.pConstraint = new ConstraintElements();
		this.pConstraintOrdinators = new ConstraintOrdinatorsElements();
		this.pSetConstraint = new SetConstraintElements();
		this.pTimeConstraint = new TimeConstraintElements();
		this.pObjectConstraint = new ObjectConstraintElements();
		this.pUnitConstraints = new UnitConstraintsElements();
		this.pIntervallConstraints = new IntervallConstraintsElements();
		this.pSingleValueConstraints = new SingleValueConstraintsElements();
		this.pValueSet = new ValueSetElements();
		this.pObjectSet = new ObjectSetElements();
		this.pValue = new ValueElements();
		this.pIntValue = new IntValueElements();
		this.pFloatValue = new FloatValueElements();
		this.pReqID = new ReqIDElements();
		this.pWORD = new WORDElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.ID");
		this.tWS_HYPHEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.WS_HYPHEN");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.WS");
		this.tPROPERTY_TERM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.isst.stars.RequirementDSL.PROPERTY_TERM");
		this.pRelationDelimiter = new RelationDelimiterElements();
		this.pAuxiliaryVerb = new AuxiliaryVerbElements();
		this.pConjunction = new ConjunctionElements();
		this.pRelConjunction = new RelConjunctionElements();
		this.pComperators = new ComperatorsElements();
		this.pSizeAdverbial = new SizeAdverbialElements();
		this.pPositionAdverbial = new PositionAdverbialElements();
		this.pComparisonAdverbial = new ComparisonAdverbialElements();
		this.pQuantification = new QuantificationElements();
		this.pNegation = new NegationElements();
		this.pAuxiliaryVerbNegation = new AuxiliaryVerbNegationElements();
		this.eModality = new ModalityElements();
		this.eModifier = new ModifierElements();
		this.eClauseOrdinator = new ClauseOrdinatorElements();
		this.pArticles = new ArticlesElements();
		this.pRefArticles = new RefArticlesElements();
		this.pStuffWord = new StuffWordElements();
		this.pRelativePronounsSubject = new RelativePronounsSubjectElements();
		this.pRelativePronounsObject = new RelativePronounsObjectElements();
		this.pFLOAT = new FLOATElements();
		this.pUnit = new UnitElements();
		this.pCuvature = new CuvatureElements();
		this.pVelcoityUnits = new VelcoityUnitsElements();
		this.pMassUnits = new MassUnitsElements();
		this.pHeatUnits = new HeatUnitsElements();
		this.pPresureUnits = new PresureUnitsElements();
		this.pLengthUnits = new LengthUnitsElements();
		this.pTimeUnits = new TimeUnitsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fraunhofer.isst.stars.RequirementDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///* =========== Model =========== */ Model:
	//	requirements+=Requirement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////Requirement:
	////	(condClauses+=Subclause)* (mainclauses+=Clauses) (condClauses+=Subclause)*
	////	;
	//Requirement: //PROBLEM condClauses before and after mainClause lead to ambiguity
	//	'Req'? reqID=ReqID? ':' text=RequirementText ('.' | ';') ('\n'+ | 'EOF');
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//RequirementText:
	//	(condClauses+=ConditionalClause ','? 'then')? mainclauses=MainClause (','? condClauses+=ConditionalClause)?
	//	//If mainclause is the second part then 'then' has to be added. IF maincluase is first part then 'then' is not necessary
	//;
	public RequirementTextElements getRequirementTextAccess() {
		return pRequirementText;
	}
	
	public ParserRule getRequirementTextRule() {
		return getRequirementTextAccess().getRule();
	}
	
	///* =========== Clauses =========== */ ConditionalClause:
	//	ordinator=ClauseOrdinator clauses=Clauses;
	public ConditionalClauseElements getConditionalClauseAccess() {
		return pConditionalClause;
	}
	
	public ParserRule getConditionalClauseRule() {
		return getConditionalClauseAccess().getRule();
	}
	
	//MainClause:
	//	modifier=Modifier? clauses+=Clauses //(conjunction+=Conjunction clauses+=MainClause)*
	//;
	public MainClauseElements getMainClauseAccess() {
		return pMainClause;
	}
	
	public ParserRule getMainClauseRule() {
		return getMainClauseAccess().getRule();
	}
	
	//Clauses:
	//	clauses+=Clause (conjunction+=Conjunction clauses+=Clause)*;
	public ClausesElements getClausesAccess() {
		return pClauses;
	}
	
	public ParserRule getClausesRule() {
		return getClausesAccess().getRule();
	}
	
	//Clause:
	//	ModalitySentence | PredicateSentence | ExistenceSentence | PropertySentence;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//ModalitySentence:
	//	begin=SentenceBegin? actors=Actors modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb?
	//	predicate=Predicate ending=SentenceEnding?
	//	//actors=Actors modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb? predicate=Predicate  constraints+=Constraints* 
	//;
	public ModalitySentenceElements getModalitySentenceAccess() {
		return pModalitySentence;
	}
	
	public ParserRule getModalitySentenceRule() {
		return getModalitySentenceAccess().getRule();
	}
	
	//PredicateSentence:
	//	begin=SentenceBegin? actors=Actors auxNeg+=AuxNeg auxiliarVerb+=AuxiliaryVerb? preds=Preds? ending=SentenceEnding? |
	//	begin=SentenceBegin? actors=Actors preds=Preds ending=SentenceEnding?
	//	//actors=Actors  (auxiliarVerb+=WORD negation?=Negation)? predicate=Predicate  constraints+=Constraints* |
	//	//actors=Actors  predicate=Predicate constraints+=Constraints* |	
	//	//actors=Actors  auxiliarVerb+=AuxiliaryVerb negation?=Negation? auxiliarVerb+=AuxiliaryVerb? predicate=Predicate  constraints+=Constraints* |
	//	//actors=Actors  auxiliarVerb+=AuxiliaryVerb negation?=Negation? object=PredicateObject? constraints+=Constraints* 
	//;
	public PredicateSentenceElements getPredicateSentenceAccess() {
		return pPredicateSentence;
	}
	
	public ParserRule getPredicateSentenceRule() {
		return getPredicateSentenceAccess().getRule();
	}
	
	//ExistenceSentence:
	//	ExistencePreface actors=Actors ',' relativeClause=relativeClause ',';
	public ExistenceSentenceElements getExistenceSentenceAccess() {
		return pExistenceSentence;
	}
	
	public ParserRule getExistenceSentenceRule() {
		return getExistenceSentenceAccess().getRule();
	}
	
	//PropertySentence:
	//	actors=Actors property=Property rela=Relation? modality=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb?
	//	predObj=PredOrObject ending=SentenceEnding? | actors=Actors property=Property rela=Relation? auxNeg=AuxNeg
	//	(predObj=PredOrObject | constraints=Constraints) ending=SentenceEnding?
	//	//property=Property modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb? predicate=Predicate  constraints+=Constraints* |
	//	//property=Property modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb object=PredicateObject?  constraints+=Constraints* |
	//	//property=Property auxiliarVerb=AuxiliaryVerb negation?=Negation? ((predicate=Predicate|object=PredicateObject) constraints+=Constraints* | constraints+=Constraints+)  |
	//	//property=Property (predicateWord=WORD| predicateWord=STRING) object=PredicateObject? constraints+=Constraints* //Leads to mismatch in xtext but not in AntLRworks
	//;
	public PropertySentenceElements getPropertySentenceAccess() {
		return pPropertySentence;
	}
	
	public ParserRule getPropertySentenceRule() {
		return getPropertySentenceAccess().getRule();
	}
	
	//Property:
	//	PROPERTY_TERM (property+=WORD+ | property+=STRING);
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//SentenceBegin:
	//	rela=Relation ',';
	public SentenceBeginElements getSentenceBeginAccess() {
		return pSentenceBegin;
	}
	
	public ParserRule getSentenceBeginRule() {
		return getSentenceBeginAccess().getRule();
	}
	
	//SentenceEnding:
	//	const+=Constraints+ | const+=Constraints* rela=Relation | rela=Relation const+=Constraints+;
	public SentenceEndingElements getSentenceEndingAccess() {
		return pSentenceEnding;
	}
	
	public ParserRule getSentenceEndingRule() {
		return getSentenceEndingAccess().getRule();
	}
	
	///* =========== RELATIVE CLAUSE =========== */ relativeClause:
	//	sentence=relativeSentence (conjunction+=Conjunction condClauses+=ConditionalClause)*;
	public RelativeClauseElements getRelativeClauseAccess() {
		return pRelativeClause;
	}
	
	public ParserRule getRelativeClauseRule() {
		return getRelativeClauseAccess().getRule();
	}
	
	//relativeSentence:
	//	pronoun=RelativePronounsSubject modelity=Modality negation?=Negation? predicate=Predicate constraints+=Constraints* |
	//	pronoun=RelativePronounsSubject (auxiliar=WORD negation?=Negation)? predicate=Predicate constraints+=Constraints* |
	//	pronoun=RelativePronounsObject (clause=ModalitySentence | clause=PredicateSentence);
	public RelativeSentenceElements getRelativeSentenceAccess() {
		return pRelativeSentence;
	}
	
	public ParserRule getRelativeSentenceRule() {
		return getRelativeSentenceAccess().getRule();
	}
	
	///* =========== CLAUSE ITEMS =========== */ Actors:
	//	actors+=Actor (conjunction+=Conjunction actors+=Actor)*;
	public ActorsElements getActorsAccess() {
		return pActors;
	}
	
	public ParserRule getActorsRule() {
		return getActorsAccess().getRule();
	}
	
	//Actor:
	//	PreNominative? (actor=WORD | actor=STRING);
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//Preds:
	//	predicate=Predicate | predObj=PredicateObject;
	public PredsElements getPredsAccess() {
		return pPreds;
	}
	
	public ParserRule getPredsRule() {
		return getPredsAccess().getRule();
	}
	
	//Predicate:
	//	predicates+=WORD+ | predicates+=STRING | predicates+=WORD+ object=PredicateObject;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//PredicateObject:
	//	article=PreNominative (object+=WORD+ | object+=STRING);
	public PredicateObjectElements getPredicateObjectAccess() {
		return pPredicateObject;
	}
	
	public ParserRule getPredicateObjectRule() {
		return getPredicateObjectAccess().getRule();
	}
	
	//Object:
	//	article=PreNominative? (object+=WORD+ | object+=STRING);
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//PredOrObject:
	//	predicate=Predicate | predObj=PredicateObject;
	public PredOrObjectElements getPredOrObjectAccess() {
		return pPredOrObject;
	}
	
	public ParserRule getPredOrObjectRule() {
		return getPredOrObjectAccess().getRule();
	}
	
	//ExistencePreface:
	//	{ExistencePreface} ('there' | 'There') modifier=Modifier? ('exist' | 'exists');
	public ExistencePrefaceElements getExistencePrefaceAccess() {
		return pExistencePreface;
	}
	
	public ParserRule getExistencePrefaceRule() {
		return getExistencePrefaceAccess().getRule();
	}
	
	///* The same as Actors and Actor
	//Objects:
	//	(objects+=Object) (conjunction+=Conjunction objects+=Object)*
	//;
	//
	//Object:
	//    PreNominative? (object+=WORD+ | object+=STRING)  
	//;
	//*/ AuxNeg:
	//	auxiliarVerb=AuxiliaryVerb negation=Negation? | auxiliarVerbNeg=AuxiliaryVerbNegation;
	public AuxNegElements getAuxNegAccess() {
		return pAuxNeg;
	}
	
	public ParserRule getAuxNegRule() {
		return getAuxNegAccess().getRule();
	}
	
	//PreNominative:
	//	determiner=Quantification | article=Articles | article=RefArticles;
	public PreNominativeElements getPreNominativeAccess() {
		return pPreNominative;
	}
	
	public ParserRule getPreNominativeRule() {
		return getPreNominativeAccess().getRule();
	}
	
	//Adverbial:
	//	SizeAdverbial | PositionAdverbial | ComparisonAdverbial //| (WORD 'of')
	//;
	public AdverbialElements getAdverbialAccess() {
		return pAdverbial;
	}
	
	public ParserRule getAdverbialRule() {
		return getAdverbialAccess().getRule();
	}
	
	///* =========== Relations =========== */ //Currently not used -> False identification of properties
	//Relation:
	//	relposAdv=PositionAdverbial relDel=RelationDelimiter relComp=Comperators relElements=RelObjects;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//RelObjects:
	//	object+=Object property+=Property? (relConj+=RelConjunction object+=Object property+=Property?)*;
	public RelObjectsElements getRelObjectsAccess() {
		return pRelObjects;
	}
	
	public ParserRule getRelObjectsRule() {
		return getRelObjectsAccess().getRule();
	}
	
	///*Properties:
	//	(properties+=Property) (conjunction+=Conjunction properties+=Property)* 
	//;*/ /* =========== CONSTRAINTS =========== */ Constraints:
	//	timeConstraint=TimeConstraint | constraint=Constraint;
	public ConstraintsElements getConstraintsAccess() {
		return pConstraints;
	}
	
	public ParserRule getConstraintsRule() {
		return getConstraintsAccess().getRule();
	}
	
	//Constraint:
	//	ordinator=ConstraintOrdinators (constraint=ObjectConstraint | constraint=UnitConstraints | constraint=SetConstraint);
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//ConstraintOrdinators:
	//	stuffing=StuffWord? adverbial=Adverbial comperator=Comperators?;
	public ConstraintOrdinatorsElements getConstraintOrdinatorsAccess() {
		return pConstraintOrdinators;
	}
	
	public ParserRule getConstraintOrdinatorsRule() {
		return getConstraintOrdinatorsAccess().getRule();
	}
	
	//SetConstraint:
	//	set=ObjectSet | set=ValueSet;
	public SetConstraintElements getSetConstraintAccess() {
		return pSetConstraint;
	}
	
	public ParserRule getSetConstraintRule() {
		return getSetConstraintAccess().getRule();
	}
	
	//TimeConstraint:
	//	ordinator=ConstraintOrdinators time=INT unit=TimeUnits;
	public TimeConstraintElements getTimeConstraintAccess() {
		return pTimeConstraint;
	}
	
	public ParserRule getTimeConstraintRule() {
		return getTimeConstraintAccess().getRule();
	}
	
	//ObjectConstraint:
	//	object=Object;
	public ObjectConstraintElements getObjectConstraintAccess() {
		return pObjectConstraint;
	}
	
	public ParserRule getObjectConstraintRule() {
		return getObjectConstraintAccess().getRule();
	}
	
	//UnitConstraints:
	//	SingleValueConstraints | IntervallConstraints;
	public UnitConstraintsElements getUnitConstraintsAccess() {
		return pUnitConstraints;
	}
	
	public ParserRule getUnitConstraintsRule() {
		return getUnitConstraintsAccess().getRule();
	}
	
	//IntervallConstraints:
	//	'[' lower=Value ',' higher=Value ']';
	public IntervallConstraintsElements getIntervallConstraintsAccess() {
		return pIntervallConstraints;
	}
	
	public ParserRule getIntervallConstraintsRule() {
		return getIntervallConstraintsAccess().getRule();
	}
	
	//SingleValueConstraints:
	//	value=Value;
	public SingleValueConstraintsElements getSingleValueConstraintsAccess() {
		return pSingleValueConstraints;
	}
	
	public ParserRule getSingleValueConstraintsRule() {
		return getSingleValueConstraintsAccess().getRule();
	}
	
	///* =========== VALUES =========== */ ValueSet:
	//	'{' elements+=Value (';' elements+=Value)* '}';
	public ValueSetElements getValueSetAccess() {
		return pValueSet;
	}
	
	public ParserRule getValueSetRule() {
		return getValueSetAccess().getRule();
	}
	
	//ObjectSet:
	//	'{' elements+=Actor (';' elements+=Actor)* '}';
	public ObjectSetElements getObjectSetAccess() {
		return pObjectSet;
	}
	
	public ParserRule getObjectSetRule() {
		return getObjectSetAccess().getRule();
	}
	
	//Value:
	//	IntValue | FloatValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//IntValue:
	//	value=INT unit=Unit? object+=WORD*;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue:
	//	value=FLOAT unit=Unit? object+=WORD*;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	///* =========== BASIC TEXT BLOCKS / WORDS =========== */ ReqID:
	//	(ID | INT) ('.' | INT)*;
	public ReqIDElements getReqIDAccess() {
		return pReqID;
	}
	
	public ParserRule getReqIDRule() {
		return getReqIDAccess().getRule();
	}
	
	////just extension to allow naming with '-' like ego-lane -> ITS NOT MATCHED PROPERLY
	//WORD:
	//	ID ('-' ID)*;
	public WORDElements getWORDAccess() {
		return pWORD;
	}
	
	public ParserRule getWORDRule() {
		return getWORDAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal WS_HYPHEN:
	//	' - ';
	public TerminalRule getWS_HYPHENRule() {
		return tWS_HYPHEN;
	}
	
	//@Override
	//terminal WS:
	//	' ' | '\t' | '\r'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal PROPERTY_TERM returns ecore::EBoolean: //'\'s' |	'`s' |
	//	'´s';
	public TerminalRule getPROPERTY_TERMRule() {
		return tPROPERTY_TERM;
	}
	
	///* =========== BASIC SYNTAX =========== */ RelationDelimiter:
	//	'relation'
	//	//'in' 'relation' 'to'  | 'relative' 'to' //mutiple word relation leads to false identification of properties
	//;
	public RelationDelimiterElements getRelationDelimiterAccess() {
		return pRelationDelimiter;
	}
	
	public ParserRule getRelationDelimiterRule() {
		return getRelationDelimiterAccess().getRule();
	}
	
	//AuxiliaryVerb:
	//	'is' | 'are' | 'be' | 'been' | 'has' | 'have' | 'do' | 'does';
	public AuxiliaryVerbElements getAuxiliaryVerbAccess() {
		return pAuxiliaryVerb;
	}
	
	public ParserRule getAuxiliaryVerbRule() {
		return getAuxiliaryVerbAccess().getRule();
	}
	
	//Conjunction:
	//	'and' | 'or';
	public ConjunctionElements getConjunctionAccess() {
		return pConjunction;
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}
	
	//RelConjunction:
	//	'and_to' | 'or_to';
	public RelConjunctionElements getRelConjunctionAccess() {
		return pRelConjunction;
	}
	
	public ParserRule getRelConjunctionRule() {
		return getRelConjunctionAccess().getRule();
	}
	
	//Comperators:
	//	'than' | 'as' | 'to' | 'of';
	public ComperatorsElements getComperatorsAccess() {
		return pComperators;
	}
	
	public ParserRule getComperatorsRule() {
		return getComperatorsAccess().getRule();
	}
	
	//SizeAdverbial:
	//	'higher' | 'less' | 'more' | 'larger' | 'smaller' | 'as_long_as';
	public SizeAdverbialElements getSizeAdverbialAccess() {
		return pSizeAdverbial;
	}
	
	public ParserRule getSizeAdverbialRule() {
		return getSizeAdverbialAccess().getRule();
	}
	
	//PositionAdverbial:
	//	'between' | 'next' | 'on' | 'above' | 'below' | 'in' | 'within' | 'in_front_of' | 'behind' | 'out' | 'under';
	public PositionAdverbialElements getPositionAdverbialAccess() {
		return pPositionAdverbial;
	}
	
	public ParserRule getPositionAdverbialRule() {
		return getPositionAdverbialAccess().getRule();
	}
	
	//ComparisonAdverbial:
	//	'equal' | 'faster' | 'slower' | 'better' | 'by' | 'to';
	public ComparisonAdverbialElements getComparisonAdverbialAccess() {
		return pComparisonAdverbial;
	}
	
	public ParserRule getComparisonAdverbialRule() {
		return getComparisonAdverbialAccess().getRule();
	}
	
	//Quantification:
	//	'all' | 'every' | 'each' | 'whole' | 'any' | 'several' | 'either' |
	//	'All' | 'Every' | 'Each' | 'Whole' | 'Any' | 'Several' | 'Either';
	public QuantificationElements getQuantificationAccess() {
		return pQuantification;
	}
	
	public ParserRule getQuantificationRule() {
		return getQuantificationAccess().getRule();
	}
	
	//Negation:
	//	'not' //| 'donot' | 'doesnot' | 'doesn\'t' | 'don\'t'
	//;
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}
	
	//AuxiliaryVerbNegation:
	//	'doesn´t' | 'don´t' | 'isn´t' | 'aren´t';
	public AuxiliaryVerbNegationElements getAuxiliaryVerbNegationAccess() {
		return pAuxiliaryVerbNegation;
	}
	
	public ParserRule getAuxiliaryVerbNegationRule() {
		return getAuxiliaryVerbNegationAccess().getRule();
	}
	
	//enum Modality:
	//	SHALL='shall' | SHOULD='should' | WILL='will' | WOULD='would' | CAN='can' | COULD='could' | MUST='must';
	public ModalityElements getModalityAccess() {
		return eModality;
	}
	
	public EnumRule getModalityRule() {
		return getModalityAccess().getRule();
	}
	
	//enum Modifier:
	//	GLOBALLY='Globally' | GLOBALLY_L='globally' | ALWAYS='Always' | ALWAYS_L='always' | SOMETIMES='Sometimes' |
	//	SOMETIMES_L='sometimes' | EVENTUALLY='Eventually' | EVENTUALLY_L='eventually';
	public ModifierElements getModifierAccess() {
		return eModifier;
	}
	
	public EnumRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	//enum ClauseOrdinator:
	//	IF_L='if' | AFTER_L='after' | ONCE_L='once' | WHEN_L='when' | WHENEVER_L='whenever' | WHILE_L='while' |
	//	BEFORE_L='before' | UNTIL_L='until' |
	//	IF='If' | AFTER='After' | ONCE='Once' | WHEN='When' | WHENEVER='Whenever' | WHILE='While' | BEFORE='Before' |
	//	UNTIL='Until';
	public ClauseOrdinatorElements getClauseOrdinatorAccess() {
		return eClauseOrdinator;
	}
	
	public EnumRule getClauseOrdinatorRule() {
		return getClauseOrdinatorAccess().getRule();
	}
	
	//Articles:
	//	'the' | 'a' | 'an' |
	//	'The' | 'A' | 'An';
	public ArticlesElements getArticlesAccess() {
		return pArticles;
	}
	
	public ParserRule getArticlesRule() {
		return getArticlesAccess().getRule();
	}
	
	//RefArticles:
	//	'that' | 'this' | 'That' | 'This';
	public RefArticlesElements getRefArticlesAccess() {
		return pRefArticles;
	}
	
	public ParserRule getRefArticlesRule() {
		return getRefArticlesAccess().getRule();
	}
	
	//StuffWord:
	//	'with';
	public StuffWordElements getStuffWordAccess() {
		return pStuffWord;
	}
	
	public ParserRule getStuffWordRule() {
		return getStuffWordAccess().getRule();
	}
	
	//// Separation of Relative Pronouns due to impact on the following sentence structure
	//RelativePronounsSubject:
	//	'which' | 'who' | 'that';
	public RelativePronounsSubjectElements getRelativePronounsSubjectAccess() {
		return pRelativePronounsSubject;
	}
	
	public ParserRule getRelativePronounsSubjectRule() {
		return getRelativePronounsSubjectAccess().getRule();
	}
	
	//RelativePronounsObject:
	//	'whose' | 'whom';
	public RelativePronounsObjectElements getRelativePronounsObjectAccess() {
		return pRelativePronounsObject;
	}
	
	public ParserRule getRelativePronounsObjectRule() {
		return getRelativePronounsObjectAccess().getRule();
	}
	
	///* =========== BASIC UNITS =========== */ FLOAT ecore::EFloat:
	//	INT '.' INT;
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//Unit:
	//	LengthUnits | PresureUnits | HeatUnits | MassUnits | VelcoityUnits | Cuvature;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Cuvature:
	//	'rad/m' | '°' | 'rad' | '°/m';
	public CuvatureElements getCuvatureAccess() {
		return pCuvature;
	}
	
	public ParserRule getCuvatureRule() {
		return getCuvatureAccess().getRule();
	}
	
	//VelcoityUnits:
	//	'm/s' | 'knots' | 'km/h' | 'm/min';
	public VelcoityUnitsElements getVelcoityUnitsAccess() {
		return pVelcoityUnits;
	}
	
	public ParserRule getVelcoityUnitsRule() {
		return getVelcoityUnitsAccess().getRule();
	}
	
	//MassUnits:
	//	'kg' | 'g' | 'mg' | 't';
	public MassUnitsElements getMassUnitsAccess() {
		return pMassUnits;
	}
	
	public ParserRule getMassUnitsRule() {
		return getMassUnitsAccess().getRule();
	}
	
	//HeatUnits:
	//	'C' | 'F';
	public HeatUnitsElements getHeatUnitsAccess() {
		return pHeatUnits;
	}
	
	public ParserRule getHeatUnitsRule() {
		return getHeatUnitsAccess().getRule();
	}
	
	//PresureUnits:
	//	'bar' | 'Pa' | 'hPa';
	public PresureUnitsElements getPresureUnitsAccess() {
		return pPresureUnits;
	}
	
	public ParserRule getPresureUnitsRule() {
		return getPresureUnitsAccess().getRule();
	}
	
	//LengthUnits:
	//	'm' | 'f' | 'km' | 'cm' | 'mm' | 'nm';
	public LengthUnitsElements getLengthUnitsAccess() {
		return pLengthUnits;
	}
	
	public ParserRule getLengthUnitsRule() {
		return getLengthUnitsAccess().getRule();
	}
	
	//TimeUnits:
	//	'ns' | 'ms' | 's' | 'sec' | 'second' | 'seconds' | 'minute' | 'minutes' | 'min' | 'hour' | 'hours' | 'h' | 'day' |
	//	'days' | 'd' | 'month' | 'months' | 'mon' | 'year' | 'years' | 'y';
	public TimeUnitsElements getTimeUnitsAccess() {
		return pTimeUnits;
	}
	
	public ParserRule getTimeUnitsRule() {
		return getTimeUnitsAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

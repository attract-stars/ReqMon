grammar de.fraunhofer.isst.stars.RequirementDSL with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT, WS_HYPHEN)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate requirementDSL "http://www.fraunhofer.de/isst/automotive/stars/reqmon/dsl/requirement/RequirementDSL" 

/* =========== Model =========== */
RequirementModel:
	requirements+=Requirement*
;


Requirement:
	'Req' reqID=ReqID? ':' text=RequirementText ('.'|';')
;

RequirementText:
//	 ExistencePreface actors=Actors ','?   relativeClause=relativeClause  ','?  |
    (condClauses+=ConditionalClause ','? 'then' )?  (mainclauses=MainClause) (','? condClauses+=ConditionalClause)?
    //If mainclause is the second part then 'then' has to be added. IF maincluase is first part then 'then' is not necessary
;

/* =========== Clauses =========== */

ConditionalClause:
	ordinator=ClauseOrdinator clauses=Clauses
;

MainClause:
	modifier=Modifier? clauses+=Clauses //(conjunction+=Conjunction clauses+=MainClause)*
;


Clauses:
	clauses+= Clause (conjunction+=Conjunction clauses+=Clause)*	
;

Clause:
	ModalitySentence |  PredicateSentence | ExistenceSentence | PropertySentence
;


ModalitySentence :
	begin=SentenceBegin? actors=Actors modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb? predicate=Predicate  ending=SentenceEnding?
	//actors=Actors modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb? predicate=Predicate  constraints+=Constraints* 
;

PredicateSentence :
	begin=SentenceBegin? actors=Actors  auxNeg=AuxNeg auxiliarVerb=AuxiliaryVerb? predicate=Predicate?  ending=SentenceEnding? |
	begin=SentenceBegin? actors=Actors  predicate=Predicate  ending=SentenceEnding? 
	
	//actors=Actors  (auxiliarVerb+=WORD negation?=Negation)? predicate=Predicate  constraints+=Constraints* |
	//actors=Actors  predicate=Predicate constraints+=Constraints* |	
	//actors=Actors  auxiliarVerb+=AuxiliaryVerb negation?=Negation? auxiliarVerb+=AuxiliaryVerb? predicate=Predicate  constraints+=Constraints* |
	//actors=Actors  auxiliarVerb+=AuxiliaryVerb negation?=Negation? object=PredicateObject? constraints+=Constraints* 
;

ExistenceSentence :
	//TODO WAS IST WENN REQUIREMENT NACHT RELATIVE CLAUSE ENDED?
	Existence actors=Actors ','   relativeClause=RelativeClause  ','
;

PropertySentence:
	//TODO Warum haben wir hier constraints im ODER und nohcmal im SentenceEnding
	//TODO SOLLTE RELATION MIT IN ACTOR PROPERTIES?
//	(actors=Actors| properties=Properties) rela=Relation? modality=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb? predObj=PredOrObject  ending=SentenceEnding? |
//	(actors=Actors| properties=Properties) rela=Relation? auxNeg=AuxNeg (predObj=PredOrObject | constraints=Constraints) ending=SentenceEnding?
	properties=ActorProperties rela=Relation? modality=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb? predicate=Predicate  ending=SentenceEnding? |
	properties=ActorProperties rela=Relation? auxNeg=AuxNeg (predicate=Predicate | constraints=Constraints) ending=SentenceEnding?
	
	//property=Property modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb? predicate=Predicate  constraints+=Constraints* |
	//property=Property modelity=Modality negation?=Negation? auxiliarVerb=AuxiliaryVerb object=PredicateObject?  constraints+=Constraints* |
	//property=Property auxiliarVerb=AuxiliaryVerb negation?=Negation? ((predicate=Predicate|object=PredicateObject) constraints+=Constraints* | constraints+=Constraints+)  |
	//property=Property (predicateWord=WORD| predicateWord=STRING) object=PredicateObject? constraints+=Constraints* //Leads to mismatch in xtext but not in AntLRworks
;

ActorProperties:
	property+=ObjectProperty (conjunction+=Conjunction property+=ObjectProperty)* 
;

SentenceBegin:
	(rela=Relation ',')
;

SentenceEnding:
	//TODO FEHLT HIER NICHT EINE Conjunction?!
	//TODO SOLLTE nicht Relation in CONTRAINTS drin sein
	const+=Constraints+ |
	const+=Constraints* rela=Relation |
	rela=Relation const+=Constraints+
;

/* =========== RELATIVE CLAUSE =========== */


RelativeClause:
	//TODO WARUM WIRD HIER DER CONTITIONAL CLAUSE RAUFGERUFEN UND NICHT IN EXISTING CLAUSE
	//TODO Sollte hier nicht die conjunction weg sein? Alla: ... which is done if ...
//  pronoun=RelativePronouns actors=Actors? modelity=Modality? negation?=Negation? predicate=Predicate constraints+=Constraints*
	sentence=RelativeSentence (conjunction+=Conjunction condClauses+=ConditionalClause)*	
;
RelativeSentence :
	pronoun=RelativePronounsSubject modelity=Modality negation?=Negation? predicate=Predicate  constraints+=Constraints*  |
	pronoun=RelativePronounsSubject (auxiliar=AuxiliaryVerb negation?=Negation)? predicate=Predicate  constraints+=Constraints* |
	pronoun=RelativePronounsSubject auxNeg=AuxiliaryVerbNegation predicate=Predicate  constraints+=Constraints* |
	pronoun=RelativePronounsObject  (clause=ModalitySentence | clause=PredicateSentence)
;

/* =========== CLAUSE ITEMS =========== */


Actors:
	actors+=Actor (conjunction+=Conjunction actors+=Actor)* 
;

Actor:
	//TODO BEKOMMT MAN HIER NICHT MEHRERE WÖRTER REIN!? -> DANN WÄRE ES OBJECT - Problem Parser Matching
  	  PreNominative=PreNominative? relativ='relative'? (actor=WORD | actor=STRING) 
//    (determiner=Determiner|article=Articles|article=RefArticles)? (object=WORD | object=STRING) (property?=PROPERTY (adjectives+=Adjective)* (objects=WORD | objects=STRING))? 
   
;

Predicate:
	predicates+=WORD+ | predicates+=STRING | predicates+=WORD+ object=PredicateObject | object=PredicateObject
;

PredicateObject:
	article=PreNominative relativ='relative'? (object+=WORD+ | object+=STRING) 
;

Object:
	article=PreNominative? relativ='relative'? (object+=WORD+ | object+=STRING) 
;

Existence:
	{ExistencePreface} ('there' | 'There') (modifier=Modifier?) ('exist' | 'exists') 
;

AuxNeg:
	auxiliarVerb=AuxiliaryVerb negation=Negation? |
	auxiliarVerbNeg=AuxiliaryVerbNegation
;

PreNominative : 
	(determiner=Quantification|article=Articles|article=RefArticles)
;

Adverbial:
	SizeAdverbial | PositionAdverbial | ComparisonAdverbial 
;

/* =========== Relations =========== */

Relation:
	relDel=RelationDelimiter relElements=RelObjects
;

RelObjects:
	(object+=Object|property+=ObjectProperty) (relConj+=RelConjunction (object+=Object | property+=ObjectProperty))*
;


ObjectProperty:
	object=Object property=Property
;

Property:
	PROPERTY_TERM relativ='relative'? (property+=WORD+ | property+=STRING)
;

/* =========== CONSTRAINTS =========== */

Constraints:
	timeConstraint=TimeConstraint | constraint=Constraint
;

Constraint:
	ordinator=ConstraintOrdinators (constraint=ObjectConstraint | constraint=UnitConstraints | constraint= SetConstraint)
;	

ConstraintOrdinators:
	stuffing=StuffWord? adverbial=Adverbial comperator=Comperators?
;

SetConstraint:
	//Difference between ObjectSet and Value set in order to exclude a mixture of both in a single set
	set=ObjectSet  | set=ValueSet
;

TimeConstraint:
	ordinator=ConstraintOrdinators time=INT unit=TimeUnits
;

ObjectConstraint:
	  object=Object
;


UnitConstraints:
	 SingleValueConstraints | IntervallConstraints
;


IntervallConstraints:
	'[' lower=Value','higher=Value ']'
;

SingleValueConstraints:
	 value=Value
;

/* =========== VALUES =========== */


ValueSet:
	 '{' (elements+=Value) (';'elements+=Value)*'}'
;

ObjectSet:
	  '{' (elements+=Object) (';'elements+=Object)*'}'
;

Value:
	IntValue| FloatValue
;

IntValue:
	value=INT unit=Unit? object+=WORD*
;

FloatValue:
	value=FLOAT  unit=Unit? object+=WORD*
;

/* =========== BASIC TEXT BLOCKS / WORDS =========== */

ReqID returns  ecore::EString: 
	(ID|INT) ('.'|INT)* 
;

//just extension to allow naming with '-' like ego-lane -> ITS NOT MATCHED PROPERLY
WORD returns ecore::EString: 
	ID('-'ID)*
;

//overriding ID to include hyphen words 
@Override 
terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

// overriding STRING to allow only the '"' quote (the "'" quote is needed for the Property-term)
@Override
terminal STRING: 
	'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"'
;

terminal WS_HYPHEN : ' - '; 

terminal PROPERTY_TERM returns ecore::EBoolean:
	'\'s' |	'`s' | '´s' | '\'' | '`' | '´'
;
/* =========== BASIC SYNTAX =========== */

RelationDelimiter:
	('in' 'relation' 'to'  | 'relative' 'to' |
	'In' 'relation' 'to'  | 'Relative' 'to') 
;

AuxiliaryVerb:
	('is' | 'are' | 'be' | 'been' | 'has' | 'have' | 'do' | 'does')
;

Conjunction:
	text=ConjunctionWord priority=INT?//priority is just for internal use and should never be set!
;

ConjunctionWord:
	('and'| 'or')
;
RelConjunction:
	text=RelConjunctionWord priority=INT?//priority is just for internal use and should never be set!
;

RelConjunctionWord:
	('and' 'to' | 'or' 'to')
;
Comperators:
	('than'|'as'|'to' | 'of')
;
		 
SizeAdverbial:
	('higher' | 'less'| 'more' | 'larger'|'smaller' | 'as' 'long' 'as')
;

PositionAdverbial:
	('between'|'next' | 'on' | 'above' | 'below' | 'in' | 'within' | 'in' 'front' 'of' | 'in' 'front' 'to' 
	| 'behind' | 'out' | 'under')
;

ComparisonAdverbial:
	('equal' | 'faster' | 'slower' | 'better' | 'by' | 'to')
;

Quantification:
	('all' | 'every' | 'each' | 'whole' | 'any' | 'several' | 'either' |
	'All' | 'Every' | 'Each' | 'Whole' | 'Any' | 'Several' | 'Either')
;

Negation:
	'not'
;

AuxiliaryVerbNegation:
	('doesn´t' | 'don´t' | 'isn´t' | 'aren´t' |
	'doesn`t' | 'don`t' | 'isn`t' | 'aren`t' |
	'doesn\'t' | 'don\'t' | 'isn\'t' | 'aren\'t')
;

enum Modality:
	  SHALL = 'shall' | SHOULD = 'should' | WILL = 'will' | WOULD='would' | CAN='can' | COULD='could' | MUST='must'
;

enum Modifier:
	GLOBALLY='Globally' | GLOBALLY_L='globally' | ALWAYS='Always' | ALWAYS_L='always' | SOMETIMES='Sometimes' | SOMETIMES_L='sometimes' | EVENTUALLY='Eventually' | EVENTUALLY_L='eventually'
;

enum ClauseOrdinator:
	IF_L='if' | AFTER_L='after' | ONCE_L='once' | WHEN_L='when' | WHENEVER_L='whenever' | WHILE_L='while' | BEFORE_L='before' | UNTIL_L='until' |
	IF='If' | AFTER='After' | ONCE='Once' | WHEN='When' | WHENEVER='Whenever' | WHILE='While' | BEFORE='Before' | UNTIL='Until'
;

Articles:
	('the' | 'a' | 'an' | 
	'The' | 'A' | 'An') 
;

RefArticles:
	('that' | 'this' | 'That' | 'This')
;

StuffWord:
	'with'
;
	
// Separation of Relative Pronouns due to impact on the following sentence structure
RelativePronounsSubject:
	('which' | 'who' | 'that')
;

RelativePronounsObject:
	('whose'| 'whom')
;

/* =========== BASIC UNITS =========== */

FLOAT returns ecore::EFloat:
	INT'.'INT
;

Unit:
	 LengthUnits | PresureUnits | HeatUnits | MassUnits | VelcoityUnits | Cuvature
;


Cuvature:
	('rad/m' | '°' | 'rad' | '°/m')	
;

VelcoityUnits:
	('m/s' | 'knots'  |'km/h' | 'm/min')
;

MassUnits:
	('kg'| 'g' | 'mg' | 't')
;

HeatUnits:
	('C' | 'F')
;

PresureUnits:
	('bar' | 'Pa' | 'hPa')
;


LengthUnits:
	('m' | 'f' | 'km' | 'cm' | 'mm' |'nm')
;

TimeUnits:
	 ('ns'|'ms'|'s' | 'sec' | 'second' | 'seconds'| 'minute' | 'minutes' | 'min' | 'hour' | 'hours' | 'h' | 'day' | 'days' | 'd' | 'month'| 'months' | 'mon' |'year'| 'years'| 'y') 
;

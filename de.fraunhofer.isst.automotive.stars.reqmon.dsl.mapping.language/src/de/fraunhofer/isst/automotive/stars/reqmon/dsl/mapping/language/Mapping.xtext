grammar de.fraunhofer.isst.automotive.stars.reqmon.dsl.mapping.language.Mapping with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.fraunhofer.de/isst/automotive/stars/reqmon/dsl/mapping/SysDef" as system


generate mapping "http://www.fraunhofer.de/isst/automotive/stars/reqmon/dsl/mapping/language/Mapping"


Model:
	 mappings+=Mapping* 
;
	
Mapping:
	definition=Definition 
	| rule=Rule
;

Definition:
	//def = SystemID 
	  def = MessageID
	| def = SignalID
	//| def = StructureID
	| def = ClassID
	| def = AttributeID
	| unit=Unit
;

SystemID:
	def='system' system=[system::SystemNode | STRING]?
;

MessageID:
	def='message' mess=[system::MessageNode | STRING]?
;

SignalID:
	def='signal' signal=[system::SignalNode | STRING]?
;

StructureID:
	def='structure' struc=[system::DataStructureNode | STRING]?
;

ClassID:
	def='class' clas=[system::ClassNode | STRING]? 
;

AttributeID:
	def='attribute' attr=[system::AttributeNode | STRING]? 
;


Rule:
	 elem+=Element (op+=Operators elem+=Element)+
;


Element:
	attrOfDef+=AttributeOfDefined
	| value=Value
	| def=Definition
;



AttributeOfDefined:
	  system=SystemID getAttr+=GetSystemAttribute
	| message=MessageID getAttr+=GetMessageAttribute
	| signal=SignalID getAttr+=GetSignalAttribute
	| structure=StructureID getAttr+=GetStructureAttribute
	| object=ClassID getAttr+=GetClassAttribute
	| attribute=AttributeID getAttr+=GetAttributeAttribute
;

GetSystemAttribute:
	attr='.systemName_' systemName=[system::SystemNode | STRING]
	| attr='.systemVersion_' version=[system::VersionNode | STRING]
	| attr='.systemDescription_' description=[system::DescriptionNode | STRING]
	| attr='.systemMessage_' message=[system::MessageNode | STRING]
	| attr='.systemSignal_' signal=[system::SignalNode | STRING]
	| attr='.systemDatastructure_' datastruc=[system::DataStructureNode | STRING]
	| attr='.this_system'
;

GetMessageAttribute:
	attr='.messageName_' messageName=[system::MessageNode | STRING]
	| attr='.messageLocation_' location=[system::LocationNode | STRING]
	| attr='.messageBitsize_' bit=[system::BitNode | STRING]
	| attr='.messagesignal_' signalRef=[system::SignalRefNode | STRING]
	| attr='.this_message'
;

GetSignalAttribute:
	attr='.signalName_' signalName=[system::SignalNode | STRING]
	| attr='.signalID_' id=[system::IDAtrr | STRING]
	| attr='.signalDescription_' description=[system::DescriptionNode | STRING]
	| attr='.signalDatatype_' datatype=[system::DataTypeNode | STRING]
	| attr='.signalLocation_' location=[system::LocationNode | STRING]
	| attr='.signalBitsize_' bit=[system::BitNode | STRING]
	| attr='.signalMinvalue_' minvalue=[system::MinValueNode | STRING]
	| attr='.signalMaxvalue_' maxvalue=[system::MaxValueNode | STRING]
	| attr='.signalPrefvalue_' prefvalue=[system::PrefValueNode | STRING]
	| attr='.signalStepsize_' stepsize=[system::StepSizeNode | STRING]
	| attr='.this_signal'
;

GetStructureAttribute:
	attr='.structureName_' structureName=[system::DataStructureNode | STRING]
	//| attr='.structureID_' id=[system::IDAtrr | STRING]
	| attr='.structureDescription_' description=[system::DescriptionNode | STRING]
	| attr='.structureLocation_' location=[system::LocationNode | STRING]
	| attr='.structureBitsize_' bit=[system::BitNode | STRING]
	| attr='.structureClass_' clas=[system::ClassNode | STRING]
	| attr='.this_structure'
;

GetClassAttribute:
	attr='.className_' className=[system::ClassNode | STRING]
	| attr='.classDescription_' description=[system::DescriptionNode | STRING]
	//| attr='.classInheritance_from_' inherit=[system::InheritanceNode | STRING]
	| attr='.classAttribute_' attribute=[system::AttributeNode | STRING] 
	| attr='.this_class'
;

GetAttributeAttribute:
	attr='.attributeName_' className=[system::AttributeNode | STRING]
	| attr='.attributeDescription_' description=[system::DescriptionNode | STRING]
	//| attr='.attrtype_' attrtype=[system::AttrTypeNode | STRING]
	| attr='.attributeType_' type=[system::Type | STRING]
	| attr='.this_attribute'
;

Value:
	IntValue| FloatValue
;

IntValue:
	value=INT unit=[Unit]? 
;

FloatValue:
	value=FLOAT unit=[Unit]? 
;

Unit:
	def='unit' name=ID ':=' unit=GetUnit
;

GetUnit:
	signal=SignalID get+='.signalDatatype_' datatype=[system::DataTypeNode | STRING]
	//| system=SystemID get+='.systemSignal_' signaltype=[system::SignalNode | STRING] 
		//get+='.signalDatatype_' datatype=[system::DataTypeNode | STRING]
;
	
/*Relations:
	relation+=Relation (conj+=Conjunction relation+=Relation)*
;*/

/* 
Relation:
	fstObject=ObjectOrValue negation=Negation? comp=Comparators secObject=ObjectOrValue 
;*/
/*
Functions:
	function+=Function (conj+=Conjunction function+=Function)*
;

Function:
	op+=Operators? function+=SimpleFunction (op+=Operators function+=Function)* |
	'(' op+=Operators? function+=SimpleFunction (op+=Operators function+=Function)* ')' 
;


SimpleFunction:
	op=Operators fstObject=ObjectOrValue |
	'(' op=Operators fstObject=ObjectOrValue ')' |
	fstObject=ObjectOrValue op=Operators secObject=ObjectOrValue |
	'(' fstObject=ObjectOrValue op=Operators secObject=ObjectOrValue ')'
;
*/

/*ObjectOrValue:
	(object=Object | value=Value)
;*/

/*Objects:
	object+=Object (conj+=Conjunction object+= Object)*
;*/



/*Object:
	(object=ID | object=STRING) 
;*/

/* =========== VALUES =========== */

/*
Intervall:
	'[' lower=Value','higher=Value ']'
;


ValueSet:
	 '{' (elements+=Value) (';'elements+=Value)*'}'
;

ObjectSet:
	  '{' (elements+=Object) (';'elements+=Object)*'}'
;*/




/*WORD returns ecore::EString: 
	ID('-'ID)*
;*/

 
FLOAT returns ecore::EFloat:
	INT'.'INT
;



/* =========== BASIC SYNTAX =========== */

Operators:
	  Comparators 
	| Calculation 
	| Relative 
	| Conclusion 
	| Equivalence 
	//| Unknown 
	| Negation 
	//| Quantification 
	//| Existance 
	| Junctor
;


Calculation:
	'+' | '-' | '*' | '/' | '^' 
;

Unknown:
	'?'
;

Conclusion:
	'=>' | '==>' | '<==' | '~>' | '<~'
;

Equivalence:
	'<=>' | '<==>'
;

Relative:
 // for which
	':' 
// in relation to
	| '~'
;

Negation:
	'!'
;

Quantification:
	'V'
;

Existance:
	'E'
;

Junctor:
	/** and */
	'&' |
	
	/** or */
	'|'
;
	
Comparators:
	/** -> SizeAdverbial (higher, more, larger), ComparisonAdverbial (faster, better),
	 *        PositionAdverbial (above, on, in_front_of) */
	'>' |
	
	/** -> SizeAdverbial (less, smaller), ComparisonAdverbial (slower),
	 *        PositionAdverbial (below, behind, under) */ 
	'<' |
	 
	/** -> ComparisonAdverbial (equal) */
	'=' | 
	
	/** ->  SizeAdverbial (as_long_as) */
	'==' | 
	
	/** greater or equal  */
	'>=' |
	
	/** smaller or equal */ 
	'<=' | 
	
	/** -> PositionAdverbial (out) */
	'<>' | 
	
	/** -> PositionAdverbial (between, in, within) */
	'><' | 
	
	/** -> PositionAdverbial (next) */
	'>=<'
	
	/** ('<<' a lot smaller, '>>' a lot bigger, '<<<' much smaller, '>>>' much bigger) */ 
	// | '<<' | '<<<' | '>>' | '>>>'
;






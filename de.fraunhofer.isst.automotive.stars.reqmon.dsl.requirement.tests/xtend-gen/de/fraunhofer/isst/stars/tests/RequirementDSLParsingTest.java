/**
 * generated by Xtext 2.14.0
 */
package de.fraunhofer.isst.stars.tests;

import com.google.inject.Inject;
import de.fraunhofer.isst.stars.requirementDSL.Model;
import de.fraunhofer.isst.stars.tests.RequirementDSLInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(RequirementDSLInjectorProvider.class)
@SuppressWarnings("all")
public class RequirementDSLParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void loadModel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Req 1: The system must not perform a lane change to any lane if a vehicle is on that lane and the vehicle is behind the ego vehicle and the vehicle´s relative velocity is more than 5 m/s.");
    _builder.newLine();
    _builder.append("Req 2: The system must not perform a lane change to any lane if a vehicle is on that lane and the vehicle is in front to the ego vehicle and the vehicle´s relative velocity is less than 5 m/s.");
    _builder.newLine();
    _builder.append("Req Req3a: The system must not perform a lane change to any lane if a vehicle is on the ego lane and the vehicle is in_front_of the ego-vehicle and the vehicle´s distance in relation to the ego-vehicle is less than 1m.");
    _builder.newLine();
    _builder.append("Req Req3b: The system must not perform a lane change to any lane if a vehicle is on the ego-lane and the vehicle is in_front_of the ego-vehicle and the vehicle´s distance is less than 1 m in relation to the ego-vehicle.");
    _builder.newLine();
    _builder.append("Req 4: The system must not perform a lane change to any lane if a vehicle is on the ego lane and the vehicle is behind the ego vehicle  and the vehicle´s relative velocity is larger than 10 m/s.");
    _builder.newLine();
    _builder.append("Req 5: The system must not perform a lane change to any lane if a vehicle is on that lane and the vehicle is next to the ego vehicle and the vehicle´s relative velocity is less than 2m/s.");
    _builder.newLine();
    _builder.append("Req 5: The system must not perform a lane change to any lane if the lane´s markings are solid.");
    _builder.newLine();
    _builder.append("Req 6: The system must not perform a lane change to any lane if the lane´s markings is unknown.");
    _builder.newLine();
    _builder.append("Req 7: The system must not perform a lane change to any lane if the lane is unknown.");
    _builder.newLine();
    _builder.append("Req 8: The system must not perform a lane change to any lane if the lane is not existing.");
    _builder.newLine();
    _builder.append("Req 9: The system must not perform a lane change to any lane if the  lane is a restricted lane.");
    _builder.newLine();
    _builder.append("Req 10: The system must not perform a lane change to any lane if the lane is a emergency lane.");
    _builder.newLine();
    _builder.append("Req 12: The system must not perform a lane change to any lane if the lane is next to a highway on-ramp.");
    _builder.newLine();
    _builder.append("Req 13: The system must not perform a lane change to any lane if the lane´s curvature is higher than 25 rad/m.");
    _builder.newLine();
    _builder.append("Req 14: The system must not perform a lane change to any lane if ego-vehicle´s velocity is less than 10 m/s.");
    _builder.newLine();
    _builder.append("Req 15: The system must not perform a lane change to any lane if domain is not handled.");
    _builder.newLine();
    _builder.append("Req 16: The system must not perform a lane change to any lane if the driver overturns the system with more than 10 nm.");
    _builder.newLine();
    _builder.append("Req Req17a: The system must not perform a lane change to any lane if the ego-vehicle´s lateral-offset in relation to the ego-lane´s center is more than 0.4 m. ");
    _builder.newLine();
    _builder.append("Req Req17b: The system must not perform a lane change to any lane if the ego-vehicle´s lateral-offset in relation to the ego-lane´s center is more than 0.4 m and a lane-change is not in progress.");
    _builder.newLine();
    this.testSequence(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("Req: x x.");
    _builder_1.newLine();
    _builder_1.append("Req: x x;");
    _builder_1.newLine();
    _builder_1.append("Req x4: x x.");
    _builder_1.newLine();
    _builder_1.append("Req x4: x x;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("Req : The test must be successful.");
    _builder_1.newLine();
    _builder_1.append("Req : The test must be successful;");
    _builder_1.newLine();
    _builder_1.append("Req: The test must be successful.");
    _builder_1.newLine();
    _builder_1.append("Req: The test must be successful;");
    _builder_1.newLine();
    _builder_1.append("Req id123: The test must be successful.");
    _builder_1.newLine();
    _builder_1.append("Req id123: The test must be successful;");
    _builder_1.newLine();
    _builder_1.newLine();
    this.testSequence(_builder_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("Req 1: When x x then x x.");
    _builder_2.newLine();
    _builder_2.append("Req 2: When x x, then x x.");
    _builder_2.newLine();
    _builder_2.append("Req 3: When x x then x x if x x.");
    _builder_2.newLine();
    _builder_2.append("Req 4: When x x, then x x if x x.");
    _builder_2.newLine();
    _builder_2.append("Req 5: When x x, then x x, if x x.");
    _builder_2.newLine();
    _builder_2.append("Req 6: x x if x x.");
    _builder_2.newLine();
    _builder_2.append("Req 7: x x, if x x.");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("Req: When the precondition is correct then the test must be successful.");
    _builder_2.newLine();
    _builder_2.append("Req: When the precondition is correct, then the test must be successful.");
    _builder_2.newLine();
    _builder_2.append("Req: When the precondition is correct then the test must be successful if the postcondition is true.");
    _builder_2.newLine();
    _builder_2.append("Req: When the precondition is correct, then the test must be successful if the postcondition is true.");
    _builder_2.newLine();
    _builder_2.append("Req: When the precondition is correct, then the test must be successful, if the postcondition is true.");
    _builder_2.newLine();
    _builder_2.append("Req: The test must be successful if the postcondition is true.");
    _builder_2.newLine();
    _builder_2.append("Req: The test must be successful, if the postcondition is true.");
    _builder_2.newLine();
    _builder_2.newLine();
    this.testSequence(_builder_2);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("Req 1: If x x then x x.");
    _builder_3.newLine();
    _builder_3.append("Req 1: After x x then x x.");
    _builder_3.newLine();
    _builder_3.append("Req 1: Once x x then x x.");
    _builder_3.newLine();
    _builder_3.append("Req 1: When x x then x x.");
    _builder_3.newLine();
    _builder_3.append("Req 1: Whenever x x then x x.");
    _builder_3.newLine();
    _builder_3.append("Req 1: While x x then x x.");
    _builder_3.newLine();
    _builder_3.append("Req 1: Before x x then x x.");
    _builder_3.newLine();
    _builder_3.append("Req 1: Until x x then x x.");
    _builder_3.newLine();
    _builder_3.append("Req 2: x x if x x.");
    _builder_3.newLine();
    _builder_3.append("Req 2: x x after x x.");
    _builder_3.newLine();
    _builder_3.append("Req 2: x x once x x.");
    _builder_3.newLine();
    _builder_3.append("Req 2: x x when x x.");
    _builder_3.newLine();
    _builder_3.append("Req 2: x x whenever x x.");
    _builder_3.newLine();
    _builder_3.append("Req 2: x x while x x.");
    _builder_3.newLine();
    _builder_3.append("Req 2: x x before x x.");
    _builder_3.newLine();
    _builder_3.append("Req 2: x x until x x.");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("Req: The test must be successful If the precondition is correct.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be successful if the precondition is correct.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be successful After the precondition is correct.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be successful after the precondition is correct.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be sucessful Once the precondition has been correct.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be sucessful once the precondition has been correct.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be successful When the precondition is correct.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be successful when the precondition is correct.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be sucessful Whenever the precondition has been correct.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be sucessful whenever the precondition has been correct.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be sucessful While the system is build.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be sucessful while the system is build.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be sucessful Before the system is ready.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be sucessful before the system is ready.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be sucessful Until the system is changed.");
    _builder_3.newLine();
    _builder_3.append("Req: The test must be sucessful until the system is changed.");
    _builder_3.newLine();
    _builder_3.newLine();
    this.testSequence(_builder_3);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("Req 1: Globally x x.");
    _builder_4.newLine();
    _builder_4.append("Req 1: Always x x.");
    _builder_4.newLine();
    _builder_4.append("Req 1: Sometimes x x.");
    _builder_4.newLine();
    _builder_4.append("Req 1: Eventually x x.");
    _builder_4.newLine();
    _builder_4.append("Req 2: If x x then globally x x.");
    _builder_4.newLine();
    _builder_4.append("Req 2: If x x then always x x.");
    _builder_4.newLine();
    _builder_4.append("Req 2: If x x then sometimes x x.");
    _builder_4.newLine();
    _builder_4.append("Req 2: If x x then eventually x x.");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("Req: The test must be successful.");
    _builder_4.newLine();
    _builder_4.append("Req: the test must be successful.");
    _builder_4.newLine();
    _builder_4.append("Req: Globally the test must be successful.");
    _builder_4.newLine();
    _builder_4.append("Req: globally the test must be successful.");
    _builder_4.newLine();
    _builder_4.append("Req: Always the test must be successful.");
    _builder_4.newLine();
    _builder_4.append("Req: always the test must be successful.");
    _builder_4.newLine();
    _builder_4.append("Req: Sometimes the test must be successful.");
    _builder_4.newLine();
    _builder_4.append("Req: sometimes the test must be successful.");
    _builder_4.newLine();
    _builder_4.append("Req: Eventually the test must be successful.");
    _builder_4.newLine();
    _builder_4.append("Req: eventually the test must be successful.");
    _builder_4.newLine();
    _builder_4.newLine();
    this.testSequence(_builder_4);
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("Req 1: x x and x x.");
    _builder_5.newLine();
    _builder_5.append("Req 1: x x or x x.");
    _builder_5.newLine();
    _builder_5.append("Req 2: if x x and x x then x x.");
    _builder_5.newLine();
    _builder_5.append("Req 2: if x x or x x then x x.");
    _builder_5.newLine();
    _builder_5.append("Req 3: x x if x x and x x.");
    _builder_5.newLine();
    _builder_5.append("Req 3: x x if x x or x x.");
    _builder_5.newLine();
    _builder_5.append("Req 4: if x x and x x then x x and x x if x x and x x.");
    _builder_5.newLine();
    _builder_5.append("Req 4: if x x or x x then x x or x x if x x or x x.");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("Req: The test must be successful if the precondition is correct and the system is important.");
    _builder_5.newLine();
    _builder_5.append("Req: The test must be successful if the precondition is correct or the system is complex.");
    _builder_5.newLine();
    _builder_5.append("Req: The test must be successful if the precondition is correct and the system is important or the system is complex.");
    _builder_5.newLine();
    _builder_5.append("Req: The test must be successful and the precondition must be correct and the system should be important.");
    _builder_5.newLine();
    _builder_5.append("Req: The test must be successful and the precondition must be correct or it should be nice.");
    _builder_5.newLine();
    _builder_5.append("Req: The test must be successful and the precondition must be correct and the system should be important or it should be nice.");
    _builder_5.newLine();
    _builder_5.newLine();
    this.testSequence(_builder_5);
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append("Req 1: x shall x.");
    _builder_6.newLine();
    _builder_6.append("Req 1: x should x.");
    _builder_6.newLine();
    _builder_6.append("Req 1: x will x.");
    _builder_6.newLine();
    _builder_6.append("Req 1: x would x.");
    _builder_6.newLine();
    _builder_6.append("Req 1: x can x.");
    _builder_6.newLine();
    _builder_6.append("Req 1: x could x.");
    _builder_6.newLine();
    _builder_6.append("Req 1: x must x.");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("Req 2: x shall not x.");
    _builder_6.newLine();
    _builder_6.append("Req 2: x should not x.");
    _builder_6.newLine();
    _builder_6.append("Req 2: x will not x.");
    _builder_6.newLine();
    _builder_6.append("Req 2: x would not x.");
    _builder_6.newLine();
    _builder_6.append("Req 2: x can not x.");
    _builder_6.newLine();
    _builder_6.append("Req 2: x could not x.");
    _builder_6.newLine();
    _builder_6.append("Req 2: x must not x.");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("Req 3: in relation to x, x shall x.");
    _builder_6.newLine();
    _builder_6.append("Req 4: in relation to x, x shall not x.");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("Req 5: x shall is x.");
    _builder_6.newLine();
    _builder_6.append("Req 5: x shall are x.");
    _builder_6.newLine();
    _builder_6.append("Req 5: x shall be x.");
    _builder_6.newLine();
    _builder_6.append("Req 5: x shall been x.");
    _builder_6.newLine();
    _builder_6.append("Req 5: x shall has x.");
    _builder_6.newLine();
    _builder_6.append("Req 5: x shall have x.");
    _builder_6.newLine();
    _builder_6.append("Req 5: x shall do x.");
    _builder_6.newLine();
    _builder_6.append("Req 5: x shall does x.");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("Req 6: x shall not do x.");
    _builder_6.newLine();
    _builder_6.append("Req 7: in relation to x, x shall do x.");
    _builder_6.newLine();
    _builder_6.append("Req 8: in relation to x, x shall not do x.");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("Req 9: x shall x in x.");
    _builder_6.newLine();
    _builder_6.append("Req 10: x shall not x in x.");
    _builder_6.newLine();
    _builder_6.append("Req 11: x shall do x in x.");
    _builder_6.newLine();
    _builder_6.append("Req 12: x shall not do x in x.");
    _builder_6.newLine();
    _builder_6.append("Req 13: in relation to x, x shall not do x in x.");
    _builder_6.newLine();
    _builder_6.newLine();
    this.testSequence(_builder_6);
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append("Req 1: x is.");
    _builder_7.newLine();
    _builder_7.append("Req 2: in relation to x, x is.");
    _builder_7.newLine();
    _builder_7.append("Req 3: x doesn´t is.");
    _builder_7.newLine();
    _builder_7.append("Req 4: in relation to x, x doesn´t is.");
    _builder_7.newLine();
    _builder_7.append("Req 5: x is x.");
    _builder_7.newLine();
    _builder_7.append("Req 6: in relation to x, x is x.");
    _builder_7.newLine();
    _builder_7.append("Req 7: x doesn´t is x.");
    _builder_7.newLine();
    _builder_7.append("Req 8: in relation to x, x doesn´t is x.");
    _builder_7.newLine();
    _builder_7.append("Req 9: x is in x.");
    _builder_7.newLine();
    _builder_7.append("Req 10: in relation to x, x is in x.");
    _builder_7.newLine();
    _builder_7.append("Req 11: x doesn´t is in x.");
    _builder_7.newLine();
    _builder_7.append("Req 12: in relation to x, x doesn´t is in x.");
    _builder_7.newLine();
    _builder_7.append("Req 13: x is x in x.");
    _builder_7.newLine();
    _builder_7.append("Req 14: in relation to x, x is x in x.");
    _builder_7.newLine();
    _builder_7.append("Req 15: x doesn´t is x in x.");
    _builder_7.newLine();
    _builder_7.append("Req 16: in relation to x, x doesn´t is x in x.");
    _builder_7.newLine();
    _builder_7.append("Req 17: x x.");
    _builder_7.newLine();
    _builder_7.append("Req 18: in relation to x, x x.");
    _builder_7.newLine();
    _builder_7.append("Req 19: x x in x.");
    _builder_7.newLine();
    _builder_7.append("Req 20: in relation to x, x x in x.");
    _builder_7.newLine();
    _builder_7.newLine();
    this.testSequence(_builder_7);
    StringConcatenation _builder_8 = new StringConcatenation();
    _builder_8.append("Req 1: There exist x, who must x,.");
    _builder_8.newLine();
    _builder_8.append("Req 1: There exists x, who must x,.");
    _builder_8.newLine();
    _builder_8.append("Req 2: There exist x, who must x, and x x.");
    _builder_8.newLine();
    _builder_8.append("Req 2: There exists x, who must x, and x x.");
    _builder_8.newLine();
    _builder_8.append("Req 3: x x and there exist x, who must x, and x x.");
    _builder_8.newLine();
    _builder_8.append("Req 3: x x and there exists x, who must x, and x x.");
    _builder_8.newLine();
    _builder_8.newLine();
    this.testSequence(_builder_8);
    StringConcatenation _builder_9 = new StringConcatenation();
    _builder_9.append("Req 1: x´s x shall x.");
    _builder_9.newLine();
    _builder_9.append("Req 2: x´s x in relation to x shall x.");
    _builder_9.newLine();
    _builder_9.append("Req 3: x´s x shall not x.");
    _builder_9.newLine();
    _builder_9.append("Req 4: x´s x in relation to x shall not x.");
    _builder_9.newLine();
    _builder_9.append("Req 5: x´s x shall do x.");
    _builder_9.newLine();
    _builder_9.append("Req 6: x´s x in relation to x shall do x.");
    _builder_9.newLine();
    _builder_9.append("Req 7: x´s x shall not do x.");
    _builder_9.newLine();
    _builder_9.append("Req 8: x´s x in relation to x shall not do x.");
    _builder_9.newLine();
    _builder_9.append("Req 9: x´s x shall x in x.");
    _builder_9.newLine();
    _builder_9.append("Req 10: x´s x in relation to x shall x in x.");
    _builder_9.newLine();
    _builder_9.append("Req 11: x´s x shall not x in x.");
    _builder_9.newLine();
    _builder_9.append("Req 12: x´s x in relation to x shall not x in x.");
    _builder_9.newLine();
    _builder_9.append("Req 13: x´s x shall do x in x.");
    _builder_9.newLine();
    _builder_9.append("Req 14: x´s x in relation to x shall do x in x.");
    _builder_9.newLine();
    _builder_9.append("Req 15: x´s x shall not do x in x.");
    _builder_9.newLine();
    _builder_9.append("Req 16: x´s x in relation to x shall not do x in x.");
    _builder_9.newLine();
    _builder_9.append("Req 17: x´s x is x.");
    _builder_9.newLine();
    _builder_9.append("Req 18: x´s x is in x.");
    _builder_9.newLine();
    _builder_9.append("Req 19: x´s x in relation to x is x.");
    _builder_9.newLine();
    _builder_9.append("Req 20: x´s x in relation to x is in x.");
    _builder_9.newLine();
    _builder_9.append("Req 21: x´s x is x in x.");
    _builder_9.newLine();
    _builder_9.append("Req 22: x´s x is in x in relation to x.");
    _builder_9.newLine();
    _builder_9.append("Req 23: x´s x in relation to x is x in x.");
    _builder_9.newLine();
    _builder_9.append("Req 24: x´s x in relation to x is x in relation to x.");
    _builder_9.newLine();
    _builder_9.newLine();
    this.testSequence(_builder_9);
    StringConcatenation _builder_10 = new StringConcatenation();
    _builder_10.append("Req 1: There exists x, who must x and when x x,.");
    _builder_10.newLine();
    _builder_10.append("Req 1: There exists x, who must x or when x x,.");
    _builder_10.newLine();
    _builder_10.newLine();
    this.testSequence(_builder_10);
    StringConcatenation _builder_11 = new StringConcatenation();
    _builder_11.append("Req 1: There exists x, which must x,.");
    _builder_11.newLine();
    _builder_11.append("Req 1: There exists x, who must x,.");
    _builder_11.newLine();
    _builder_11.append("Req 1: There exists x, that must x,.");
    _builder_11.newLine();
    _builder_11.append("Req 2: There exists x, which must not x,.");
    _builder_11.newLine();
    _builder_11.append("Req 3: There exists x, who must x in x,.");
    _builder_11.newLine();
    _builder_11.append("Req 4: There exists x, that must not x in x,.");
    _builder_11.newLine();
    _builder_11.append("Req 5: There exists x, which x,.");
    _builder_11.newLine();
    _builder_11.append("Req 6: There exists x, who x not x,.");
    _builder_11.newLine();
    _builder_11.append("Req 7: There exists x, that x in x,.");
    _builder_11.newLine();
    _builder_11.append("Req 8: There exists x, who x not x in x,.");
    _builder_11.newLine();
    _builder_11.append("Req 9: There exists x, whose x must x,.");
    _builder_11.newLine();
    _builder_11.append("Req 9: There exists x, whom x must x,.");
    _builder_11.newLine();
    _builder_11.append("Req 10: There exists x, whose x x,.");
    _builder_11.newLine();
    _builder_11.append("Req 10: There exists x, whom x x,.");
    _builder_11.newLine();
    _builder_11.newLine();
    this.testSequence(_builder_11);
    StringConcatenation _builder_12 = new StringConcatenation();
    _builder_12.append("Req 1: x and x x.");
    _builder_12.newLine();
    _builder_12.append("Req 1: x or x x.");
    _builder_12.newLine();
    _builder_12.append("Req 2: x and x x and x x.");
    _builder_12.newLine();
    _builder_12.newLine();
    this.testSequence(_builder_12);
    StringConcatenation _builder_13 = new StringConcatenation();
    _builder_13.append("Req 1: all x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: every x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: each x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: whole x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: any x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: several x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: either x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: All x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: Every x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: Each x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: Whole x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: Any x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: Several x x.");
    _builder_13.newLine();
    _builder_13.append("Req 1: Either x x.");
    _builder_13.newLine();
    _builder_13.newLine();
    _builder_13.append("Req 2: The x x.");
    _builder_13.newLine();
    _builder_13.append("Req 2: the x x.");
    _builder_13.newLine();
    _builder_13.append("Req 2: A x x.");
    _builder_13.newLine();
    _builder_13.append("Req 2: a x x.");
    _builder_13.newLine();
    _builder_13.append("Req 2: An x x.");
    _builder_13.newLine();
    _builder_13.append("Req 2: an x x.");
    _builder_13.newLine();
    _builder_13.newLine();
    _builder_13.append("Req 3: That x x.");
    _builder_13.newLine();
    _builder_13.append("Req 3: that x x.");
    _builder_13.newLine();
    _builder_13.append("Req 3: This x x.");
    _builder_13.newLine();
    _builder_13.append("Req 3: this x x.");
    _builder_13.newLine();
    _builder_13.newLine();
    _builder_13.append("Req 4: The \"x\" x.");
    _builder_13.newLine();
    _builder_13.append("Req 4: the \'x\' x.");
    _builder_13.newLine();
    _builder_13.newLine();
    this.testSequence(_builder_13);
    StringConcatenation _builder_14 = new StringConcatenation();
    _builder_14.append("Req 1: the x x x.");
    _builder_14.newLine();
    _builder_14.append("Req 2: any x \"x\".");
    _builder_14.newLine();
    _builder_14.append("Req 2: a x \'x\'.");
    _builder_14.newLine();
    _builder_14.append("Req 3: That x x a x.");
    _builder_14.newLine();
    _builder_14.append("Req 4: an x x x a x.");
    _builder_14.newLine();
    _builder_14.newLine();
    this.testSequence(_builder_14);
    StringConcatenation _builder_15 = new StringConcatenation();
    _builder_15.append("Req 1: x x all x.");
    _builder_15.newLine();
    _builder_15.append("Req 2: x x the x.");
    _builder_15.newLine();
    _builder_15.append("Req 3: x x this x.");
    _builder_15.newLine();
    _builder_15.append("Req 4: x x a x x.");
    _builder_15.newLine();
    _builder_15.append("Req 5: x x a \"x\".");
    _builder_15.newLine();
    _builder_15.append("Req 5: x x a \'x\'.");
    _builder_15.newLine();
    _builder_15.newLine();
    this.testSequence(_builder_15);
    StringConcatenation _builder_16 = new StringConcatenation();
    _builder_16.append("Req 1: x´s x x must x.");
    _builder_16.newLine();
    _builder_16.append("Req 2: x´s \"x\" must x.");
    _builder_16.newLine();
    _builder_16.append("Req 2: x´s \'x\' must x.");
    _builder_16.newLine();
    _builder_16.newLine();
    this.testSequence(_builder_16);
    StringConcatenation _builder_17 = new StringConcatenation();
    _builder_17.append("Req 1: x x in x to x.");
    _builder_17.newLine();
    _builder_17.append("Req 2: x x in x in relation to x.");
    _builder_17.newLine();
    _builder_17.append("Req 3: x x in x to x in relation to x.");
    _builder_17.newLine();
    _builder_17.append("Req 4: x x in relation to x.");
    _builder_17.newLine();
    _builder_17.append("Req 5: x x in relation to x in x.");
    _builder_17.newLine();
    _builder_17.append("Req 6: x x in relation to x in x to x.");
    _builder_17.newLine();
    _builder_17.newLine();
    this.testSequence(_builder_17);
    StringConcatenation _builder_18 = new StringConcatenation();
    _builder_18.append("Req 1: x x x x.");
    _builder_18.newLine();
    _builder_18.append("Req 2: x x all x x.");
    _builder_18.newLine();
    _builder_18.append("Req 3: x x the x x.");
    _builder_18.newLine();
    _builder_18.append("Req 4: x x this x x.");
    _builder_18.newLine();
    _builder_18.append("Req 5: x x a \"x\".");
    _builder_18.newLine();
    _builder_18.append("Req 5: x x a \'x\'.");
    _builder_18.newLine();
    _builder_18.newLine();
    this.testSequence(_builder_18);
    StringConcatenation _builder_19 = new StringConcatenation();
    _builder_19.append("Req : in relation to x, x x.");
    _builder_19.newLine();
    _builder_19.append("//: In relation to x, x x.");
    _builder_19.newLine();
    _builder_19.newLine();
    this.testSequence(_builder_19);
    StringConcatenation _builder_20 = new StringConcatenation();
    _builder_20.append("Req 1: x x in the x.");
    _builder_20.newLine();
    _builder_20.append("Req 2: x x in x.");
    _builder_20.newLine();
    _builder_20.append("Req 3: x x in the \"x\".");
    _builder_20.newLine();
    _builder_20.append("Req 3: x x in the \'x\'.");
    _builder_20.newLine();
    _builder_20.append("Req 4: x x in \"x\".");
    _builder_20.newLine();
    _builder_20.append("Req 4: x x in \'x\'.");
    _builder_20.newLine();
    _builder_20.append("Req 5: in relation to the x, x x.");
    _builder_20.newLine();
    _builder_20.append("Req 5: in relation to x, x x.");
    _builder_20.newLine();
    _builder_20.append("Req 5: in relation to the \"x\", x x.");
    _builder_20.newLine();
    _builder_20.append("Req 5: in relation to the \'x\', x x.");
    _builder_20.newLine();
    _builder_20.append("Req 5: in relation to \"x\", x x.");
    _builder_20.newLine();
    _builder_20.append("Req 5: in relation to \'x\', x x.");
    _builder_20.newLine();
    _builder_20.newLine();
    this.testSequence(_builder_20);
    StringConcatenation _builder_21 = new StringConcatenation();
    _builder_21.append("Req 1: There exist x, who x,.");
    _builder_21.newLine();
    _builder_21.append("Req 2: there exist x, who x,.");
    _builder_21.newLine();
    _builder_21.append("Req 3: There exists x, who x,.");
    _builder_21.newLine();
    _builder_21.append("Req 4: there exists x, who x,.");
    _builder_21.newLine();
    _builder_21.append("Req 5: There always exist x, who x,.");
    _builder_21.newLine();
    _builder_21.append("Req 5: there always exist x, who x,.");
    _builder_21.newLine();
    _builder_21.append("Req 5: There always exists x, who x,.");
    _builder_21.newLine();
    _builder_21.append("Req 5: there always exists x, who x,.");
    _builder_21.newLine();
    _builder_21.newLine();
    this.testSequence(_builder_21);
    StringConcatenation _builder_22 = new StringConcatenation();
    _builder_22.append("Req 1: x is x.");
    _builder_22.newLine();
    _builder_22.append("Req 2: x is not x.");
    _builder_22.newLine();
    _builder_22.append("Req 3: x doesn´t x.");
    _builder_22.newLine();
    _builder_22.append("Req 3: x don´t x.");
    _builder_22.newLine();
    _builder_22.append("Req 3: x isn´t x.");
    _builder_22.newLine();
    _builder_22.append("Req 3: x aren´t x.");
    _builder_22.newLine();
    _builder_22.append("Req 4: x´s x is x.");
    _builder_22.newLine();
    _builder_22.append("Req 4: x´s x is not x.");
    _builder_22.newLine();
    _builder_22.append("Req 4: x´s x doesn´t x.");
    _builder_22.newLine();
    _builder_22.newLine();
    this.testSequence(_builder_22);
    StringConcatenation _builder_23 = new StringConcatenation();
    _builder_23.append("Req : x x in relation to x.");
    _builder_23.newLine();
    _builder_23.newLine();
    this.testSequence(_builder_23);
    StringConcatenation _builder_24 = new StringConcatenation();
    _builder_24.append("Req 1: x x in relation to x.");
    _builder_24.newLine();
    _builder_24.append("Req 2: x x in relation to x´s x.");
    _builder_24.newLine();
    _builder_24.append("Req 3: x x in relation to x and_to x.");
    _builder_24.newLine();
    _builder_24.append("Req 3: x x in relation to x or_to x.");
    _builder_24.newLine();
    _builder_24.append("Req 4: x x in relation to x´s x and_to x.");
    _builder_24.newLine();
    _builder_24.append("Req 4: x x in relation to x´s x or_to x.");
    _builder_24.newLine();
    _builder_24.append("Req 5: x x in relation to x and_to x´s x.");
    _builder_24.newLine();
    _builder_24.append("Req 5: x x in relation to x or_to x´s x.");
    _builder_24.newLine();
    _builder_24.append("Req 6: x x in relation to x´s x and_to x´s x.");
    _builder_24.newLine();
    _builder_24.append("Req 6: x x in relation to x´s x or_to x´s x.");
    _builder_24.newLine();
    _builder_24.append("Req 7: x x in relation to x and_to x or_to x.");
    _builder_24.newLine();
    _builder_24.newLine();
    this.testSequence(_builder_24);
    StringConcatenation _builder_25 = new StringConcatenation();
    _builder_25.append("Req 1: x x in x.");
    _builder_25.newLine();
    _builder_25.append("Req 2: x x in 1.0.");
    _builder_25.newLine();
    _builder_25.append("Req 3: x x in {x}.");
    _builder_25.newLine();
    _builder_25.newLine();
    this.testSequence(_builder_25);
    StringConcatenation _builder_26 = new StringConcatenation();
    _builder_26.append("Req 1: x x higher x.");
    _builder_26.newLine();
    _builder_26.append("Req 1: x x less x.");
    _builder_26.newLine();
    _builder_26.append("Req 1: x x more x.");
    _builder_26.newLine();
    _builder_26.append("Req 1: x x larger x.");
    _builder_26.newLine();
    _builder_26.append("Req 1: x x smaller x.");
    _builder_26.newLine();
    _builder_26.append("Req 1: x x as_long_as x.");
    _builder_26.newLine();
    _builder_26.newLine();
    _builder_26.append("Req 2: x x between x.");
    _builder_26.newLine();
    _builder_26.append("Req 2: x x next x.");
    _builder_26.newLine();
    _builder_26.append("Req 2: x x on x.");
    _builder_26.newLine();
    _builder_26.append("Req 2: x x above x.");
    _builder_26.newLine();
    _builder_26.append("Req 2: x x in x.");
    _builder_26.newLine();
    _builder_26.append("Req 2: x x within x.");
    _builder_26.newLine();
    _builder_26.append("Req 2: x x in_front_of x.");
    _builder_26.newLine();
    _builder_26.append("Req 2: x x behind x.");
    _builder_26.newLine();
    _builder_26.append("Req 2: x x out x.");
    _builder_26.newLine();
    _builder_26.append("Req 2: x x under x.");
    _builder_26.newLine();
    _builder_26.newLine();
    _builder_26.append("Req 3: x x equal x.");
    _builder_26.newLine();
    _builder_26.append("Req 3: x x faster x.");
    _builder_26.newLine();
    _builder_26.append("Req 3: x x slower x.");
    _builder_26.newLine();
    _builder_26.append("Req 3: x x better x.");
    _builder_26.newLine();
    _builder_26.append("Req 3: x x by x.");
    _builder_26.newLine();
    _builder_26.append("Req 3: x x to x.");
    _builder_26.newLine();
    _builder_26.newLine();
    _builder_26.append("Req 4: x x higher than x.");
    _builder_26.newLine();
    _builder_26.append("Req 4: x x higher as x.");
    _builder_26.newLine();
    _builder_26.append("Req 4: x x higher to x.");
    _builder_26.newLine();
    _builder_26.append("Req 4: x x higher of x.");
    _builder_26.newLine();
    _builder_26.newLine();
    _builder_26.append("Req 5: x x with equal x.");
    _builder_26.newLine();
    _builder_26.append("Req 6: x x with more than x.");
    _builder_26.newLine();
    _builder_26.newLine();
    this.testSequence(_builder_26);
    StringConcatenation _builder_27 = new StringConcatenation();
    _builder_27.append("Req 1: x x in {x}.");
    _builder_27.newLine();
    _builder_27.append("Req 2: x x in {x; x}.");
    _builder_27.newLine();
    _builder_27.append("Req 3: x x in {x; x; x}.");
    _builder_27.newLine();
    _builder_27.append("Req 4: x x in {a x}.");
    _builder_27.newLine();
    _builder_27.append("Req 4: x x in {the x; x}.");
    _builder_27.newLine();
    _builder_27.append("Req 4: x x in {all x; a x; the x}.");
    _builder_27.newLine();
    _builder_27.append("Req 5: x x in {1}.");
    _builder_27.newLine();
    _builder_27.append("Req 5: x x in {1; 1}.");
    _builder_27.newLine();
    _builder_27.append("Req 5: x x in {1; 1; 1}.");
    _builder_27.newLine();
    _builder_27.append("Req 6: x x in {1.1}.");
    _builder_27.newLine();
    _builder_27.append("Req 6: x x in {1.1; 1.1}.");
    _builder_27.newLine();
    _builder_27.append("Req 6: x x in {1.1; 1.0; 1}.");
    _builder_27.newLine();
    _builder_27.append("Req 7: x x in {1m}.");
    _builder_27.newLine();
    _builder_27.append("Req 7: x x in {1m; 1m}.");
    _builder_27.newLine();
    _builder_27.append("Req 7: x x in {1m; 10m; 100m}.");
    _builder_27.newLine();
    _builder_27.append("Req 7: x x in {1.1m}.");
    _builder_27.newLine();
    _builder_27.append("Req 7: x x in {1.1m; 1.1m}.");
    _builder_27.newLine();
    _builder_27.append("Req 7: x x in {1.1m; 10.0m; 100m}.");
    _builder_27.newLine();
    _builder_27.newLine();
    this.testSequence(_builder_27);
    StringConcatenation _builder_28 = new StringConcatenation();
    _builder_28.append("Req : x x in 1 ns.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 ms.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 s.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 sec.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 second.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 minute.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 minutes.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 min.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 hour.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 h.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 day.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 days.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 d.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 month.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 months.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 mon.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 year.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 years.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 1 y.");
    _builder_28.newLine();
    _builder_28.append("Req : x x in 10 ns.");
    _builder_28.newLine();
    _builder_28.newLine();
    this.testSequence(_builder_28);
    StringConcatenation _builder_29 = new StringConcatenation();
    _builder_29.append("Req : x x in [1,2].");
    _builder_29.newLine();
    _builder_29.append("Req : x x in [1m, 2m].");
    _builder_29.newLine();
    _builder_29.append("Req : x x in [1m, 2].");
    _builder_29.newLine();
    _builder_29.append("Req : x x in [1,2m].");
    _builder_29.newLine();
    _builder_29.append("Req : x x in [1.1,2.2].");
    _builder_29.newLine();
    _builder_29.append("Req : x x in [1.0m, 2m].");
    _builder_29.newLine();
    _builder_29.append("Req : x x in [1.4m, 2].");
    _builder_29.newLine();
    _builder_29.append("Req : x x in [1,2.5m].");
    _builder_29.newLine();
    _builder_29.newLine();
    this.testSequence(_builder_29);
    StringConcatenation _builder_30 = new StringConcatenation();
    _builder_30.append("Req 1: x x in 1.");
    _builder_30.newLine();
    _builder_30.append("Req 1: x x in 1 .");
    _builder_30.newLine();
    _builder_30.append("Req 1: x x in 1m.");
    _builder_30.newLine();
    _builder_30.append("Req 1: x x in 1 m.");
    _builder_30.newLine();
    _builder_30.append("Req 1: x x in 1.1.");
    _builder_30.newLine();
    _builder_30.append("Req 2: x x in 1.1 .");
    _builder_30.newLine();
    _builder_30.append("Req 2: x x in 1.1m.");
    _builder_30.newLine();
    _builder_30.append("Req 2: x x in 1.1 m.");
    _builder_30.newLine();
    _builder_30.append("Req 2: x x in 10.11.");
    _builder_30.newLine();
    _builder_30.newLine();
    this.testSequence(_builder_30);
    StringConcatenation _builder_31 = new StringConcatenation();
    _builder_31.append("Req 1: x x in 1 m.");
    _builder_31.newLine();
    _builder_31.append("Req 1: x x in 1 f.");
    _builder_31.newLine();
    _builder_31.append("Req 1: x x in 1 km.");
    _builder_31.newLine();
    _builder_31.append("Req 1: x x in 1 cm.");
    _builder_31.newLine();
    _builder_31.append("Req 1: x x in 1 mm.");
    _builder_31.newLine();
    _builder_31.append("Req 1: x x in 1 nm.");
    _builder_31.newLine();
    _builder_31.newLine();
    _builder_31.append("Req 2: x x in 1 bar.");
    _builder_31.newLine();
    _builder_31.append("Req 2: x x in 1 Pa.");
    _builder_31.newLine();
    _builder_31.append("Req 2: x x in 1 hPa.");
    _builder_31.newLine();
    _builder_31.newLine();
    _builder_31.append("Req 3: x x in 1 C.");
    _builder_31.newLine();
    _builder_31.append("Req 3: x x in 1 F.");
    _builder_31.newLine();
    _builder_31.newLine();
    _builder_31.append("Req 4: x x in 1 kg.");
    _builder_31.newLine();
    _builder_31.append("Req 4: x x in 1 g.");
    _builder_31.newLine();
    _builder_31.append("Req 4: x x in 1 mg.");
    _builder_31.newLine();
    _builder_31.append("Req 4: x x in 1 t.");
    _builder_31.newLine();
    _builder_31.newLine();
    _builder_31.append("Req 5: x x in 1 m/s.");
    _builder_31.newLine();
    _builder_31.append("Req 5: x x in 1 knots.");
    _builder_31.newLine();
    _builder_31.append("Req 5: x x in 1 km/h.");
    _builder_31.newLine();
    _builder_31.append("Req 5: x x in 1 m/min.");
    _builder_31.newLine();
    _builder_31.newLine();
    _builder_31.append("Req 6: x x in 1 rad/m.");
    _builder_31.newLine();
    _builder_31.append("Req 6: x x in 1°.");
    _builder_31.newLine();
    _builder_31.append("Req 6: x x in 1 rad.");
    _builder_31.newLine();
    _builder_31.append("Req 6: x x in 1 °/m.");
    _builder_31.newLine();
    _builder_31.newLine();
    _builder_31.append("Req 7: x x in 1 x.");
    _builder_31.newLine();
    _builder_31.append("Req 7: x x in 1.2 x.");
    _builder_31.newLine();
    _builder_31.append("Req 8: x x in 1 m x.");
    _builder_31.newLine();
    _builder_31.append("Req 8: x x in 1.2 m x.");
    _builder_31.newLine();
    _builder_31.append("Req 9: x x in 1 x x x.");
    _builder_31.newLine();
    _builder_31.append("Req 9: x x in 1.1 x x x.");
    _builder_31.newLine();
    _builder_31.append("Req 10: x x in 1 m x x x.");
    _builder_31.newLine();
    _builder_31.append("Req 10: x x in 1.2 m x x x.");
    _builder_31.newLine();
    _builder_31.newLine();
    this.testSequence(_builder_31);
    StringConcatenation _builder_32 = new StringConcatenation();
    _builder_32.append("Req x: x x.");
    _builder_32.newLine();
    _builder_32.append("Req x.: x x.");
    _builder_32.newLine();
    _builder_32.append("Req x1: x x.");
    _builder_32.newLine();
    _builder_32.append("Req x 1 : x x.");
    _builder_32.newLine();
    _builder_32.append("Req x.1: x x.");
    _builder_32.newLine();
    _builder_32.append("Req x.11: x x.");
    _builder_32.newLine();
    _builder_32.append("Req x.111: x x.");
    _builder_32.newLine();
    _builder_32.append("Req x.1.1: x x.");
    _builder_32.newLine();
    _builder_32.append("Req x.1 .1: x x.");
    _builder_32.newLine();
    _builder_32.append("Req 1: x x.");
    _builder_32.newLine();
    _builder_32.append("Req 1.1: x x.");
    _builder_32.newLine();
    _builder_32.append("Req 1 .1: x x.");
    _builder_32.newLine();
    _builder_32.append("Req 111: x x.");
    _builder_32.newLine();
    _builder_32.append("Req 11 .11: x x.");
    _builder_32.newLine();
    _builder_32.newLine();
    this.testSequence(_builder_32);
    StringConcatenation _builder_33 = new StringConcatenation();
    _builder_33.append("Req x-x: x x.");
    _builder_33.newLine();
    _builder_33.newLine();
    _builder_33.append("Req b: x x.");
    _builder_33.newLine();
    _builder_33.append("Req B: x x.");
    _builder_33.newLine();
    _builder_33.append("Req _: x x.");
    _builder_33.newLine();
    _builder_33.newLine();
    _builder_33.append("Req aa: x x.");
    _builder_33.newLine();
    _builder_33.append("Req aA: x x.");
    _builder_33.newLine();
    _builder_33.append("Req a_: x x.");
    _builder_33.newLine();
    _builder_33.append("Req a-: x x.");
    _builder_33.newLine();
    _builder_33.append("Req a1: x x.");
    _builder_33.newLine();
    _builder_33.newLine();
    _builder_33.append("Req Aa: x x.");
    _builder_33.newLine();
    _builder_33.append("Req AA: x x.");
    _builder_33.newLine();
    _builder_33.append("Req A_: x x.");
    _builder_33.newLine();
    _builder_33.append("Req A-: x x.");
    _builder_33.newLine();
    _builder_33.append("Req A1: x x.");
    _builder_33.newLine();
    _builder_33.newLine();
    _builder_33.append("Req _a: x x.");
    _builder_33.newLine();
    _builder_33.append("Req _A: x x.");
    _builder_33.newLine();
    _builder_33.append("Req __: x x.");
    _builder_33.newLine();
    _builder_33.append("Req _-: x x.");
    _builder_33.newLine();
    _builder_33.append("Req _0: x x.");
    _builder_33.newLine();
    _builder_33.newLine();
    _builder_33.append("Req ^a: x x.");
    _builder_33.newLine();
    _builder_33.append("Req ^A: x x.");
    _builder_33.newLine();
    _builder_33.append("Req ^_: x x.");
    _builder_33.newLine();
    _builder_33.newLine();
    this.testSequence(_builder_33);
    StringConcatenation _builder_34 = new StringConcatenation();
    _builder_34.append("Req : x x.");
    _builder_34.newLine();
    _builder_34.newLine();
    this.testSequence(_builder_34);
  }
  
  public void testSequence(final CharSequence seq) {
    try {
      final Model result = this.parseHelper.parse(seq);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder.append(_join);
      Assert.assertTrue(_builder.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}

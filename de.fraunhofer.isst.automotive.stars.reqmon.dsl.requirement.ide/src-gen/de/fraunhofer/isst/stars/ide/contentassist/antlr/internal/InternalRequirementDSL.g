/*
 * generated by Xtext 2.14.0
 */
grammar InternalRequirementDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.fraunhofer.isst.stars.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.fraunhofer.isst.stars.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.fraunhofer.isst.stars.services.RequirementDSLGrammarAccess;

}
@parser::members {
	private RequirementDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(RequirementDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getRequirementsAssignment()); }
		(rule__Model__RequirementsAssignment)*
		{ after(grammarAccess.getModelAccess().getRequirementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRequirement
entryRuleRequirement
:
{ before(grammarAccess.getRequirementRule()); }
	 ruleRequirement
{ after(grammarAccess.getRequirementRule()); } 
	 EOF 
;

// Rule Requirement
ruleRequirement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRequirementAccess().getGroup()); }
		(rule__Requirement__Group__0)
		{ after(grammarAccess.getRequirementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRequirementText
entryRuleRequirementText
:
{ before(grammarAccess.getRequirementTextRule()); }
	 ruleRequirementText
{ after(grammarAccess.getRequirementTextRule()); } 
	 EOF 
;

// Rule RequirementText
ruleRequirementText 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRequirementTextAccess().getGroup()); }
		(rule__RequirementText__Group__0)
		{ after(grammarAccess.getRequirementTextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalClause
entryRuleConditionalClause
:
{ before(grammarAccess.getConditionalClauseRule()); }
	 ruleConditionalClause
{ after(grammarAccess.getConditionalClauseRule()); } 
	 EOF 
;

// Rule ConditionalClause
ruleConditionalClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalClauseAccess().getGroup()); }
		(rule__ConditionalClause__Group__0)
		{ after(grammarAccess.getConditionalClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMainClause
entryRuleMainClause
:
{ before(grammarAccess.getMainClauseRule()); }
	 ruleMainClause
{ after(grammarAccess.getMainClauseRule()); } 
	 EOF 
;

// Rule MainClause
ruleMainClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainClauseAccess().getGroup()); }
		(rule__MainClause__Group__0)
		{ after(grammarAccess.getMainClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClauses
entryRuleClauses
:
{ before(grammarAccess.getClausesRule()); }
	 ruleClauses
{ after(grammarAccess.getClausesRule()); } 
	 EOF 
;

// Rule Clauses
ruleClauses 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClausesAccess().getGroup()); }
		(rule__Clauses__Group__0)
		{ after(grammarAccess.getClausesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause
entryRuleClause
:
{ before(grammarAccess.getClauseRule()); }
	 ruleClause
{ after(grammarAccess.getClauseRule()); } 
	 EOF 
;

// Rule Clause
ruleClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseAccess().getAlternatives()); }
		(rule__Clause__Alternatives)
		{ after(grammarAccess.getClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModalitySentence
entryRuleModalitySentence
:
{ before(grammarAccess.getModalitySentenceRule()); }
	 ruleModalitySentence
{ after(grammarAccess.getModalitySentenceRule()); } 
	 EOF 
;

// Rule ModalitySentence
ruleModalitySentence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModalitySentenceAccess().getGroup()); }
		(rule__ModalitySentence__Group__0)
		{ after(grammarAccess.getModalitySentenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicateSentence
entryRulePredicateSentence
:
{ before(grammarAccess.getPredicateSentenceRule()); }
	 rulePredicateSentence
{ after(grammarAccess.getPredicateSentenceRule()); } 
	 EOF 
;

// Rule PredicateSentence
rulePredicateSentence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getAlternatives()); }
		(rule__PredicateSentence__Alternatives)
		{ after(grammarAccess.getPredicateSentenceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExistenceSentence
entryRuleExistenceSentence
:
{ before(grammarAccess.getExistenceSentenceRule()); }
	 ruleExistenceSentence
{ after(grammarAccess.getExistenceSentenceRule()); } 
	 EOF 
;

// Rule ExistenceSentence
ruleExistenceSentence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExistenceSentenceAccess().getGroup()); }
		(rule__ExistenceSentence__Group__0)
		{ after(grammarAccess.getExistenceSentenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertySentence
entryRulePropertySentence
:
{ before(grammarAccess.getPropertySentenceRule()); }
	 rulePropertySentence
{ after(grammarAccess.getPropertySentenceRule()); } 
	 EOF 
;

// Rule PropertySentence
rulePropertySentence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getAlternatives()); }
		(rule__PropertySentence__Alternatives)
		{ after(grammarAccess.getPropertySentenceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty
entryRuleProperty
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccess().getGroup()); }
		(rule__Property__Group__0)
		{ after(grammarAccess.getPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerelativeClause
entryRulerelativeClause
:
{ before(grammarAccess.getRelativeClauseRule()); }
	 rulerelativeClause
{ after(grammarAccess.getRelativeClauseRule()); } 
	 EOF 
;

// Rule relativeClause
rulerelativeClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelativeClauseAccess().getGroup()); }
		(rule__RelativeClause__Group__0)
		{ after(grammarAccess.getRelativeClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerelativeSentence
entryRulerelativeSentence
:
{ before(grammarAccess.getRelativeSentenceRule()); }
	 rulerelativeSentence
{ after(grammarAccess.getRelativeSentenceRule()); } 
	 EOF 
;

// Rule relativeSentence
rulerelativeSentence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getAlternatives()); }
		(rule__RelativeSentence__Alternatives)
		{ after(grammarAccess.getRelativeSentenceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActors
entryRuleActors
:
{ before(grammarAccess.getActorsRule()); }
	 ruleActors
{ after(grammarAccess.getActorsRule()); } 
	 EOF 
;

// Rule Actors
ruleActors 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActorsAccess().getGroup()); }
		(rule__Actors__Group__0)
		{ after(grammarAccess.getActorsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActor
entryRuleActor
:
{ before(grammarAccess.getActorRule()); }
	 ruleActor
{ after(grammarAccess.getActorRule()); } 
	 EOF 
;

// Rule Actor
ruleActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActorAccess().getGroup()); }
		(rule__Actor__Group__0)
		{ after(grammarAccess.getActorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getAlternatives()); }
		(rule__Predicate__Alternatives)
		{ after(grammarAccess.getPredicateAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicateObject
entryRulePredicateObject
:
{ before(grammarAccess.getPredicateObjectRule()); }
	 rulePredicateObject
{ after(grammarAccess.getPredicateObjectRule()); } 
	 EOF 
;

// Rule PredicateObject
rulePredicateObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getGroup()); }
		(rule__PredicateObject__Group__0)
		{ after(grammarAccess.getPredicateObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExistencePreface
entryRuleExistencePreface
:
{ before(grammarAccess.getExistencePrefaceRule()); }
	 ruleExistencePreface
{ after(grammarAccess.getExistencePrefaceRule()); } 
	 EOF 
;

// Rule ExistencePreface
ruleExistencePreface 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExistencePrefaceAccess().getGroup()); }
		(rule__ExistencePreface__Group__0)
		{ after(grammarAccess.getExistencePrefaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getGroup()); }
		(rule__Object__Group__0)
		{ after(grammarAccess.getObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePreNominative
entryRulePreNominative
:
{ before(grammarAccess.getPreNominativeRule()); }
	 rulePreNominative
{ after(grammarAccess.getPreNominativeRule()); } 
	 EOF 
;

// Rule PreNominative
rulePreNominative 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreNominativeAccess().getAlternatives()); }
		(rule__PreNominative__Alternatives)
		{ after(grammarAccess.getPreNominativeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdverbial
entryRuleAdverbial
:
{ before(grammarAccess.getAdverbialRule()); }
	 ruleAdverbial
{ after(grammarAccess.getAdverbialRule()); } 
	 EOF 
;

// Rule Adverbial
ruleAdverbial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdverbialAccess().getAlternatives()); }
		(rule__Adverbial__Alternatives)
		{ after(grammarAccess.getAdverbialAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraints
entryRuleConstraints
:
{ before(grammarAccess.getConstraintsRule()); }
	 ruleConstraints
{ after(grammarAccess.getConstraintsRule()); } 
	 EOF 
;

// Rule Constraints
ruleConstraints 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintsAccess().getAlternatives()); }
		(rule__Constraints__Alternatives)
		{ after(grammarAccess.getConstraintsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraintOrdinators
entryRuleConstraintOrdinators
:
{ before(grammarAccess.getConstraintOrdinatorsRule()); }
	 ruleConstraintOrdinators
{ after(grammarAccess.getConstraintOrdinatorsRule()); } 
	 EOF 
;

// Rule ConstraintOrdinators
ruleConstraintOrdinators 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintOrdinatorsAccess().getGroup()); }
		(rule__ConstraintOrdinators__Group__0)
		{ after(grammarAccess.getConstraintOrdinatorsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetConstraint
entryRuleSetConstraint
:
{ before(grammarAccess.getSetConstraintRule()); }
	 ruleSetConstraint
{ after(grammarAccess.getSetConstraintRule()); } 
	 EOF 
;

// Rule SetConstraint
ruleSetConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetConstraintAccess().getAlternatives()); }
		(rule__SetConstraint__Alternatives)
		{ after(grammarAccess.getSetConstraintAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeConstraint
entryRuleTimeConstraint
:
{ before(grammarAccess.getTimeConstraintRule()); }
	 ruleTimeConstraint
{ after(grammarAccess.getTimeConstraintRule()); } 
	 EOF 
;

// Rule TimeConstraint
ruleTimeConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeConstraintAccess().getGroup()); }
		(rule__TimeConstraint__Group__0)
		{ after(grammarAccess.getTimeConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectConstraint
entryRuleObjectConstraint
:
{ before(grammarAccess.getObjectConstraintRule()); }
	 ruleObjectConstraint
{ after(grammarAccess.getObjectConstraintRule()); } 
	 EOF 
;

// Rule ObjectConstraint
ruleObjectConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectConstraintAccess().getObjectAssignment()); }
		(rule__ObjectConstraint__ObjectAssignment)
		{ after(grammarAccess.getObjectConstraintAccess().getObjectAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnitConstraints
entryRuleUnitConstraints
:
{ before(grammarAccess.getUnitConstraintsRule()); }
	 ruleUnitConstraints
{ after(grammarAccess.getUnitConstraintsRule()); } 
	 EOF 
;

// Rule UnitConstraints
ruleUnitConstraints 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnitConstraintsAccess().getAlternatives()); }
		(rule__UnitConstraints__Alternatives)
		{ after(grammarAccess.getUnitConstraintsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntervallConstraints
entryRuleIntervallConstraints
:
{ before(grammarAccess.getIntervallConstraintsRule()); }
	 ruleIntervallConstraints
{ after(grammarAccess.getIntervallConstraintsRule()); } 
	 EOF 
;

// Rule IntervallConstraints
ruleIntervallConstraints 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntervallConstraintsAccess().getGroup()); }
		(rule__IntervallConstraints__Group__0)
		{ after(grammarAccess.getIntervallConstraintsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleValueConstraints
entryRuleSingleValueConstraints
:
{ before(grammarAccess.getSingleValueConstraintsRule()); }
	 ruleSingleValueConstraints
{ after(grammarAccess.getSingleValueConstraintsRule()); } 
	 EOF 
;

// Rule SingleValueConstraints
ruleSingleValueConstraints 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleValueConstraintsAccess().getValueAssignment()); }
		(rule__SingleValueConstraints__ValueAssignment)
		{ after(grammarAccess.getSingleValueConstraintsAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueSet
entryRuleValueSet
:
{ before(grammarAccess.getValueSetRule()); }
	 ruleValueSet
{ after(grammarAccess.getValueSetRule()); } 
	 EOF 
;

// Rule ValueSet
ruleValueSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueSetAccess().getGroup()); }
		(rule__ValueSet__Group__0)
		{ after(grammarAccess.getValueSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectSet
entryRuleObjectSet
:
{ before(grammarAccess.getObjectSetRule()); }
	 ruleObjectSet
{ after(grammarAccess.getObjectSetRule()); } 
	 EOF 
;

// Rule ObjectSet
ruleObjectSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectSetAccess().getGroup()); }
		(rule__ObjectSet__Group__0)
		{ after(grammarAccess.getObjectSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntValue
entryRuleIntValue
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntValueAccess().getGroup()); }
		(rule__IntValue__Group__0)
		{ after(grammarAccess.getIntValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloatValue
entryRuleFloatValue
:
{ before(grammarAccess.getFloatValueRule()); }
	 ruleFloatValue
{ after(grammarAccess.getFloatValueRule()); } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatValueAccess().getGroup()); }
		(rule__FloatValue__Group__0)
		{ after(grammarAccess.getFloatValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReqID
entryRuleReqID
:
{ before(grammarAccess.getReqIDRule()); }
	 ruleReqID
{ after(grammarAccess.getReqIDRule()); } 
	 EOF 
;

// Rule ReqID
ruleReqID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReqIDAccess().getGroup()); }
		(rule__ReqID__Group__0)
		{ after(grammarAccess.getReqIDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWORD
entryRuleWORD
:
{ before(grammarAccess.getWORDRule()); }
	 ruleWORD
{ after(grammarAccess.getWORDRule()); } 
	 EOF 
;

// Rule WORD
ruleWORD 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWORDAccess().getGroup()); }
		(rule__WORD__Group__0)
		{ after(grammarAccess.getWORDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAuxiliaryVerb
entryRuleAuxiliaryVerb
:
{ before(grammarAccess.getAuxiliaryVerbRule()); }
	 ruleAuxiliaryVerb
{ after(grammarAccess.getAuxiliaryVerbRule()); } 
	 EOF 
;

// Rule AuxiliaryVerb
ruleAuxiliaryVerb 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAuxiliaryVerbAccess().getAlternatives()); }
		(rule__AuxiliaryVerb__Alternatives)
		{ after(grammarAccess.getAuxiliaryVerbAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConjunction
entryRuleConjunction
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConjunctionAccess().getAlternatives()); }
		(rule__Conjunction__Alternatives)
		{ after(grammarAccess.getConjunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComperators
entryRuleComperators
:
{ before(grammarAccess.getComperatorsRule()); }
	 ruleComperators
{ after(grammarAccess.getComperatorsRule()); } 
	 EOF 
;

// Rule Comperators
ruleComperators 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComperatorsAccess().getAlternatives()); }
		(rule__Comperators__Alternatives)
		{ after(grammarAccess.getComperatorsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSizeAdverbial
entryRuleSizeAdverbial
:
{ before(grammarAccess.getSizeAdverbialRule()); }
	 ruleSizeAdverbial
{ after(grammarAccess.getSizeAdverbialRule()); } 
	 EOF 
;

// Rule SizeAdverbial
ruleSizeAdverbial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSizeAdverbialAccess().getAlternatives()); }
		(rule__SizeAdverbial__Alternatives)
		{ after(grammarAccess.getSizeAdverbialAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositionAdverbial
entryRulePositionAdverbial
:
{ before(grammarAccess.getPositionAdverbialRule()); }
	 rulePositionAdverbial
{ after(grammarAccess.getPositionAdverbialRule()); } 
	 EOF 
;

// Rule PositionAdverbial
rulePositionAdverbial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getAlternatives()); }
		(rule__PositionAdverbial__Alternatives)
		{ after(grammarAccess.getPositionAdverbialAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonAdverbial
entryRuleComparisonAdverbial
:
{ before(grammarAccess.getComparisonAdverbialRule()); }
	 ruleComparisonAdverbial
{ after(grammarAccess.getComparisonAdverbialRule()); } 
	 EOF 
;

// Rule ComparisonAdverbial
ruleComparisonAdverbial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAdverbialAccess().getAlternatives()); }
		(rule__ComparisonAdverbial__Alternatives)
		{ after(grammarAccess.getComparisonAdverbialAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuantification
entryRuleQuantification
:
{ before(grammarAccess.getQuantificationRule()); }
	 ruleQuantification
{ after(grammarAccess.getQuantificationRule()); } 
	 EOF 
;

// Rule Quantification
ruleQuantification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuantificationAccess().getAlternatives()); }
		(rule__Quantification__Alternatives)
		{ after(grammarAccess.getQuantificationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegation
entryRuleNegation
:
{ before(grammarAccess.getNegationRule()); }
	 ruleNegation
{ after(grammarAccess.getNegationRule()); } 
	 EOF 
;

// Rule Negation
ruleNegation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegationAccess().getAlternatives()); }
		(rule__Negation__Alternatives)
		{ after(grammarAccess.getNegationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArticles
entryRuleArticles
:
{ before(grammarAccess.getArticlesRule()); }
	 ruleArticles
{ after(grammarAccess.getArticlesRule()); } 
	 EOF 
;

// Rule Articles
ruleArticles 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArticlesAccess().getAlternatives()); }
		(rule__Articles__Alternatives)
		{ after(grammarAccess.getArticlesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefArticles
entryRuleRefArticles
:
{ before(grammarAccess.getRefArticlesRule()); }
	 ruleRefArticles
{ after(grammarAccess.getRefArticlesRule()); } 
	 EOF 
;

// Rule RefArticles
ruleRefArticles 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefArticlesAccess().getAlternatives()); }
		(rule__RefArticles__Alternatives)
		{ after(grammarAccess.getRefArticlesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStuffWord
entryRuleStuffWord
:
{ before(grammarAccess.getStuffWordRule()); }
	 ruleStuffWord
{ after(grammarAccess.getStuffWordRule()); } 
	 EOF 
;

// Rule StuffWord
ruleStuffWord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStuffWordAccess().getWithKeyword()); }
		'with'
		{ after(grammarAccess.getStuffWordAccess().getWithKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelativePronounsSubject
entryRuleRelativePronounsSubject
:
{ before(grammarAccess.getRelativePronounsSubjectRule()); }
	 ruleRelativePronounsSubject
{ after(grammarAccess.getRelativePronounsSubjectRule()); } 
	 EOF 
;

// Rule RelativePronounsSubject
ruleRelativePronounsSubject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelativePronounsSubjectAccess().getAlternatives()); }
		(rule__RelativePronounsSubject__Alternatives)
		{ after(grammarAccess.getRelativePronounsSubjectAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelativePronounsObject
entryRuleRelativePronounsObject
:
{ before(grammarAccess.getRelativePronounsObjectRule()); }
	 ruleRelativePronounsObject
{ after(grammarAccess.getRelativePronounsObjectRule()); } 
	 EOF 
;

// Rule RelativePronounsObject
ruleRelativePronounsObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelativePronounsObjectAccess().getAlternatives()); }
		(rule__RelativePronounsObject__Alternatives)
		{ after(grammarAccess.getRelativePronounsObjectAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnit
entryRuleUnit
:
{ before(grammarAccess.getUnitRule()); }
	 ruleUnit
{ after(grammarAccess.getUnitRule()); } 
	 EOF 
;

// Rule Unit
ruleUnit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnitAccess().getAlternatives()); }
		(rule__Unit__Alternatives)
		{ after(grammarAccess.getUnitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCuvature
entryRuleCuvature
:
{ before(grammarAccess.getCuvatureRule()); }
	 ruleCuvature
{ after(grammarAccess.getCuvatureRule()); } 
	 EOF 
;

// Rule Cuvature
ruleCuvature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCuvatureAccess().getAlternatives()); }
		(rule__Cuvature__Alternatives)
		{ after(grammarAccess.getCuvatureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVelcoityUnits
entryRuleVelcoityUnits
:
{ before(grammarAccess.getVelcoityUnitsRule()); }
	 ruleVelcoityUnits
{ after(grammarAccess.getVelcoityUnitsRule()); } 
	 EOF 
;

// Rule VelcoityUnits
ruleVelcoityUnits 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVelcoityUnitsAccess().getAlternatives()); }
		(rule__VelcoityUnits__Alternatives)
		{ after(grammarAccess.getVelcoityUnitsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMassUnits
entryRuleMassUnits
:
{ before(grammarAccess.getMassUnitsRule()); }
	 ruleMassUnits
{ after(grammarAccess.getMassUnitsRule()); } 
	 EOF 
;

// Rule MassUnits
ruleMassUnits 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMassUnitsAccess().getAlternatives()); }
		(rule__MassUnits__Alternatives)
		{ after(grammarAccess.getMassUnitsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeatUnits
entryRuleHeatUnits
:
{ before(grammarAccess.getHeatUnitsRule()); }
	 ruleHeatUnits
{ after(grammarAccess.getHeatUnitsRule()); } 
	 EOF 
;

// Rule HeatUnits
ruleHeatUnits 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeatUnitsAccess().getAlternatives()); }
		(rule__HeatUnits__Alternatives)
		{ after(grammarAccess.getHeatUnitsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePresureUnits
entryRulePresureUnits
:
{ before(grammarAccess.getPresureUnitsRule()); }
	 rulePresureUnits
{ after(grammarAccess.getPresureUnitsRule()); } 
	 EOF 
;

// Rule PresureUnits
rulePresureUnits 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPresureUnitsAccess().getAlternatives()); }
		(rule__PresureUnits__Alternatives)
		{ after(grammarAccess.getPresureUnitsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLengthUnits
entryRuleLengthUnits
:
{ before(grammarAccess.getLengthUnitsRule()); }
	 ruleLengthUnits
{ after(grammarAccess.getLengthUnitsRule()); } 
	 EOF 
;

// Rule LengthUnits
ruleLengthUnits 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLengthUnitsAccess().getAlternatives()); }
		(rule__LengthUnits__Alternatives)
		{ after(grammarAccess.getLengthUnitsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeUnits
entryRuleTimeUnits
:
{ before(grammarAccess.getTimeUnitsRule()); }
	 ruleTimeUnits
{ after(grammarAccess.getTimeUnitsRule()); } 
	 EOF 
;

// Rule TimeUnits
ruleTimeUnits 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeUnitsAccess().getAlternatives()); }
		(rule__TimeUnits__Alternatives)
		{ after(grammarAccess.getTimeUnitsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Modality
ruleModality
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModalityAccess().getAlternatives()); }
		(rule__Modality__Alternatives)
		{ after(grammarAccess.getModalityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Modifier
ruleModifier
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifierAccess().getAlternatives()); }
		(rule__Modifier__Alternatives)
		{ after(grammarAccess.getModifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ClauseOrdinator
ruleClauseOrdinator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getAlternatives()); }
		(rule__ClauseOrdinator__Alternatives)
		{ after(grammarAccess.getClauseOrdinatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementAccess().getColonKeyword_2_0()); }
		':'
		{ after(grammarAccess.getRequirementAccess().getColonKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getRequirementAccess().getFullStopKeyword_2_1()); }
		'.'
		{ after(grammarAccess.getRequirementAccess().getFullStopKeyword_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementAccess().getFullStopKeyword_4_0()); }
		'.'
		{ after(grammarAccess.getRequirementAccess().getFullStopKeyword_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getRequirementAccess().getSemicolonKeyword_4_1()); }
		';'
		{ after(grammarAccess.getRequirementAccess().getSemicolonKeyword_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getModalitySentenceParserRuleCall_0()); }
		ruleModalitySentence
		{ after(grammarAccess.getClauseAccess().getModalitySentenceParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getPredicateSentenceParserRuleCall_1()); }
		rulePredicateSentence
		{ after(grammarAccess.getClauseAccess().getPredicateSentenceParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getExistenceSentenceParserRuleCall_2()); }
		ruleExistenceSentence
		{ after(grammarAccess.getClauseAccess().getExistenceSentenceParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getPropertySentenceParserRuleCall_3()); }
		rulePropertySentence
		{ after(grammarAccess.getClauseAccess().getPropertySentenceParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getGroup_0()); }
		(rule__PredicateSentence__Group_0__0)
		{ after(grammarAccess.getPredicateSentenceAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getGroup_1()); }
		(rule__PredicateSentence__Group_1__0)
		{ after(grammarAccess.getPredicateSentenceAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getGroup_2()); }
		(rule__PredicateSentence__Group_2__0)
		{ after(grammarAccess.getPredicateSentenceAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getGroup_0()); }
		(rule__PropertySentence__Group_0__0)
		{ after(grammarAccess.getPropertySentenceAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertySentenceAccess().getGroup_1()); }
		(rule__PropertySentence__Group_1__0)
		{ after(grammarAccess.getPropertySentenceAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropertySentenceAccess().getGroup_2()); }
		(rule__PropertySentence__Group_2__0)
		{ after(grammarAccess.getPropertySentenceAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getPropertySentenceAccess().getGroup_3()); }
		(rule__PropertySentence__Group_3__0)
		{ after(grammarAccess.getPropertySentenceAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Alternatives_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getGroup_2_3_0()); }
		(rule__PropertySentence__Group_2_3_0__0)
		{ after(grammarAccess.getPropertySentenceAccess().getGroup_2_3_0()); }
	)
	|
	(
		(
			{ before(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_2_3_1()); }
			(rule__PropertySentence__ConstraintsAssignment_2_3_1)
			{ after(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_2_3_1()); }
		)
		(
			{ before(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_2_3_1()); }
			(rule__PropertySentence__ConstraintsAssignment_2_3_1)*
			{ after(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_2_3_1()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Alternatives_2_3_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPredicateAssignment_2_3_0_0_0()); }
		(rule__PropertySentence__PredicateAssignment_2_3_0_0_0)
		{ after(grammarAccess.getPropertySentenceAccess().getPredicateAssignment_2_3_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertySentenceAccess().getObjectAssignment_2_3_0_0_1()); }
		(rule__PropertySentence__ObjectAssignment_2_3_0_0_1)
		{ after(grammarAccess.getPropertySentenceAccess().getObjectAssignment_2_3_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Alternatives_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPredicateWordAssignment_3_1_0()); }
		(rule__PropertySentence__PredicateWordAssignment_3_1_0)
		{ after(grammarAccess.getPropertySentenceAccess().getPredicateWordAssignment_3_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPredicateWordAssignment_3_1_1()); }
		(rule__PropertySentence__PredicateWordAssignment_3_1_1)
		{ after(grammarAccess.getPropertySentenceAccess().getPredicateWordAssignment_3_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getQuantifierAssignment_0_0()); }
		(rule__Property__QuantifierAssignment_0_0)
		{ after(grammarAccess.getPropertyAccess().getQuantifierAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getArticleAssignment_0_1()); }
		(rule__Property__ArticleAssignment_0_1)
		{ after(grammarAccess.getPropertyAccess().getArticleAssignment_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getArticleAssignment_0_2()); }
		(rule__Property__ArticleAssignment_0_2)
		{ after(grammarAccess.getPropertyAccess().getArticleAssignment_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getPropertyAccess().getObjectAssignment_1_0()); }
			(rule__Property__ObjectAssignment_1_0)
			{ after(grammarAccess.getPropertyAccess().getObjectAssignment_1_0()); }
		)
		(
			{ before(grammarAccess.getPropertyAccess().getObjectAssignment_1_0()); }
			(rule__Property__ObjectAssignment_1_0)*
			{ after(grammarAccess.getPropertyAccess().getObjectAssignment_1_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getObjectAssignment_1_1()); }
		(rule__Property__ObjectAssignment_1_1)
		{ after(grammarAccess.getPropertyAccess().getObjectAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getPropertyAccess().getPropertyAssignment_3_0()); }
			(rule__Property__PropertyAssignment_3_0)
			{ after(grammarAccess.getPropertyAccess().getPropertyAssignment_3_0()); }
		)
		(
			{ before(grammarAccess.getPropertyAccess().getPropertyAssignment_3_0()); }
			(rule__Property__PropertyAssignment_3_0)*
			{ after(grammarAccess.getPropertyAccess().getPropertyAssignment_3_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyAssignment_3_1()); }
		(rule__Property__PropertyAssignment_3_1)
		{ after(grammarAccess.getPropertyAccess().getPropertyAssignment_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getGroup_0()); }
		(rule__RelativeSentence__Group_0__0)
		{ after(grammarAccess.getRelativeSentenceAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getGroup_1()); }
		(rule__RelativeSentence__Group_1__0)
		{ after(grammarAccess.getRelativeSentenceAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getGroup_2()); }
		(rule__RelativeSentence__Group_2__0)
		{ after(grammarAccess.getRelativeSentenceAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Alternatives_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getClauseAssignment_2_1_0()); }
		(rule__RelativeSentence__ClauseAssignment_2_1_0)
		{ after(grammarAccess.getRelativeSentenceAccess().getClauseAssignment_2_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getClauseAssignment_2_1_1()); }
		(rule__RelativeSentence__ClauseAssignment_2_1_1)
		{ after(grammarAccess.getRelativeSentenceAccess().getClauseAssignment_2_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getActorAssignment_1_0()); }
		(rule__Actor__ActorAssignment_1_0)
		{ after(grammarAccess.getActorAccess().getActorAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getActorAccess().getActorAssignment_1_1()); }
		(rule__Actor__ActorAssignment_1_1)
		{ after(grammarAccess.getActorAccess().getActorAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getPredicateAccess().getPredicatesAssignment_0()); }
			(rule__Predicate__PredicatesAssignment_0)
			{ after(grammarAccess.getPredicateAccess().getPredicatesAssignment_0()); }
		)
		(
			{ before(grammarAccess.getPredicateAccess().getPredicatesAssignment_0()); }
			(rule__Predicate__PredicatesAssignment_0)*
			{ after(grammarAccess.getPredicateAccess().getPredicatesAssignment_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getPredicateAccess().getPredicatesAssignment_1()); }
		(rule__Predicate__PredicatesAssignment_1)
		{ after(grammarAccess.getPredicateAccess().getPredicatesAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredicateAccess().getGroup_2()); }
		(rule__Predicate__Group_2__0)
		{ after(grammarAccess.getPredicateAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getPredicateObjectAccess().getObjectAssignment_1_0()); }
			(rule__PredicateObject__ObjectAssignment_1_0)
			{ after(grammarAccess.getPredicateObjectAccess().getObjectAssignment_1_0()); }
		)
		(
			{ before(grammarAccess.getPredicateObjectAccess().getObjectAssignment_1_0()); }
			(rule__PredicateObject__ObjectAssignment_1_0)*
			{ after(grammarAccess.getPredicateObjectAccess().getObjectAssignment_1_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getPredicateObjectAccess().getObjectAssignment_1_1()); }
		(rule__PredicateObject__ObjectAssignment_1_1)
		{ after(grammarAccess.getPredicateObjectAccess().getObjectAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistencePreface__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getExistencePrefaceAccess().getWORDParserRuleCall_3_0()); }
			(ruleWORD)
			{ after(grammarAccess.getExistencePrefaceAccess().getWORDParserRuleCall_3_0()); }
		)
		(
			{ before(grammarAccess.getExistencePrefaceAccess().getWORDParserRuleCall_3_0()); }
			(ruleWORD)*
			{ after(grammarAccess.getExistencePrefaceAccess().getWORDParserRuleCall_3_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getExistencePrefaceAccess().getSTRINGTerminalRuleCall_3_1()); }
		RULE_STRING
		{ after(grammarAccess.getExistencePrefaceAccess().getSTRINGTerminalRuleCall_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getObjectAccess().getObjectAssignment_1_0()); }
			(rule__Object__ObjectAssignment_1_0)
			{ after(grammarAccess.getObjectAccess().getObjectAssignment_1_0()); }
		)
		(
			{ before(grammarAccess.getObjectAccess().getObjectAssignment_1_0()); }
			(rule__Object__ObjectAssignment_1_0)*
			{ after(grammarAccess.getObjectAccess().getObjectAssignment_1_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getObjectAccess().getObjectAssignment_1_1()); }
		(rule__Object__ObjectAssignment_1_1)
		{ after(grammarAccess.getObjectAccess().getObjectAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreNominative__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreNominativeAccess().getDeterminerAssignment_0()); }
		(rule__PreNominative__DeterminerAssignment_0)
		{ after(grammarAccess.getPreNominativeAccess().getDeterminerAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPreNominativeAccess().getArticleAssignment_1()); }
		(rule__PreNominative__ArticleAssignment_1)
		{ after(grammarAccess.getPreNominativeAccess().getArticleAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPreNominativeAccess().getArticleAssignment_2()); }
		(rule__PreNominative__ArticleAssignment_2)
		{ after(grammarAccess.getPreNominativeAccess().getArticleAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Adverbial__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdverbialAccess().getSizeAdverbialParserRuleCall_0()); }
		ruleSizeAdverbial
		{ after(grammarAccess.getAdverbialAccess().getSizeAdverbialParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdverbialAccess().getPositionAdverbialParserRuleCall_1()); }
		rulePositionAdverbial
		{ after(grammarAccess.getAdverbialAccess().getPositionAdverbialParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAdverbialAccess().getComparisonAdverbialParserRuleCall_2()); }
		ruleComparisonAdverbial
		{ after(grammarAccess.getAdverbialAccess().getComparisonAdverbialParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintsAccess().getTimeConstraintAssignment_0()); }
		(rule__Constraints__TimeConstraintAssignment_0)
		{ after(grammarAccess.getConstraintsAccess().getTimeConstraintAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintsAccess().getConstraintAssignment_1()); }
		(rule__Constraints__ConstraintAssignment_1)
		{ after(grammarAccess.getConstraintsAccess().getConstraintAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getConstraintAssignment_1_0()); }
		(rule__Constraint__ConstraintAssignment_1_0)
		{ after(grammarAccess.getConstraintAccess().getConstraintAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintAccess().getConstraintAssignment_1_1()); }
		(rule__Constraint__ConstraintAssignment_1_1)
		{ after(grammarAccess.getConstraintAccess().getConstraintAssignment_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintAccess().getConstraintAssignment_1_2()); }
		(rule__Constraint__ConstraintAssignment_1_2)
		{ after(grammarAccess.getConstraintAccess().getConstraintAssignment_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetConstraint__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetConstraintAccess().getSetAssignment_0()); }
		(rule__SetConstraint__SetAssignment_0)
		{ after(grammarAccess.getSetConstraintAccess().getSetAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetConstraintAccess().getSetAssignment_1()); }
		(rule__SetConstraint__SetAssignment_1)
		{ after(grammarAccess.getSetConstraintAccess().getSetAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitConstraints__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnitConstraintsAccess().getSingleValueConstraintsParserRuleCall_0()); }
		ruleSingleValueConstraints
		{ after(grammarAccess.getUnitConstraintsAccess().getSingleValueConstraintsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnitConstraintsAccess().getIntervallConstraintsParserRuleCall_1()); }
		ruleIntervallConstraints
		{ after(grammarAccess.getUnitConstraintsAccess().getIntervallConstraintsParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getIntValueParserRuleCall_0()); }
		ruleIntValue
		{ after(grammarAccess.getValueAccess().getIntValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getFloatValueParserRuleCall_1()); }
		ruleFloatValue
		{ after(grammarAccess.getValueAccess().getFloatValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqID__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReqIDAccess().getIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getReqIDAccess().getIDTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getReqIDAccess().getINTTerminalRuleCall_0_1()); }
		RULE_INT
		{ after(grammarAccess.getReqIDAccess().getINTTerminalRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqID__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReqIDAccess().getFullStopKeyword_1_0()); }
		'.'
		{ after(grammarAccess.getReqIDAccess().getFullStopKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getReqIDAccess().getINTTerminalRuleCall_1_1()); }
		RULE_INT
		{ after(grammarAccess.getReqIDAccess().getINTTerminalRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AuxiliaryVerb__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAuxiliaryVerbAccess().getIsKeyword_0()); }
		'is'
		{ after(grammarAccess.getAuxiliaryVerbAccess().getIsKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAuxiliaryVerbAccess().getBeKeyword_1()); }
		'be'
		{ after(grammarAccess.getAuxiliaryVerbAccess().getBeKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getAuxiliaryVerbAccess().getBeenKeyword_2()); }
		'been'
		{ after(grammarAccess.getAuxiliaryVerbAccess().getBeenKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getAuxiliaryVerbAccess().getHasKeyword_3()); }
		'has'
		{ after(grammarAccess.getAuxiliaryVerbAccess().getHasKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getAuxiliaryVerbAccess().getDoKeyword_4()); }
		'do'
		{ after(grammarAccess.getAuxiliaryVerbAccess().getDoKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getAuxiliaryVerbAccess().getDoesKeyword_5()); }
		'does'
		{ after(grammarAccess.getAuxiliaryVerbAccess().getDoesKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionAccess().getAndKeyword_0()); }
		'and'
		{ after(grammarAccess.getConjunctionAccess().getAndKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getConjunctionAccess().getOrKeyword_1()); }
		'or'
		{ after(grammarAccess.getConjunctionAccess().getOrKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comperators__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComperatorsAccess().getThanKeyword_0()); }
		'than'
		{ after(grammarAccess.getComperatorsAccess().getThanKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getComperatorsAccess().getAsKeyword_1()); }
		'as'
		{ after(grammarAccess.getComperatorsAccess().getAsKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getComperatorsAccess().getToKeyword_2()); }
		'to'
		{ after(grammarAccess.getComperatorsAccess().getToKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getComperatorsAccess().getOfKeyword_3()); }
		'of'
		{ after(grammarAccess.getComperatorsAccess().getOfKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SizeAdverbial__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeAdverbialAccess().getHigherKeyword_0()); }
		'higher'
		{ after(grammarAccess.getSizeAdverbialAccess().getHigherKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSizeAdverbialAccess().getLessKeyword_1()); }
		'less'
		{ after(grammarAccess.getSizeAdverbialAccess().getLessKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSizeAdverbialAccess().getMoreKeyword_2()); }
		'more'
		{ after(grammarAccess.getSizeAdverbialAccess().getMoreKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSizeAdverbialAccess().getLargerKeyword_3()); }
		'larger'
		{ after(grammarAccess.getSizeAdverbialAccess().getLargerKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getSizeAdverbialAccess().getSmallerKeyword_4()); }
		'smaller'
		{ after(grammarAccess.getSizeAdverbialAccess().getSmallerKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getSizeAdverbialAccess().getAs_long_asKeyword_5()); }
		'as_long_as'
		{ after(grammarAccess.getSizeAdverbialAccess().getAs_long_asKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionAdverbial__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getBetweenKeyword_0()); }
		'between'
		{ after(grammarAccess.getPositionAdverbialAccess().getBetweenKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getNextKeyword_1()); }
		'next'
		{ after(grammarAccess.getPositionAdverbialAccess().getNextKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getOnKeyword_2()); }
		'on'
		{ after(grammarAccess.getPositionAdverbialAccess().getOnKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getAboveKeyword_3()); }
		'above'
		{ after(grammarAccess.getPositionAdverbialAccess().getAboveKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getBelowKeyword_4()); }
		'below'
		{ after(grammarAccess.getPositionAdverbialAccess().getBelowKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getInKeyword_5()); }
		'in'
		{ after(grammarAccess.getPositionAdverbialAccess().getInKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getWithinKeyword_6()); }
		'within'
		{ after(grammarAccess.getPositionAdverbialAccess().getWithinKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getIn_front_ofKeyword_7()); }
		'in_front_of'
		{ after(grammarAccess.getPositionAdverbialAccess().getIn_front_ofKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getBehindKeyword_8()); }
		'behind'
		{ after(grammarAccess.getPositionAdverbialAccess().getBehindKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getOutKeyword_9()); }
		'out'
		{ after(grammarAccess.getPositionAdverbialAccess().getOutKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getPositionAdverbialAccess().getUnderKeyword_10()); }
		'under'
		{ after(grammarAccess.getPositionAdverbialAccess().getUnderKeyword_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonAdverbial__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAdverbialAccess().getEqualKeyword_0()); }
		'equal'
		{ after(grammarAccess.getComparisonAdverbialAccess().getEqualKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAdverbialAccess().getFasterKeyword_1()); }
		'faster'
		{ after(grammarAccess.getComparisonAdverbialAccess().getFasterKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAdverbialAccess().getSlowerKeyword_2()); }
		'slower'
		{ after(grammarAccess.getComparisonAdverbialAccess().getSlowerKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAdverbialAccess().getBetterKeyword_3()); }
		'better'
		{ after(grammarAccess.getComparisonAdverbialAccess().getBetterKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAdverbialAccess().getByKeyword_4()); }
		'by'
		{ after(grammarAccess.getComparisonAdverbialAccess().getByKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAdverbialAccess().getToKeyword_5()); }
		'to'
		{ after(grammarAccess.getComparisonAdverbialAccess().getToKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantificationAccess().getAllKeyword_0()); }
		'all'
		{ after(grammarAccess.getQuantificationAccess().getAllKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getEveryKeyword_1()); }
		'every'
		{ after(grammarAccess.getQuantificationAccess().getEveryKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getEachKeyword_2()); }
		'each'
		{ after(grammarAccess.getQuantificationAccess().getEachKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getWholeKeyword_3()); }
		'whole'
		{ after(grammarAccess.getQuantificationAccess().getWholeKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getAnyKeyword_4()); }
		'any'
		{ after(grammarAccess.getQuantificationAccess().getAnyKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getSeveralKeyword_5()); }
		'several'
		{ after(grammarAccess.getQuantificationAccess().getSeveralKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getGroup_6()); }
		(rule__Quantification__Group_6__0)
		{ after(grammarAccess.getQuantificationAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getEveryKeyword_7()); }
		'Every'
		{ after(grammarAccess.getQuantificationAccess().getEveryKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getEachKeyword_8()); }
		'Each'
		{ after(grammarAccess.getQuantificationAccess().getEachKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getWholeKeyword_9()); }
		'Whole'
		{ after(grammarAccess.getQuantificationAccess().getWholeKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getAnyKeyword_10()); }
		'Any'
		{ after(grammarAccess.getQuantificationAccess().getAnyKeyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getSeveralKeyword_11()); }
		'Several'
		{ after(grammarAccess.getQuantificationAccess().getSeveralKeyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getQuantificationAccess().getEitherKeyword_12()); }
		'Either'
		{ after(grammarAccess.getQuantificationAccess().getEitherKeyword_12()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationAccess().getNotKeyword_0()); }
		'not'
		{ after(grammarAccess.getNegationAccess().getNotKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getNegationAccess().getDonotKeyword_1()); }
		'donot'
		{ after(grammarAccess.getNegationAccess().getDonotKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getNegationAccess().getDoesnotKeyword_2()); }
		'doesnot'
		{ after(grammarAccess.getNegationAccess().getDoesnotKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getNegationAccess().getDoesnTKeyword_3()); }
		'doesn\'t'
		{ after(grammarAccess.getNegationAccess().getDoesnTKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getNegationAccess().getDonTKeyword_4()); }
		'don\'t'
		{ after(grammarAccess.getNegationAccess().getDonTKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Articles__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArticlesAccess().getTheKeyword_0()); }
		'the'
		{ after(grammarAccess.getArticlesAccess().getTheKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getArticlesAccess().getAKeyword_1()); }
		'a'
		{ after(grammarAccess.getArticlesAccess().getAKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getArticlesAccess().getAnKeyword_2()); }
		'an'
		{ after(grammarAccess.getArticlesAccess().getAnKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getArticlesAccess().getTheKeyword_3()); }
		'The'
		{ after(grammarAccess.getArticlesAccess().getTheKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getArticlesAccess().getAKeyword_4()); }
		'A'
		{ after(grammarAccess.getArticlesAccess().getAKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getArticlesAccess().getAnKeyword_5()); }
		'An'
		{ after(grammarAccess.getArticlesAccess().getAnKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefArticles__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefArticlesAccess().getThatKeyword_0()); }
		'that'
		{ after(grammarAccess.getRefArticlesAccess().getThatKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRefArticlesAccess().getThisKeyword_1()); }
		'this'
		{ after(grammarAccess.getRefArticlesAccess().getThisKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getRefArticlesAccess().getThatKeyword_2()); }
		'That'
		{ after(grammarAccess.getRefArticlesAccess().getThatKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getRefArticlesAccess().getThisKeyword_3()); }
		'This'
		{ after(grammarAccess.getRefArticlesAccess().getThisKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePronounsSubject__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativePronounsSubjectAccess().getWhichKeyword_0()); }
		'which'
		{ after(grammarAccess.getRelativePronounsSubjectAccess().getWhichKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelativePronounsSubjectAccess().getWhoKeyword_1()); }
		'who'
		{ after(grammarAccess.getRelativePronounsSubjectAccess().getWhoKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelativePronounsSubjectAccess().getThatKeyword_2()); }
		'that'
		{ after(grammarAccess.getRelativePronounsSubjectAccess().getThatKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePronounsObject__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativePronounsObjectAccess().getWhoseKeyword_0()); }
		'whose'
		{ after(grammarAccess.getRelativePronounsObjectAccess().getWhoseKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelativePronounsObjectAccess().getWhomKeyword_1()); }
		'whom'
		{ after(grammarAccess.getRelativePronounsObjectAccess().getWhomKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnitAccess().getLengthUnitsParserRuleCall_0()); }
		ruleLengthUnits
		{ after(grammarAccess.getUnitAccess().getLengthUnitsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getPresureUnitsParserRuleCall_1()); }
		rulePresureUnits
		{ after(grammarAccess.getUnitAccess().getPresureUnitsParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getHeatUnitsParserRuleCall_2()); }
		ruleHeatUnits
		{ after(grammarAccess.getUnitAccess().getHeatUnitsParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getMassUnitsParserRuleCall_3()); }
		ruleMassUnits
		{ after(grammarAccess.getUnitAccess().getMassUnitsParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getVelcoityUnitsParserRuleCall_4()); }
		ruleVelcoityUnits
		{ after(grammarAccess.getUnitAccess().getVelcoityUnitsParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getCuvatureParserRuleCall_5()); }
		ruleCuvature
		{ after(grammarAccess.getUnitAccess().getCuvatureParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cuvature__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCuvatureAccess().getRadMKeyword_0()); }
		'rad/m'
		{ after(grammarAccess.getCuvatureAccess().getRadMKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getCuvatureAccess().getDegreeSignKeyword_1()); }
		'\u00B0'
		{ after(grammarAccess.getCuvatureAccess().getDegreeSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getCuvatureAccess().getRadKeyword_2()); }
		'rad'
		{ after(grammarAccess.getCuvatureAccess().getRadKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getCuvatureAccess().getMKeyword_3()); }
		'\u00B0/m'
		{ after(grammarAccess.getCuvatureAccess().getMKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VelcoityUnits__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVelcoityUnitsAccess().getMSKeyword_0()); }
		'm/s'
		{ after(grammarAccess.getVelcoityUnitsAccess().getMSKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getVelcoityUnitsAccess().getKnotsKeyword_1()); }
		'knots'
		{ after(grammarAccess.getVelcoityUnitsAccess().getKnotsKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getVelcoityUnitsAccess().getKmHKeyword_2()); }
		'km/h'
		{ after(grammarAccess.getVelcoityUnitsAccess().getKmHKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getVelcoityUnitsAccess().getMMinKeyword_3()); }
		'm/min'
		{ after(grammarAccess.getVelcoityUnitsAccess().getMMinKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MassUnits__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMassUnitsAccess().getKgKeyword_0()); }
		'kg'
		{ after(grammarAccess.getMassUnitsAccess().getKgKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMassUnitsAccess().getGKeyword_1()); }
		'g'
		{ after(grammarAccess.getMassUnitsAccess().getGKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMassUnitsAccess().getMgKeyword_2()); }
		'mg'
		{ after(grammarAccess.getMassUnitsAccess().getMgKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getMassUnitsAccess().getTKeyword_3()); }
		't'
		{ after(grammarAccess.getMassUnitsAccess().getTKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeatUnits__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeatUnitsAccess().getCKeyword_0()); }
		'C'
		{ after(grammarAccess.getHeatUnitsAccess().getCKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getHeatUnitsAccess().getFKeyword_1()); }
		'F'
		{ after(grammarAccess.getHeatUnitsAccess().getFKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PresureUnits__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPresureUnitsAccess().getBarKeyword_0()); }
		'bar'
		{ after(grammarAccess.getPresureUnitsAccess().getBarKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPresureUnitsAccess().getPaKeyword_1()); }
		'Pa'
		{ after(grammarAccess.getPresureUnitsAccess().getPaKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getPresureUnitsAccess().getHPaKeyword_2()); }
		'hPa'
		{ after(grammarAccess.getPresureUnitsAccess().getHPaKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LengthUnits__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLengthUnitsAccess().getMKeyword_0()); }
		'm'
		{ after(grammarAccess.getLengthUnitsAccess().getMKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getLengthUnitsAccess().getFKeyword_1()); }
		'f'
		{ after(grammarAccess.getLengthUnitsAccess().getFKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getLengthUnitsAccess().getKmKeyword_2()); }
		'km'
		{ after(grammarAccess.getLengthUnitsAccess().getKmKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getLengthUnitsAccess().getCmKeyword_3()); }
		'cm'
		{ after(grammarAccess.getLengthUnitsAccess().getCmKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getLengthUnitsAccess().getMmKeyword_4()); }
		'mm'
		{ after(grammarAccess.getLengthUnitsAccess().getMmKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getLengthUnitsAccess().getNmKeyword_5()); }
		'nm'
		{ after(grammarAccess.getLengthUnitsAccess().getNmKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnits__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitsAccess().getNsKeyword_0()); }
		'ns'
		{ after(grammarAccess.getTimeUnitsAccess().getNsKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getMsKeyword_1()); }
		'ms'
		{ after(grammarAccess.getTimeUnitsAccess().getMsKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getSKeyword_2()); }
		's'
		{ after(grammarAccess.getTimeUnitsAccess().getSKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getSecKeyword_3()); }
		'sec'
		{ after(grammarAccess.getTimeUnitsAccess().getSecKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getSecondKeyword_4()); }
		'second'
		{ after(grammarAccess.getTimeUnitsAccess().getSecondKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getSecondsKeyword_5()); }
		'seconds'
		{ after(grammarAccess.getTimeUnitsAccess().getSecondsKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getMinuteKeyword_6()); }
		'minute'
		{ after(grammarAccess.getTimeUnitsAccess().getMinuteKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getMinutesKeyword_7()); }
		'minutes'
		{ after(grammarAccess.getTimeUnitsAccess().getMinutesKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getMinKeyword_8()); }
		'min'
		{ after(grammarAccess.getTimeUnitsAccess().getMinKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getHourKeyword_9()); }
		'hour'
		{ after(grammarAccess.getTimeUnitsAccess().getHourKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getHoursKeyword_10()); }
		'hours'
		{ after(grammarAccess.getTimeUnitsAccess().getHoursKeyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getHKeyword_11()); }
		'h'
		{ after(grammarAccess.getTimeUnitsAccess().getHKeyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getDayKeyword_12()); }
		'day'
		{ after(grammarAccess.getTimeUnitsAccess().getDayKeyword_12()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getDaysKeyword_13()); }
		'days'
		{ after(grammarAccess.getTimeUnitsAccess().getDaysKeyword_13()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getDKeyword_14()); }
		'd'
		{ after(grammarAccess.getTimeUnitsAccess().getDKeyword_14()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getMonthKeyword_15()); }
		'month'
		{ after(grammarAccess.getTimeUnitsAccess().getMonthKeyword_15()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getMonthsKeyword_16()); }
		'months'
		{ after(grammarAccess.getTimeUnitsAccess().getMonthsKeyword_16()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getMonKeyword_17()); }
		'mon'
		{ after(grammarAccess.getTimeUnitsAccess().getMonKeyword_17()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getYearKeyword_18()); }
		'year'
		{ after(grammarAccess.getTimeUnitsAccess().getYearKeyword_18()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getYearsKeyword_19()); }
		'years'
		{ after(grammarAccess.getTimeUnitsAccess().getYearsKeyword_19()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitsAccess().getYKeyword_20()); }
		'y'
		{ after(grammarAccess.getTimeUnitsAccess().getYKeyword_20()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modality__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModalityAccess().getSHALLEnumLiteralDeclaration_0()); }
		('shall')
		{ after(grammarAccess.getModalityAccess().getSHALLEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getModalityAccess().getSHOULDEnumLiteralDeclaration_1()); }
		('should')
		{ after(grammarAccess.getModalityAccess().getSHOULDEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getModalityAccess().getWILLEnumLiteralDeclaration_2()); }
		('will')
		{ after(grammarAccess.getModalityAccess().getWILLEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getModalityAccess().getWOULDEnumLiteralDeclaration_3()); }
		('would')
		{ after(grammarAccess.getModalityAccess().getWOULDEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getModalityAccess().getCANEnumLiteralDeclaration_4()); }
		('can')
		{ after(grammarAccess.getModalityAccess().getCANEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getModalityAccess().getCOULDEnumLiteralDeclaration_5()); }
		('could')
		{ after(grammarAccess.getModalityAccess().getCOULDEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getModalityAccess().getMUSTEnumLiteralDeclaration_6()); }
		('must')
		{ after(grammarAccess.getModalityAccess().getMUSTEnumLiteralDeclaration_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifierAccess().getGLOBALLYEnumLiteralDeclaration_0()); }
		('Globally')
		{ after(grammarAccess.getModifierAccess().getGLOBALLYEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getGLOBALLYEnumLiteralDeclaration_1()); }
		('globally')
		{ after(grammarAccess.getModifierAccess().getGLOBALLYEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getALWAYSEnumLiteralDeclaration_2()); }
		('Always')
		{ after(grammarAccess.getModifierAccess().getALWAYSEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getALWAYSEnumLiteralDeclaration_3()); }
		('always')
		{ after(grammarAccess.getModifierAccess().getALWAYSEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getSOMETIMESEnumLiteralDeclaration_4()); }
		('Sometimes')
		{ after(grammarAccess.getModifierAccess().getSOMETIMESEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getSOMETIMESEnumLiteralDeclaration_5()); }
		('sometimes')
		{ after(grammarAccess.getModifierAccess().getSOMETIMESEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getEVENTUALLYEnumLiteralDeclaration_6()); }
		('Eventually')
		{ after(grammarAccess.getModifierAccess().getEVENTUALLYEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getEVENTUALLYEnumLiteralDeclaration_7()); }
		('eventually')
		{ after(grammarAccess.getModifierAccess().getEVENTUALLYEnumLiteralDeclaration_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseOrdinator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getIFEnumLiteralDeclaration_0()); }
		('if')
		{ after(grammarAccess.getClauseOrdinatorAccess().getIFEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getAFTEREnumLiteralDeclaration_1()); }
		('after')
		{ after(grammarAccess.getClauseOrdinatorAccess().getAFTEREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getONCEEnumLiteralDeclaration_2()); }
		('once')
		{ after(grammarAccess.getClauseOrdinatorAccess().getONCEEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getWHENEnumLiteralDeclaration_3()); }
		('when')
		{ after(grammarAccess.getClauseOrdinatorAccess().getWHENEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getWHENEVEREnumLiteralDeclaration_4()); }
		('whenever')
		{ after(grammarAccess.getClauseOrdinatorAccess().getWHENEVEREnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getWHILEEnumLiteralDeclaration_5()); }
		('while')
		{ after(grammarAccess.getClauseOrdinatorAccess().getWHILEEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getBEFOREEnumLiteralDeclaration_6()); }
		('before')
		{ after(grammarAccess.getClauseOrdinatorAccess().getBEFOREEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getUNTILEnumLiteralDeclaration_7()); }
		('until')
		{ after(grammarAccess.getClauseOrdinatorAccess().getUNTILEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getIFEnumLiteralDeclaration_8()); }
		('If')
		{ after(grammarAccess.getClauseOrdinatorAccess().getIFEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getAFTEREnumLiteralDeclaration_9()); }
		('After')
		{ after(grammarAccess.getClauseOrdinatorAccess().getAFTEREnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getONCEEnumLiteralDeclaration_10()); }
		('Once')
		{ after(grammarAccess.getClauseOrdinatorAccess().getONCEEnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getWHENEnumLiteralDeclaration_11()); }
		('When')
		{ after(grammarAccess.getClauseOrdinatorAccess().getWHENEnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getWHENEVEREnumLiteralDeclaration_12()); }
		('Whenever')
		{ after(grammarAccess.getClauseOrdinatorAccess().getWHENEVEREnumLiteralDeclaration_12()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getWHILEEnumLiteralDeclaration_13()); }
		('While')
		{ after(grammarAccess.getClauseOrdinatorAccess().getWHILEEnumLiteralDeclaration_13()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getBEFOREEnumLiteralDeclaration_14()); }
		('Before')
		{ after(grammarAccess.getClauseOrdinatorAccess().getBEFOREEnumLiteralDeclaration_14()); }
	)
	|
	(
		{ before(grammarAccess.getClauseOrdinatorAccess().getUNTILEnumLiteralDeclaration_15()); }
		('Until')
		{ after(grammarAccess.getClauseOrdinatorAccess().getUNTILEnumLiteralDeclaration_15()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__0__Impl
	rule__Requirement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getReqKeyword_0()); }
	('Req')?
	{ after(grammarAccess.getRequirementAccess().getReqKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__1__Impl
	rule__Requirement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getReqIDAssignment_1()); }
	(rule__Requirement__ReqIDAssignment_1)?
	{ after(grammarAccess.getRequirementAccess().getReqIDAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__2__Impl
	rule__Requirement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getAlternatives_2()); }
	(rule__Requirement__Alternatives_2)
	{ after(grammarAccess.getRequirementAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__3__Impl
	rule__Requirement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getTextAssignment_3()); }
	(rule__Requirement__TextAssignment_3)
	{ after(grammarAccess.getRequirementAccess().getTextAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getAlternatives_4()); }
	(rule__Requirement__Alternatives_4)
	{ after(grammarAccess.getRequirementAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RequirementText__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequirementText__Group__0__Impl
	rule__RequirementText__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementTextAccess().getGroup_0()); }
	(rule__RequirementText__Group_0__0)?
	{ after(grammarAccess.getRequirementTextAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequirementText__Group__1__Impl
	rule__RequirementText__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementTextAccess().getMainclausesAssignment_1()); }
	(rule__RequirementText__MainclausesAssignment_1)
	{ after(grammarAccess.getRequirementTextAccess().getMainclausesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequirementText__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementTextAccess().getGroup_2()); }
	(rule__RequirementText__Group_2__0)?
	{ after(grammarAccess.getRequirementTextAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RequirementText__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequirementText__Group_0__0__Impl
	rule__RequirementText__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementTextAccess().getCondClausesAssignment_0_0()); }
	(rule__RequirementText__CondClausesAssignment_0_0)
	{ after(grammarAccess.getRequirementTextAccess().getCondClausesAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequirementText__Group_0__1__Impl
	rule__RequirementText__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementTextAccess().getCommaKeyword_0_1()); }
	(',')?
	{ after(grammarAccess.getRequirementTextAccess().getCommaKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequirementText__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementTextAccess().getThenKeyword_0_2()); }
	'then'
	{ after(grammarAccess.getRequirementTextAccess().getThenKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RequirementText__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequirementText__Group_2__0__Impl
	rule__RequirementText__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementTextAccess().getCommaKeyword_2_0()); }
	(',')?
	{ after(grammarAccess.getRequirementTextAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequirementText__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementTextAccess().getCondClausesAssignment_2_1()); }
	(rule__RequirementText__CondClausesAssignment_2_1)
	{ after(grammarAccess.getRequirementTextAccess().getCondClausesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalClause__Group__0__Impl
	rule__ConditionalClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalClauseAccess().getOrdinatorAssignment_0()); }
	(rule__ConditionalClause__OrdinatorAssignment_0)
	{ after(grammarAccess.getConditionalClauseAccess().getOrdinatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalClauseAccess().getClausesAssignment_1()); }
	(rule__ConditionalClause__ClausesAssignment_1)
	{ after(grammarAccess.getConditionalClauseAccess().getClausesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MainClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainClause__Group__0__Impl
	rule__MainClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainClauseAccess().getModifierAssignment_0()); }
	(rule__MainClause__ModifierAssignment_0)?
	{ after(grammarAccess.getMainClauseAccess().getModifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainClauseAccess().getClausesAssignment_1()); }
	(rule__MainClause__ClausesAssignment_1)
	{ after(grammarAccess.getMainClauseAccess().getClausesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clauses__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clauses__Group__0__Impl
	rule__Clauses__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clauses__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClausesAccess().getClausesAssignment_0()); }
	(rule__Clauses__ClausesAssignment_0)
	{ after(grammarAccess.getClausesAccess().getClausesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clauses__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clauses__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clauses__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClausesAccess().getGroup_1()); }
	(rule__Clauses__Group_1__0)*
	{ after(grammarAccess.getClausesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clauses__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clauses__Group_1__0__Impl
	rule__Clauses__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clauses__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClausesAccess().getConjunctionAssignment_1_0()); }
	(rule__Clauses__ConjunctionAssignment_1_0)
	{ after(grammarAccess.getClausesAccess().getConjunctionAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clauses__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clauses__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clauses__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClausesAccess().getClausesAssignment_1_1()); }
	(rule__Clauses__ClausesAssignment_1_1)
	{ after(grammarAccess.getClausesAccess().getClausesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModalitySentence__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModalitySentence__Group__0__Impl
	rule__ModalitySentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModalitySentenceAccess().getActorsAssignment_0()); }
	(rule__ModalitySentence__ActorsAssignment_0)
	{ after(grammarAccess.getModalitySentenceAccess().getActorsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModalitySentence__Group__1__Impl
	rule__ModalitySentence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModalitySentenceAccess().getModelityAssignment_1()); }
	(rule__ModalitySentence__ModelityAssignment_1)
	{ after(grammarAccess.getModalitySentenceAccess().getModelityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModalitySentence__Group__2__Impl
	rule__ModalitySentence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModalitySentenceAccess().getNegationAssignment_2()); }
	(rule__ModalitySentence__NegationAssignment_2)?
	{ after(grammarAccess.getModalitySentenceAccess().getNegationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModalitySentence__Group__3__Impl
	rule__ModalitySentence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModalitySentenceAccess().getAuxiliarVerbAssignment_3()); }
	(rule__ModalitySentence__AuxiliarVerbAssignment_3)?
	{ after(grammarAccess.getModalitySentenceAccess().getAuxiliarVerbAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModalitySentence__Group__4__Impl
	rule__ModalitySentence__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModalitySentenceAccess().getPredicateAssignment_4()); }
	(rule__ModalitySentence__PredicateAssignment_4)
	{ after(grammarAccess.getModalitySentenceAccess().getPredicateAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModalitySentence__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModalitySentenceAccess().getConstraintsAssignment_5()); }
	(rule__ModalitySentence__ConstraintsAssignment_5)*
	{ after(grammarAccess.getModalitySentenceAccess().getConstraintsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateSentence__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_0__0__Impl
	rule__PredicateSentence__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getActorsAssignment_0_0()); }
	(rule__PredicateSentence__ActorsAssignment_0_0)
	{ after(grammarAccess.getPredicateSentenceAccess().getActorsAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_0__1__Impl
	rule__PredicateSentence__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getPredicateAssignment_0_1()); }
	(rule__PredicateSentence__PredicateAssignment_0_1)
	{ after(grammarAccess.getPredicateSentenceAccess().getPredicateAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getConstraintsAssignment_0_2()); }
	(rule__PredicateSentence__ConstraintsAssignment_0_2)*
	{ after(grammarAccess.getPredicateSentenceAccess().getConstraintsAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateSentence__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_1__0__Impl
	rule__PredicateSentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getActorsAssignment_1_0()); }
	(rule__PredicateSentence__ActorsAssignment_1_0)
	{ after(grammarAccess.getPredicateSentenceAccess().getActorsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_1__1__Impl
	rule__PredicateSentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAssignment_1_1()); }
	(rule__PredicateSentence__AuxiliarVerbAssignment_1_1)
	{ after(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_1__2__Impl
	rule__PredicateSentence__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getNegationAssignment_1_2()); }
	(rule__PredicateSentence__NegationAssignment_1_2)?
	{ after(grammarAccess.getPredicateSentenceAccess().getNegationAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_1__3__Impl
	rule__PredicateSentence__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAssignment_1_3()); }
	(rule__PredicateSentence__AuxiliarVerbAssignment_1_3)?
	{ after(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_1__4__Impl
	rule__PredicateSentence__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getPredicateAssignment_1_4()); }
	(rule__PredicateSentence__PredicateAssignment_1_4)
	{ after(grammarAccess.getPredicateSentenceAccess().getPredicateAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getConstraintsAssignment_1_5()); }
	(rule__PredicateSentence__ConstraintsAssignment_1_5)*
	{ after(grammarAccess.getPredicateSentenceAccess().getConstraintsAssignment_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateSentence__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_2__0__Impl
	rule__PredicateSentence__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getActorsAssignment_2_0()); }
	(rule__PredicateSentence__ActorsAssignment_2_0)
	{ after(grammarAccess.getPredicateSentenceAccess().getActorsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_2__1__Impl
	rule__PredicateSentence__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAssignment_2_1()); }
	(rule__PredicateSentence__AuxiliarVerbAssignment_2_1)
	{ after(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_2__2__Impl
	rule__PredicateSentence__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getNegationAssignment_2_2()); }
	(rule__PredicateSentence__NegationAssignment_2_2)?
	{ after(grammarAccess.getPredicateSentenceAccess().getNegationAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_2__3__Impl
	rule__PredicateSentence__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getObjectAssignment_2_3()); }
	(rule__PredicateSentence__ObjectAssignment_2_3)?
	{ after(grammarAccess.getPredicateSentenceAccess().getObjectAssignment_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateSentence__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__Group_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateSentenceAccess().getConstraintsAssignment_2_4()); }
	(rule__PredicateSentence__ConstraintsAssignment_2_4)*
	{ after(grammarAccess.getPredicateSentenceAccess().getConstraintsAssignment_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExistenceSentence__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExistenceSentence__Group__0__Impl
	rule__ExistenceSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistenceSentenceAccess().getExistencePrefaceParserRuleCall_0()); }
	ruleExistencePreface
	{ after(grammarAccess.getExistenceSentenceAccess().getExistencePrefaceParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExistenceSentence__Group__1__Impl
	rule__ExistenceSentence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistenceSentenceAccess().getActorsAssignment_1()); }
	(rule__ExistenceSentence__ActorsAssignment_1)
	{ after(grammarAccess.getExistenceSentenceAccess().getActorsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExistenceSentence__Group__2__Impl
	rule__ExistenceSentence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistenceSentenceAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getExistenceSentenceAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExistenceSentence__Group__3__Impl
	rule__ExistenceSentence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistenceSentenceAccess().getRelativeClauseAssignment_3()); }
	(rule__ExistenceSentence__RelativeClauseAssignment_3)
	{ after(grammarAccess.getExistenceSentenceAccess().getRelativeClauseAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExistenceSentence__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistenceSentenceAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getExistenceSentenceAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySentence__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_0__0__Impl
	rule__PropertySentence__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getPropertyAssignment_0_0()); }
	(rule__PropertySentence__PropertyAssignment_0_0)
	{ after(grammarAccess.getPropertySentenceAccess().getPropertyAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_0__1__Impl
	rule__PropertySentence__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getModelityAssignment_0_1()); }
	(rule__PropertySentence__ModelityAssignment_0_1)
	{ after(grammarAccess.getPropertySentenceAccess().getModelityAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_0__2__Impl
	rule__PropertySentence__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getNegationAssignment_0_2()); }
	(rule__PropertySentence__NegationAssignment_0_2)?
	{ after(grammarAccess.getPropertySentenceAccess().getNegationAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_0__3__Impl
	rule__PropertySentence__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAssignment_0_3()); }
	(rule__PropertySentence__AuxiliarVerbAssignment_0_3)?
	{ after(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_0__4__Impl
	rule__PropertySentence__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getPredicateAssignment_0_4()); }
	(rule__PropertySentence__PredicateAssignment_0_4)
	{ after(grammarAccess.getPropertySentenceAccess().getPredicateAssignment_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_0_5()); }
	(rule__PropertySentence__ConstraintsAssignment_0_5)*
	{ after(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySentence__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_1__0__Impl
	rule__PropertySentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getPropertyAssignment_1_0()); }
	(rule__PropertySentence__PropertyAssignment_1_0)
	{ after(grammarAccess.getPropertySentenceAccess().getPropertyAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_1__1__Impl
	rule__PropertySentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getModelityAssignment_1_1()); }
	(rule__PropertySentence__ModelityAssignment_1_1)
	{ after(grammarAccess.getPropertySentenceAccess().getModelityAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_1__2__Impl
	rule__PropertySentence__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getNegationAssignment_1_2()); }
	(rule__PropertySentence__NegationAssignment_1_2)?
	{ after(grammarAccess.getPropertySentenceAccess().getNegationAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_1__3__Impl
	rule__PropertySentence__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAssignment_1_3()); }
	(rule__PropertySentence__AuxiliarVerbAssignment_1_3)
	{ after(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_1__4__Impl
	rule__PropertySentence__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getObjectAssignment_1_4()); }
	(rule__PropertySentence__ObjectAssignment_1_4)?
	{ after(grammarAccess.getPropertySentenceAccess().getObjectAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_1_5()); }
	(rule__PropertySentence__ConstraintsAssignment_1_5)*
	{ after(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySentence__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_2__0__Impl
	rule__PropertySentence__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getPropertyAssignment_2_0()); }
	(rule__PropertySentence__PropertyAssignment_2_0)
	{ after(grammarAccess.getPropertySentenceAccess().getPropertyAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_2__1__Impl
	rule__PropertySentence__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAssignment_2_1()); }
	(rule__PropertySentence__AuxiliarVerbAssignment_2_1)
	{ after(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_2__2__Impl
	rule__PropertySentence__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getNegationAssignment_2_2()); }
	(rule__PropertySentence__NegationAssignment_2_2)?
	{ after(grammarAccess.getPropertySentenceAccess().getNegationAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getAlternatives_2_3()); }
	(rule__PropertySentence__Alternatives_2_3)
	{ after(grammarAccess.getPropertySentenceAccess().getAlternatives_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySentence__Group_2_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_2_3_0__0__Impl
	rule__PropertySentence__Group_2_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_2_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getAlternatives_2_3_0_0()); }
	(rule__PropertySentence__Alternatives_2_3_0_0)
	{ after(grammarAccess.getPropertySentenceAccess().getAlternatives_2_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_2_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_2_3_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_2_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_2_3_0_1()); }
	(rule__PropertySentence__ConstraintsAssignment_2_3_0_1)*
	{ after(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_2_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertySentence__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_3__0__Impl
	rule__PropertySentence__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getPropertyAssignment_3_0()); }
	(rule__PropertySentence__PropertyAssignment_3_0)
	{ after(grammarAccess.getPropertySentenceAccess().getPropertyAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_3__1__Impl
	rule__PropertySentence__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getAlternatives_3_1()); }
	(rule__PropertySentence__Alternatives_3_1)
	{ after(grammarAccess.getPropertySentenceAccess().getAlternatives_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_3__2__Impl
	rule__PropertySentence__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getObjectAssignment_3_2()); }
	(rule__PropertySentence__ObjectAssignment_3_2)?
	{ after(grammarAccess.getPropertySentenceAccess().getObjectAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertySentence__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_3_3()); }
	(rule__PropertySentence__ConstraintsAssignment_3_3)*
	{ after(grammarAccess.getPropertySentenceAccess().getConstraintsAssignment_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getAlternatives_0()); }
	(rule__Property__Alternatives_0)?
	{ after(grammarAccess.getPropertyAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__1__Impl
	rule__Property__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getAlternatives_1()); }
	(rule__Property__Alternatives_1)
	{ after(grammarAccess.getPropertyAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__2__Impl
	rule__Property__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getPROPERTY_TERMTerminalRuleCall_2()); }
	RULE_PROPERTY_TERM
	{ after(grammarAccess.getPropertyAccess().getPROPERTY_TERMTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getAlternatives_3()); }
	(rule__Property__Alternatives_3)
	{ after(grammarAccess.getPropertyAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeClause__Group__0__Impl
	rule__RelativeClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeClauseAccess().getSentenceAssignment_0()); }
	(rule__RelativeClause__SentenceAssignment_0)
	{ after(grammarAccess.getRelativeClauseAccess().getSentenceAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeClauseAccess().getGroup_1()); }
	(rule__RelativeClause__Group_1__0)*
	{ after(grammarAccess.getRelativeClauseAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeClause__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeClause__Group_1__0__Impl
	rule__RelativeClause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeClause__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeClauseAccess().getConjunctionAssignment_1_0()); }
	(rule__RelativeClause__ConjunctionAssignment_1_0)
	{ after(grammarAccess.getRelativeClauseAccess().getConjunctionAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeClause__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeClause__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeClause__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeClauseAccess().getCondClausesAssignment_1_1()); }
	(rule__RelativeClause__CondClausesAssignment_1_1)
	{ after(grammarAccess.getRelativeClauseAccess().getCondClausesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeSentence__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_0__0__Impl
	rule__RelativeSentence__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getPronounAssignment_0_0()); }
	(rule__RelativeSentence__PronounAssignment_0_0)
	{ after(grammarAccess.getRelativeSentenceAccess().getPronounAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_0__1__Impl
	rule__RelativeSentence__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getModelityAssignment_0_1()); }
	(rule__RelativeSentence__ModelityAssignment_0_1)
	{ after(grammarAccess.getRelativeSentenceAccess().getModelityAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_0__2__Impl
	rule__RelativeSentence__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getNegationAssignment_0_2()); }
	(rule__RelativeSentence__NegationAssignment_0_2)?
	{ after(grammarAccess.getRelativeSentenceAccess().getNegationAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_0__3__Impl
	rule__RelativeSentence__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getPredicateAssignment_0_3()); }
	(rule__RelativeSentence__PredicateAssignment_0_3)
	{ after(grammarAccess.getRelativeSentenceAccess().getPredicateAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getConstraintsAssignment_0_4()); }
	(rule__RelativeSentence__ConstraintsAssignment_0_4)*
	{ after(grammarAccess.getRelativeSentenceAccess().getConstraintsAssignment_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeSentence__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_1__0__Impl
	rule__RelativeSentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getPronounAssignment_1_0()); }
	(rule__RelativeSentence__PronounAssignment_1_0)
	{ after(grammarAccess.getRelativeSentenceAccess().getPronounAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_1__1__Impl
	rule__RelativeSentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getGroup_1_1()); }
	(rule__RelativeSentence__Group_1_1__0)?
	{ after(grammarAccess.getRelativeSentenceAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_1__2__Impl
	rule__RelativeSentence__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getPredicateAssignment_1_2()); }
	(rule__RelativeSentence__PredicateAssignment_1_2)
	{ after(grammarAccess.getRelativeSentenceAccess().getPredicateAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getConstraintsAssignment_1_3()); }
	(rule__RelativeSentence__ConstraintsAssignment_1_3)*
	{ after(grammarAccess.getRelativeSentenceAccess().getConstraintsAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeSentence__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_1_1__0__Impl
	rule__RelativeSentence__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getAuxiliarAssignment_1_1_0()); }
	(rule__RelativeSentence__AuxiliarAssignment_1_1_0)
	{ after(grammarAccess.getRelativeSentenceAccess().getAuxiliarAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getNegationAssignment_1_1_1()); }
	(rule__RelativeSentence__NegationAssignment_1_1_1)
	{ after(grammarAccess.getRelativeSentenceAccess().getNegationAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelativeSentence__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_2__0__Impl
	rule__RelativeSentence__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getPronounAssignment_2_0()); }
	(rule__RelativeSentence__PronounAssignment_2_0)
	{ after(grammarAccess.getRelativeSentenceAccess().getPronounAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelativeSentence__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelativeSentenceAccess().getAlternatives_2_1()); }
	(rule__RelativeSentence__Alternatives_2_1)
	{ after(grammarAccess.getRelativeSentenceAccess().getAlternatives_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actors__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actors__Group__0__Impl
	rule__Actors__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorsAccess().getActorsAssignment_0()); }
	(rule__Actors__ActorsAssignment_0)
	{ after(grammarAccess.getActorsAccess().getActorsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actors__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorsAccess().getGroup_1()); }
	(rule__Actors__Group_1__0)*
	{ after(grammarAccess.getActorsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actors__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actors__Group_1__0__Impl
	rule__Actors__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorsAccess().getConjunctionAssignment_1_0()); }
	(rule__Actors__ConjunctionAssignment_1_0)
	{ after(grammarAccess.getActorsAccess().getConjunctionAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actors__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorsAccess().getActorsAssignment_1_1()); }
	(rule__Actors__ActorsAssignment_1_1)
	{ after(grammarAccess.getActorsAccess().getActorsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__0__Impl
	rule__Actor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getPreNominativeParserRuleCall_0()); }
	(rulePreNominative)?
	{ after(grammarAccess.getActorAccess().getPreNominativeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getAlternatives_1()); }
	(rule__Actor__Alternatives_1)
	{ after(grammarAccess.getActorAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group_2__0__Impl
	rule__Predicate__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPredicateAccess().getPredicatesAssignment_2_0()); }
		(rule__Predicate__PredicatesAssignment_2_0)
		{ after(grammarAccess.getPredicateAccess().getPredicatesAssignment_2_0()); }
	)
	(
		{ before(grammarAccess.getPredicateAccess().getPredicatesAssignment_2_0()); }
		(rule__Predicate__PredicatesAssignment_2_0)*
		{ after(grammarAccess.getPredicateAccess().getPredicatesAssignment_2_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getObjectAssignment_2_1()); }
	(rule__Predicate__ObjectAssignment_2_1)
	{ after(grammarAccess.getPredicateAccess().getObjectAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group__0__Impl
	rule__PredicateObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getArticleAssignment_0()); }
	(rule__PredicateObject__ArticleAssignment_0)
	{ after(grammarAccess.getPredicateObjectAccess().getArticleAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObject__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectAccess().getAlternatives_1()); }
	(rule__PredicateObject__Alternatives_1)
	{ after(grammarAccess.getPredicateObjectAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExistencePreface__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExistencePreface__Group__0__Impl
	rule__ExistencePreface__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistencePreface__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistencePrefaceAccess().getExistencePrefaceAction_0()); }
	()
	{ after(grammarAccess.getExistencePrefaceAccess().getExistencePrefaceAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistencePreface__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExistencePreface__Group__1__Impl
	rule__ExistencePreface__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistencePreface__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistencePrefaceAccess().getThereKeyword_1()); }
	'there'
	{ after(grammarAccess.getExistencePrefaceAccess().getThereKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistencePreface__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExistencePreface__Group__2__Impl
	rule__ExistencePreface__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistencePreface__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistencePrefaceAccess().getModifierAssignment_2()); }
	(rule__ExistencePreface__ModifierAssignment_2)?
	{ after(grammarAccess.getExistencePrefaceAccess().getModifierAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistencePreface__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExistencePreface__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistencePreface__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistencePrefaceAccess().getAlternatives_3()); }
	(rule__ExistencePreface__Alternatives_3)
	{ after(grammarAccess.getExistencePrefaceAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__0__Impl
	rule__Object__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getPreNominativeParserRuleCall_0()); }
	(rulePreNominative)?
	{ after(grammarAccess.getObjectAccess().getPreNominativeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getAlternatives_1()); }
	(rule__Object__Alternatives_1)
	{ after(grammarAccess.getObjectAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getOrdinatorAssignment_0()); }
	(rule__Constraint__OrdinatorAssignment_0)
	{ after(grammarAccess.getConstraintAccess().getOrdinatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getAlternatives_1()); }
	(rule__Constraint__Alternatives_1)
	{ after(grammarAccess.getConstraintAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintOrdinators__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintOrdinators__Group__0__Impl
	rule__ConstraintOrdinators__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintOrdinators__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintOrdinatorsAccess().getStuffingAssignment_0()); }
	(rule__ConstraintOrdinators__StuffingAssignment_0)?
	{ after(grammarAccess.getConstraintOrdinatorsAccess().getStuffingAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintOrdinators__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintOrdinators__Group__1__Impl
	rule__ConstraintOrdinators__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintOrdinators__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintOrdinatorsAccess().getAdverbialAssignment_1()); }
	(rule__ConstraintOrdinators__AdverbialAssignment_1)
	{ after(grammarAccess.getConstraintOrdinatorsAccess().getAdverbialAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintOrdinators__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintOrdinators__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintOrdinators__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintOrdinatorsAccess().getComperatorAssignment_2()); }
	(rule__ConstraintOrdinators__ComperatorAssignment_2)?
	{ after(grammarAccess.getConstraintOrdinatorsAccess().getComperatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeConstraint__Group__0__Impl
	rule__TimeConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeConstraintAccess().getOrdinatorAssignment_0()); }
	(rule__TimeConstraint__OrdinatorAssignment_0)
	{ after(grammarAccess.getTimeConstraintAccess().getOrdinatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeConstraint__Group__1__Impl
	rule__TimeConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeConstraintAccess().getTimeAssignment_1()); }
	(rule__TimeConstraint__TimeAssignment_1)
	{ after(grammarAccess.getTimeConstraintAccess().getTimeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeConstraintAccess().getUnitAssignment_2()); }
	(rule__TimeConstraint__UnitAssignment_2)
	{ after(grammarAccess.getTimeConstraintAccess().getUnitAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntervallConstraints__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntervallConstraints__Group__0__Impl
	rule__IntervallConstraints__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervallConstraintsAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getIntervallConstraintsAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntervallConstraints__Group__1__Impl
	rule__IntervallConstraints__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervallConstraintsAccess().getLowerAssignment_1()); }
	(rule__IntervallConstraints__LowerAssignment_1)
	{ after(grammarAccess.getIntervallConstraintsAccess().getLowerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntervallConstraints__Group__2__Impl
	rule__IntervallConstraints__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervallConstraintsAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getIntervallConstraintsAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntervallConstraints__Group__3__Impl
	rule__IntervallConstraints__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervallConstraintsAccess().getHigherAssignment_3()); }
	(rule__IntervallConstraints__HigherAssignment_3)
	{ after(grammarAccess.getIntervallConstraintsAccess().getHigherAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntervallConstraints__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervallConstraintsAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getIntervallConstraintsAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueSet__Group__0__Impl
	rule__ValueSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueSetAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getValueSetAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueSet__Group__1__Impl
	rule__ValueSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueSetAccess().getElementsAssignment_1()); }
	(rule__ValueSet__ElementsAssignment_1)
	{ after(grammarAccess.getValueSetAccess().getElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueSet__Group__2__Impl
	rule__ValueSet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueSetAccess().getGroup_2()); }
	(rule__ValueSet__Group_2__0)*
	{ after(grammarAccess.getValueSetAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueSet__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueSetAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getValueSetAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueSet__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueSet__Group_2__0__Impl
	rule__ValueSet__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueSetAccess().getSemicolonKeyword_2_0()); }
	';'
	{ after(grammarAccess.getValueSetAccess().getSemicolonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueSet__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueSetAccess().getElementsAssignment_2_1()); }
	(rule__ValueSet__ElementsAssignment_2_1)
	{ after(grammarAccess.getValueSetAccess().getElementsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectSet__Group__0__Impl
	rule__ObjectSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectSetAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getObjectSetAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectSet__Group__1__Impl
	rule__ObjectSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectSetAccess().getElementsAssignment_1()); }
	(rule__ObjectSet__ElementsAssignment_1)
	{ after(grammarAccess.getObjectSetAccess().getElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectSet__Group__2__Impl
	rule__ObjectSet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectSetAccess().getGroup_2()); }
	(rule__ObjectSet__Group_2__0)*
	{ after(grammarAccess.getObjectSetAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectSet__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectSetAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getObjectSetAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectSet__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectSet__Group_2__0__Impl
	rule__ObjectSet__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectSetAccess().getSemicolonKeyword_2_0()); }
	';'
	{ after(grammarAccess.getObjectSetAccess().getSemicolonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectSet__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectSetAccess().getElementsAssignment_2_1()); }
	(rule__ObjectSet__ElementsAssignment_2_1)
	{ after(grammarAccess.getObjectSetAccess().getElementsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntValue__Group__0__Impl
	rule__IntValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntValueAccess().getValueAssignment_0()); }
	(rule__IntValue__ValueAssignment_0)
	{ after(grammarAccess.getIntValueAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntValueAccess().getUnitAssignment_1()); }
	(rule__IntValue__UnitAssignment_1)?
	{ after(grammarAccess.getIntValueAccess().getUnitAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FloatValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatValue__Group__0__Impl
	rule__FloatValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatValueAccess().getValueAssignment_0()); }
	(rule__FloatValue__ValueAssignment_0)
	{ after(grammarAccess.getFloatValueAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatValueAccess().getUnitAssignment_1()); }
	(rule__FloatValue__UnitAssignment_1)?
	{ after(grammarAccess.getFloatValueAccess().getUnitAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReqID__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReqID__Group__0__Impl
	rule__ReqID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqID__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReqIDAccess().getAlternatives_0()); }
	(rule__ReqID__Alternatives_0)
	{ after(grammarAccess.getReqIDAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqID__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReqID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqID__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReqIDAccess().getAlternatives_1()); }
	(rule__ReqID__Alternatives_1)*
	{ after(grammarAccess.getReqIDAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WORD__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WORD__Group__0__Impl
	rule__WORD__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WORD__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWORDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getWORDAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WORD__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WORD__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WORD__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWORDAccess().getGroup_1()); }
	(rule__WORD__Group_1__0)*
	{ after(grammarAccess.getWORDAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WORD__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WORD__Group_1__0__Impl
	rule__WORD__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WORD__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWORDAccess().getHyphenMinusKeyword_1_0()); }
	'-'
	{ after(grammarAccess.getWORDAccess().getHyphenMinusKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WORD__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WORD__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WORD__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWORDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getWORDAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Quantification__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantification__Group_6__0__Impl
	rule__Quantification__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantificationAccess().getEitherKeyword_6_0()); }
	'either'
	{ after(grammarAccess.getQuantificationAccess().getEitherKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantification__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantification__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantificationAccess().getAllKeyword_6_1()); }
	'All'
	{ after(grammarAccess.getQuantificationAccess().getAllKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__RequirementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getRequirementsRequirementParserRuleCall_0()); }
		ruleRequirement
		{ after(grammarAccess.getModelAccess().getRequirementsRequirementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__ReqIDAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementAccess().getReqIDReqIDParserRuleCall_1_0()); }
		ruleReqID
		{ after(grammarAccess.getRequirementAccess().getReqIDReqIDParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__TextAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementAccess().getTextRequirementTextParserRuleCall_3_0()); }
		ruleRequirementText
		{ after(grammarAccess.getRequirementAccess().getTextRequirementTextParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__CondClausesAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementTextAccess().getCondClausesConditionalClauseParserRuleCall_0_0_0()); }
		ruleConditionalClause
		{ after(grammarAccess.getRequirementTextAccess().getCondClausesConditionalClauseParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__MainclausesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementTextAccess().getMainclausesMainClauseParserRuleCall_1_0()); }
		ruleMainClause
		{ after(grammarAccess.getRequirementTextAccess().getMainclausesMainClauseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequirementText__CondClausesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementTextAccess().getCondClausesConditionalClauseParserRuleCall_2_1_0()); }
		ruleConditionalClause
		{ after(grammarAccess.getRequirementTextAccess().getCondClausesConditionalClauseParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalClause__OrdinatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalClauseAccess().getOrdinatorClauseOrdinatorEnumRuleCall_0_0()); }
		ruleClauseOrdinator
		{ after(grammarAccess.getConditionalClauseAccess().getOrdinatorClauseOrdinatorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalClause__ClausesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalClauseAccess().getClausesClausesParserRuleCall_1_0()); }
		ruleClauses
		{ after(grammarAccess.getConditionalClauseAccess().getClausesClausesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainClause__ModifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainClauseAccess().getModifierModifierEnumRuleCall_0_0()); }
		ruleModifier
		{ after(grammarAccess.getMainClauseAccess().getModifierModifierEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainClause__ClausesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainClauseAccess().getClausesClauseParserRuleCall_1_0()); }
		ruleClause
		{ after(grammarAccess.getMainClauseAccess().getClausesClauseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clauses__ClausesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClausesAccess().getClausesClauseParserRuleCall_0_0()); }
		ruleClause
		{ after(grammarAccess.getClausesAccess().getClausesClauseParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clauses__ConjunctionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClausesAccess().getConjunctionConjunctionParserRuleCall_1_0_0()); }
		ruleConjunction
		{ after(grammarAccess.getClausesAccess().getConjunctionConjunctionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clauses__ClausesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClausesAccess().getClausesClauseParserRuleCall_1_1_0()); }
		ruleClause
		{ after(grammarAccess.getClausesAccess().getClausesClauseParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__ActorsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModalitySentenceAccess().getActorsActorsParserRuleCall_0_0()); }
		ruleActors
		{ after(grammarAccess.getModalitySentenceAccess().getActorsActorsParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__ModelityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModalitySentenceAccess().getModelityModalityEnumRuleCall_1_0()); }
		ruleModality
		{ after(grammarAccess.getModalitySentenceAccess().getModelityModalityEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__NegationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModalitySentenceAccess().getNegationNegationParserRuleCall_2_0()); }
		ruleNegation
		{ after(grammarAccess.getModalitySentenceAccess().getNegationNegationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__AuxiliarVerbAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModalitySentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_3_0()); }
		ruleAuxiliaryVerb
		{ after(grammarAccess.getModalitySentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__PredicateAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModalitySentenceAccess().getPredicatePredicateParserRuleCall_4_0()); }
		rulePredicate
		{ after(grammarAccess.getModalitySentenceAccess().getPredicatePredicateParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModalitySentence__ConstraintsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModalitySentenceAccess().getConstraintsConstraintsParserRuleCall_5_0()); }
		ruleConstraints
		{ after(grammarAccess.getModalitySentenceAccess().getConstraintsConstraintsParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__ActorsAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getActorsActorsParserRuleCall_0_0_0()); }
		ruleActors
		{ after(grammarAccess.getPredicateSentenceAccess().getActorsActorsParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__PredicateAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getPredicatePredicateParserRuleCall_0_1_0()); }
		rulePredicate
		{ after(grammarAccess.getPredicateSentenceAccess().getPredicatePredicateParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__ConstraintsAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getConstraintsConstraintsParserRuleCall_0_2_0()); }
		ruleConstraints
		{ after(grammarAccess.getPredicateSentenceAccess().getConstraintsConstraintsParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__ActorsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getActorsActorsParserRuleCall_1_0_0()); }
		ruleActors
		{ after(grammarAccess.getPredicateSentenceAccess().getActorsActorsParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__AuxiliarVerbAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_1_1_0()); }
		ruleAuxiliaryVerb
		{ after(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__NegationAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getNegationNegationParserRuleCall_1_2_0()); }
		ruleNegation
		{ after(grammarAccess.getPredicateSentenceAccess().getNegationNegationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__AuxiliarVerbAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_1_3_0()); }
		ruleAuxiliaryVerb
		{ after(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__PredicateAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getPredicatePredicateParserRuleCall_1_4_0()); }
		rulePredicate
		{ after(grammarAccess.getPredicateSentenceAccess().getPredicatePredicateParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__ConstraintsAssignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getConstraintsConstraintsParserRuleCall_1_5_0()); }
		ruleConstraints
		{ after(grammarAccess.getPredicateSentenceAccess().getConstraintsConstraintsParserRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__ActorsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getActorsActorsParserRuleCall_2_0_0()); }
		ruleActors
		{ after(grammarAccess.getPredicateSentenceAccess().getActorsActorsParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__AuxiliarVerbAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_2_1_0()); }
		ruleAuxiliaryVerb
		{ after(grammarAccess.getPredicateSentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__NegationAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getNegationNegationParserRuleCall_2_2_0()); }
		ruleNegation
		{ after(grammarAccess.getPredicateSentenceAccess().getNegationNegationParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__ObjectAssignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getObjectPredicateObjectParserRuleCall_2_3_0()); }
		rulePredicateObject
		{ after(grammarAccess.getPredicateSentenceAccess().getObjectPredicateObjectParserRuleCall_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateSentence__ConstraintsAssignment_2_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateSentenceAccess().getConstraintsConstraintsParserRuleCall_2_4_0()); }
		ruleConstraints
		{ after(grammarAccess.getPredicateSentenceAccess().getConstraintsConstraintsParserRuleCall_2_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__ActorsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistenceSentenceAccess().getActorsActorsParserRuleCall_1_0()); }
		ruleActors
		{ after(grammarAccess.getExistenceSentenceAccess().getActorsActorsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistenceSentence__RelativeClauseAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistenceSentenceAccess().getRelativeClauseRelativeClauseParserRuleCall_3_0()); }
		rulerelativeClause
		{ after(grammarAccess.getExistenceSentenceAccess().getRelativeClauseRelativeClauseParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__PropertyAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPropertyPropertyParserRuleCall_0_0_0()); }
		ruleProperty
		{ after(grammarAccess.getPropertySentenceAccess().getPropertyPropertyParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__ModelityAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getModelityModalityEnumRuleCall_0_1_0()); }
		ruleModality
		{ after(grammarAccess.getPropertySentenceAccess().getModelityModalityEnumRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__NegationAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getNegationNegationParserRuleCall_0_2_0()); }
		ruleNegation
		{ after(grammarAccess.getPropertySentenceAccess().getNegationNegationParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__AuxiliarVerbAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_0_3_0()); }
		ruleAuxiliaryVerb
		{ after(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__PredicateAssignment_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPredicatePredicateParserRuleCall_0_4_0()); }
		rulePredicate
		{ after(grammarAccess.getPropertySentenceAccess().getPredicatePredicateParserRuleCall_0_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__ConstraintsAssignment_0_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_0_5_0()); }
		ruleConstraints
		{ after(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_0_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__PropertyAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPropertyPropertyParserRuleCall_1_0_0()); }
		ruleProperty
		{ after(grammarAccess.getPropertySentenceAccess().getPropertyPropertyParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__ModelityAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getModelityModalityEnumRuleCall_1_1_0()); }
		ruleModality
		{ after(grammarAccess.getPropertySentenceAccess().getModelityModalityEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__NegationAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getNegationNegationParserRuleCall_1_2_0()); }
		ruleNegation
		{ after(grammarAccess.getPropertySentenceAccess().getNegationNegationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__AuxiliarVerbAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_1_3_0()); }
		ruleAuxiliaryVerb
		{ after(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__ObjectAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getObjectPredicateObjectParserRuleCall_1_4_0()); }
		rulePredicateObject
		{ after(grammarAccess.getPropertySentenceAccess().getObjectPredicateObjectParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__ConstraintsAssignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_1_5_0()); }
		ruleConstraints
		{ after(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__PropertyAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPropertyPropertyParserRuleCall_2_0_0()); }
		ruleProperty
		{ after(grammarAccess.getPropertySentenceAccess().getPropertyPropertyParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__AuxiliarVerbAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_2_1_0()); }
		ruleAuxiliaryVerb
		{ after(grammarAccess.getPropertySentenceAccess().getAuxiliarVerbAuxiliaryVerbParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__NegationAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getNegationNegationParserRuleCall_2_2_0()); }
		ruleNegation
		{ after(grammarAccess.getPropertySentenceAccess().getNegationNegationParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__PredicateAssignment_2_3_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPredicatePredicateParserRuleCall_2_3_0_0_0_0()); }
		rulePredicate
		{ after(grammarAccess.getPropertySentenceAccess().getPredicatePredicateParserRuleCall_2_3_0_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__ObjectAssignment_2_3_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getObjectPredicateObjectParserRuleCall_2_3_0_0_1_0()); }
		rulePredicateObject
		{ after(grammarAccess.getPropertySentenceAccess().getObjectPredicateObjectParserRuleCall_2_3_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__ConstraintsAssignment_2_3_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_2_3_0_1_0()); }
		ruleConstraints
		{ after(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_2_3_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__ConstraintsAssignment_2_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_2_3_1_0()); }
		ruleConstraints
		{ after(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_2_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__PropertyAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPropertyPropertyParserRuleCall_3_0_0()); }
		ruleProperty
		{ after(grammarAccess.getPropertySentenceAccess().getPropertyPropertyParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__PredicateWordAssignment_3_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPredicateWordWORDParserRuleCall_3_1_0_0()); }
		ruleWORD
		{ after(grammarAccess.getPropertySentenceAccess().getPredicateWordWORDParserRuleCall_3_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__PredicateWordAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getPredicateWordSTRINGTerminalRuleCall_3_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPropertySentenceAccess().getPredicateWordSTRINGTerminalRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__ObjectAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getObjectPredicateObjectParserRuleCall_3_2_0()); }
		rulePredicateObject
		{ after(grammarAccess.getPropertySentenceAccess().getObjectPredicateObjectParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertySentence__ConstraintsAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_3_3_0()); }
		ruleConstraints
		{ after(grammarAccess.getPropertySentenceAccess().getConstraintsConstraintsParserRuleCall_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__QuantifierAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getQuantifierQuantificationParserRuleCall_0_0_0()); }
		ruleQuantification
		{ after(grammarAccess.getPropertyAccess().getQuantifierQuantificationParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__ArticleAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getArticleArticlesParserRuleCall_0_1_0()); }
		ruleArticles
		{ after(grammarAccess.getPropertyAccess().getArticleArticlesParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__ArticleAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getArticleRefArticlesParserRuleCall_0_2_0()); }
		ruleRefArticles
		{ after(grammarAccess.getPropertyAccess().getArticleRefArticlesParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__ObjectAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getObjectWORDParserRuleCall_1_0_0()); }
		ruleWORD
		{ after(grammarAccess.getPropertyAccess().getObjectWORDParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__ObjectAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getObjectSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPropertyAccess().getObjectSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__PropertyAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getPropertyWORDParserRuleCall_3_0_0()); }
		ruleWORD
		{ after(grammarAccess.getPropertyAccess().getPropertyWORDParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__PropertyAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getPropertySTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPropertyAccess().getPropertySTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeClause__SentenceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeClauseAccess().getSentenceRelativeSentenceParserRuleCall_0_0()); }
		rulerelativeSentence
		{ after(grammarAccess.getRelativeClauseAccess().getSentenceRelativeSentenceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeClause__ConjunctionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeClauseAccess().getConjunctionConjunctionParserRuleCall_1_0_0()); }
		ruleConjunction
		{ after(grammarAccess.getRelativeClauseAccess().getConjunctionConjunctionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeClause__CondClausesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeClauseAccess().getCondClausesConditionalClauseParserRuleCall_1_1_0()); }
		ruleConditionalClause
		{ after(grammarAccess.getRelativeClauseAccess().getCondClausesConditionalClauseParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__PronounAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getPronounRelativePronounsSubjectParserRuleCall_0_0_0()); }
		ruleRelativePronounsSubject
		{ after(grammarAccess.getRelativeSentenceAccess().getPronounRelativePronounsSubjectParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__ModelityAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getModelityModalityEnumRuleCall_0_1_0()); }
		ruleModality
		{ after(grammarAccess.getRelativeSentenceAccess().getModelityModalityEnumRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__NegationAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getNegationNegationParserRuleCall_0_2_0()); }
		ruleNegation
		{ after(grammarAccess.getRelativeSentenceAccess().getNegationNegationParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__PredicateAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getPredicatePredicateParserRuleCall_0_3_0()); }
		rulePredicate
		{ after(grammarAccess.getRelativeSentenceAccess().getPredicatePredicateParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__ConstraintsAssignment_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getConstraintsConstraintsParserRuleCall_0_4_0()); }
		ruleConstraints
		{ after(grammarAccess.getRelativeSentenceAccess().getConstraintsConstraintsParserRuleCall_0_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__PronounAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getPronounRelativePronounsSubjectParserRuleCall_1_0_0()); }
		ruleRelativePronounsSubject
		{ after(grammarAccess.getRelativeSentenceAccess().getPronounRelativePronounsSubjectParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__AuxiliarAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getAuxiliarWORDParserRuleCall_1_1_0_0()); }
		ruleWORD
		{ after(grammarAccess.getRelativeSentenceAccess().getAuxiliarWORDParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__NegationAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getNegationNegationParserRuleCall_1_1_1_0()); }
		ruleNegation
		{ after(grammarAccess.getRelativeSentenceAccess().getNegationNegationParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__PredicateAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getPredicatePredicateParserRuleCall_1_2_0()); }
		rulePredicate
		{ after(grammarAccess.getRelativeSentenceAccess().getPredicatePredicateParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__ConstraintsAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getConstraintsConstraintsParserRuleCall_1_3_0()); }
		ruleConstraints
		{ after(grammarAccess.getRelativeSentenceAccess().getConstraintsConstraintsParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__PronounAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getPronounRelativePronounsObjectParserRuleCall_2_0_0()); }
		ruleRelativePronounsObject
		{ after(grammarAccess.getRelativeSentenceAccess().getPronounRelativePronounsObjectParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__ClauseAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getClauseModalitySentenceParserRuleCall_2_1_0_0()); }
		ruleModalitySentence
		{ after(grammarAccess.getRelativeSentenceAccess().getClauseModalitySentenceParserRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativeSentence__ClauseAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelativeSentenceAccess().getClausePredicateSentenceParserRuleCall_2_1_1_0()); }
		rulePredicateSentence
		{ after(grammarAccess.getRelativeSentenceAccess().getClausePredicateSentenceParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__ActorsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorsAccess().getActorsActorParserRuleCall_0_0()); }
		ruleActor
		{ after(grammarAccess.getActorsAccess().getActorsActorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__ConjunctionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorsAccess().getConjunctionConjunctionParserRuleCall_1_0_0()); }
		ruleConjunction
		{ after(grammarAccess.getActorsAccess().getConjunctionConjunctionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actors__ActorsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorsAccess().getActorsActorParserRuleCall_1_1_0()); }
		ruleActor
		{ after(grammarAccess.getActorsAccess().getActorsActorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__ActorAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getActorWORDParserRuleCall_1_0_0()); }
		ruleWORD
		{ after(grammarAccess.getActorAccess().getActorWORDParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__ActorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getActorSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getActorAccess().getActorSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__PredicatesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getPredicatesWORDParserRuleCall_0_0()); }
		ruleWORD
		{ after(grammarAccess.getPredicateAccess().getPredicatesWORDParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__PredicatesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getPredicatesSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPredicateAccess().getPredicatesSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__PredicatesAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getPredicatesWORDParserRuleCall_2_0_0()); }
		ruleWORD
		{ after(grammarAccess.getPredicateAccess().getPredicatesWORDParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__ObjectAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getObjectPredicateObjectParserRuleCall_2_1_0()); }
		rulePredicateObject
		{ after(grammarAccess.getPredicateAccess().getObjectPredicateObjectParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__ArticleAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getArticlePreNominativeParserRuleCall_0_0()); }
		rulePreNominative
		{ after(grammarAccess.getPredicateObjectAccess().getArticlePreNominativeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__ObjectAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getObjectWORDParserRuleCall_1_0_0()); }
		ruleWORD
		{ after(grammarAccess.getPredicateObjectAccess().getObjectWORDParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObject__ObjectAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectAccess().getObjectSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPredicateObjectAccess().getObjectSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistencePreface__ModifierAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistencePrefaceAccess().getModifierModifierEnumRuleCall_2_0()); }
		ruleModifier
		{ after(grammarAccess.getExistencePrefaceAccess().getModifierModifierEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__ObjectAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getObjectWORDParserRuleCall_1_0_0()); }
		ruleWORD
		{ after(grammarAccess.getObjectAccess().getObjectWORDParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__ObjectAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getObjectSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getObjectAccess().getObjectSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreNominative__DeterminerAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreNominativeAccess().getDeterminerQuantificationParserRuleCall_0_0()); }
		ruleQuantification
		{ after(grammarAccess.getPreNominativeAccess().getDeterminerQuantificationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreNominative__ArticleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreNominativeAccess().getArticleArticlesParserRuleCall_1_0()); }
		ruleArticles
		{ after(grammarAccess.getPreNominativeAccess().getArticleArticlesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreNominative__ArticleAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreNominativeAccess().getArticleRefArticlesParserRuleCall_2_0()); }
		ruleRefArticles
		{ after(grammarAccess.getPreNominativeAccess().getArticleRefArticlesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__TimeConstraintAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintsAccess().getTimeConstraintTimeConstraintParserRuleCall_0_0()); }
		ruleTimeConstraint
		{ after(grammarAccess.getConstraintsAccess().getTimeConstraintTimeConstraintParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__ConstraintAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintsAccess().getConstraintConstraintParserRuleCall_1_0()); }
		ruleConstraint
		{ after(grammarAccess.getConstraintsAccess().getConstraintConstraintParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__OrdinatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getOrdinatorConstraintOrdinatorsParserRuleCall_0_0()); }
		ruleConstraintOrdinators
		{ after(grammarAccess.getConstraintAccess().getOrdinatorConstraintOrdinatorsParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ConstraintAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getConstraintObjectConstraintParserRuleCall_1_0_0()); }
		ruleObjectConstraint
		{ after(grammarAccess.getConstraintAccess().getConstraintObjectConstraintParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ConstraintAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getConstraintUnitConstraintsParserRuleCall_1_1_0()); }
		ruleUnitConstraints
		{ after(grammarAccess.getConstraintAccess().getConstraintUnitConstraintsParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ConstraintAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getConstraintSetConstraintParserRuleCall_1_2_0()); }
		ruleSetConstraint
		{ after(grammarAccess.getConstraintAccess().getConstraintSetConstraintParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintOrdinators__StuffingAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintOrdinatorsAccess().getStuffingStuffWordParserRuleCall_0_0()); }
		ruleStuffWord
		{ after(grammarAccess.getConstraintOrdinatorsAccess().getStuffingStuffWordParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintOrdinators__AdverbialAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintOrdinatorsAccess().getAdverbialAdverbialParserRuleCall_1_0()); }
		ruleAdverbial
		{ after(grammarAccess.getConstraintOrdinatorsAccess().getAdverbialAdverbialParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintOrdinators__ComperatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintOrdinatorsAccess().getComperatorComperatorsParserRuleCall_2_0()); }
		ruleComperators
		{ after(grammarAccess.getConstraintOrdinatorsAccess().getComperatorComperatorsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetConstraint__SetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetConstraintAccess().getSetObjectSetParserRuleCall_0_0()); }
		ruleObjectSet
		{ after(grammarAccess.getSetConstraintAccess().getSetObjectSetParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetConstraint__SetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetConstraintAccess().getSetValueSetParserRuleCall_1_0()); }
		ruleValueSet
		{ after(grammarAccess.getSetConstraintAccess().getSetValueSetParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__OrdinatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeConstraintAccess().getOrdinatorConstraintOrdinatorsParserRuleCall_0_0()); }
		ruleConstraintOrdinators
		{ after(grammarAccess.getTimeConstraintAccess().getOrdinatorConstraintOrdinatorsParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__TimeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeConstraintAccess().getTimeINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getTimeConstraintAccess().getTimeINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__UnitAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeConstraintAccess().getUnitTimeUnitsParserRuleCall_2_0()); }
		ruleTimeUnits
		{ after(grammarAccess.getTimeConstraintAccess().getUnitTimeUnitsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConstraint__ObjectAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectConstraintAccess().getObjectObjectParserRuleCall_0()); }
		ruleObject
		{ after(grammarAccess.getObjectConstraintAccess().getObjectObjectParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__LowerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntervallConstraintsAccess().getLowerValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getIntervallConstraintsAccess().getLowerValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntervallConstraints__HigherAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntervallConstraintsAccess().getHigherValueParserRuleCall_3_0()); }
		ruleValue
		{ after(grammarAccess.getIntervallConstraintsAccess().getHigherValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleValueConstraints__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleValueConstraintsAccess().getValueValueParserRuleCall_0()); }
		ruleValue
		{ after(grammarAccess.getSingleValueConstraintsAccess().getValueValueParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__ElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueSetAccess().getElementsValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getValueSetAccess().getElementsValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueSet__ElementsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueSetAccess().getElementsValueParserRuleCall_2_1_0()); }
		ruleValue
		{ after(grammarAccess.getValueSetAccess().getElementsValueParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__ElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectSetAccess().getElementsObjectParserRuleCall_1_0()); }
		ruleObject
		{ after(grammarAccess.getObjectSetAccess().getElementsObjectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectSet__ElementsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectSetAccess().getElementsObjectParserRuleCall_2_1_0()); }
		ruleObject
		{ after(grammarAccess.getObjectSetAccess().getElementsObjectParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__UnitAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntValueAccess().getUnitUnitParserRuleCall_1_0()); }
		ruleUnit
		{ after(grammarAccess.getIntValueAccess().getUnitUnitParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0_0()); }
		RULE_FLOAT
		{ after(grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__UnitAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFloatValueAccess().getUnitUnitParserRuleCall_1_0()); }
		ruleUnit
		{ after(grammarAccess.getFloatValueAccess().getUnitUnitParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_WS_HYPHEN : ' - ';

RULE_PROPERTY_TERM : ('\'s'|'`s'|'\u00B4s');

RULE_FLOAT : RULE_INT '.' RULE_INT;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

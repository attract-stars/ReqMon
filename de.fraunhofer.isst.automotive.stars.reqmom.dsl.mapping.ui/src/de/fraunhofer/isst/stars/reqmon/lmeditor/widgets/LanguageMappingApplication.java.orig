package de.fraunhofer.isst.stars.reqmon.lmeditor.widgets;

import org.eclipse.swt.SWT;
<<<<<<< HEAD:de.fraunhofer.isst.automotive.stars.reqmom.dsl.mapping.ui/src/de/fraunhofer/isst/stars/reqmon/lmeditor/widgets/LanguageMappingApplication.java
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
=======
>>>>>>> origin/editor-language-mapping:de.fraunhofer.isst.automotive.stars.lmeditor/src/de/fraunhofer/isst/stars/lmeditor/widgets/LanguageMappingApplication.java
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
<<<<<<< HEAD:de.fraunhofer.isst.automotive.stars.reqmom.dsl.mapping.ui/src/de/fraunhofer/isst/stars/reqmon/lmeditor/widgets/LanguageMappingApplication.java
import org.eclipse.swt.widgets.Text;
import org.eclipse.xtext.parser.ParseException;
=======
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.widgets.Composite;
>>>>>>> origin/editor-language-mapping:de.fraunhofer.isst.automotive.stars.lmeditor/src/de/fraunhofer/isst/stars/lmeditor/widgets/LanguageMappingApplication.java

public class LanguageMappingApplication {
	
	private static Display display;
	private static CreateHelper helper; 
	private static RequirementElement reqElem;

	public static void main(String[] args) {

		display = new Display();
		helper = new CreateHelper(display);
		reqElem = new RequirementElement();
		
		Shell shell = new Shell(display);
		shell.setText("Language Mapping Editor");
		FormLayout shellLayout = new FormLayout();
		shell.setLayout(shellLayout);

		ScrolledComposite scrolledComposite = new ScrolledComposite(shell, SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
		scrolledComposite.setExpandVertical(true);
		scrolledComposite.setExpandHorizontal(true);
		scrolledComposite.addListener(SWT.Resize, event -> updateMinSize(scrolledComposite));
		
		Composite composite = new Composite(scrolledComposite, SWT.BORDER);
		FillLayout fillLayout = new FillLayout(SWT.VERTICAL);
		fillLayout.marginWidth = 10;
		fillLayout.marginHeight = 10;
		composite.setLayout(fillLayout);
		
		reqElem.createSampleElements();
		for (int i = 0; i < reqElem.getElementSize(); i++) {
			helper.createBoxItem(composite, reqElem.getElement(i), i+1);
		}
		
		scrolledComposite.setContent(composite);
		
		Button reqButton = new Button(shell, SWT.PUSH);
		reqButton.setText("requirements");
		reqButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Requirements called!");
				//RequirementTable table = new RequirementTable(display);
				//table.createTable();
			}
		});
		
		Button systemButton = new Button(shell, SWT.PUSH);
		systemButton.setText("system");
		systemButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("System called!");
			}
		});

		Composite buttonField = new Composite(shell, SWT.NONE);
		GridLayout buttonFieldLayout = new GridLayout();
		buttonFieldLayout.numColumns = 3;
		buttonField.setLayout(buttonFieldLayout);
		helper.createButtons(buttonField);

		FormData formData = new FormData();
		formData.top = new FormAttachment(0, 50);
		formData.bottom = new FormAttachment(100, -80);
		formData.left = new FormAttachment(0, 20);
		formData.right = new FormAttachment(100, -20);
		scrolledComposite.setLayoutData(formData);
		
		FormData formDataButton = new FormData();
		formDataButton.top = new FormAttachment(scrolledComposite, 5);
		formDataButton.right = new FormAttachment(100, -20);
		buttonField.setLayoutData(formDataButton);
		
		FormData formDataReqButton = new FormData();
		formDataReqButton.bottom = new FormAttachment(scrolledComposite, -10);
		formDataReqButton.left = new FormAttachment(0, 20);
		reqButton.setLayoutData(formDataReqButton);
		
		FormData formDataSysButton = new FormData();
		formDataSysButton.bottom = new FormAttachment(scrolledComposite, -10);
		formDataSysButton.right = new FormAttachment(100, -20);
		systemButton.setLayoutData(formDataSysButton);

		
		// Color
		//shell.setBackground(display.getSystemColor(SWT.COLOR_BLACK));
		//composite.setBackground(display.getSystemColor(SWT.COLOR_GRAY));
		//buttonField.setBackground(display.getSystemColor(SWT.COLOR_BLACK));

		shell.setSize(800, 600);
		shell.open();

		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
		display.dispose();
	}

	private static void updateMinSize(ScrolledComposite scrolledComposite) {
		Rectangle clientArea = scrolledComposite.getClientArea();
		clientArea.width -= scrolledComposite.getVerticalBar().getSize().x;
		Point minSize = scrolledComposite.getContent().computeSize(clientArea.width, SWT.DEFAULT);
		scrolledComposite.setMinSize(minSize);
	}
	
		

}

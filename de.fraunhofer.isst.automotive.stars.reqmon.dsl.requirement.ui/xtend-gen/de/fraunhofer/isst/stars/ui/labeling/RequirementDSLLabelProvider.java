/**
 * generated by Xtext 2.14.0
 */
package de.fraunhofer.isst.stars.ui.labeling;

import com.google.inject.Inject;
import de.fraunhofer.isst.stars.requirementDSL.Actor;
import de.fraunhofer.isst.stars.requirementDSL.Actors;
import de.fraunhofer.isst.stars.requirementDSL.AuxNeg;
import de.fraunhofer.isst.stars.requirementDSL.Clause;
import de.fraunhofer.isst.stars.requirementDSL.ClauseOrdinator;
import de.fraunhofer.isst.stars.requirementDSL.Clauses;
import de.fraunhofer.isst.stars.requirementDSL.ConditionalClause;
import de.fraunhofer.isst.stars.requirementDSL.Constraint;
import de.fraunhofer.isst.stars.requirementDSL.ConstraintOrdinators;
import de.fraunhofer.isst.stars.requirementDSL.Constraints;
import de.fraunhofer.isst.stars.requirementDSL.ExistenceSentence;
import de.fraunhofer.isst.stars.requirementDSL.FloatValue;
import de.fraunhofer.isst.stars.requirementDSL.IntValue;
import de.fraunhofer.isst.stars.requirementDSL.IntervallConstraints;
import de.fraunhofer.isst.stars.requirementDSL.MainClause;
import de.fraunhofer.isst.stars.requirementDSL.Modality;
import de.fraunhofer.isst.stars.requirementDSL.ModalitySentence;
import de.fraunhofer.isst.stars.requirementDSL.Modifier;
import de.fraunhofer.isst.stars.requirementDSL.ObjectConstraint;
import de.fraunhofer.isst.stars.requirementDSL.ObjectSet;
import de.fraunhofer.isst.stars.requirementDSL.PreNominative;
import de.fraunhofer.isst.stars.requirementDSL.PredOrObject;
import de.fraunhofer.isst.stars.requirementDSL.Predicate;
import de.fraunhofer.isst.stars.requirementDSL.PredicateObject;
import de.fraunhofer.isst.stars.requirementDSL.PredicateSentence;
import de.fraunhofer.isst.stars.requirementDSL.Preds;
import de.fraunhofer.isst.stars.requirementDSL.Property;
import de.fraunhofer.isst.stars.requirementDSL.PropertySentence;
import de.fraunhofer.isst.stars.requirementDSL.RelObjects;
import de.fraunhofer.isst.stars.requirementDSL.Relation;
import de.fraunhofer.isst.stars.requirementDSL.Requirement;
import de.fraunhofer.isst.stars.requirementDSL.RequirementText;
import de.fraunhofer.isst.stars.requirementDSL.SentenceBegin;
import de.fraunhofer.isst.stars.requirementDSL.SentenceEnding;
import de.fraunhofer.isst.stars.requirementDSL.SetConstraint;
import de.fraunhofer.isst.stars.requirementDSL.SingleValueConstraints;
import de.fraunhofer.isst.stars.requirementDSL.TimeConstraint;
import de.fraunhofer.isst.stars.requirementDSL.UnitConstraints;
import de.fraunhofer.isst.stars.requirementDSL.ValueSet;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class RequirementDSLLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public RequirementDSLLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final Requirement ele) {
    String _xifexpression = null;
    String _reqID = ele.getReqID();
    boolean _tripleNotEquals = (_reqID != null);
    if (_tripleNotEquals) {
      String _reqID_1 = ele.getReqID();
      _xifexpression = ("Requirement: " + _reqID_1);
    } else {
      _xifexpression = "Requirement";
    }
    return _xifexpression;
  }
  
  public String text(final RequirementText ele) {
    return "RequirementText";
  }
  
  public String text(final ConditionalClause ele) {
    String _xifexpression = null;
    ClauseOrdinator _ordinator = ele.getOrdinator();
    boolean _tripleNotEquals = (_ordinator != null);
    if (_tripleNotEquals) {
      String _string = ele.getOrdinator().toString();
      _xifexpression = ("ConditionalClause: " + _string);
    } else {
      _xifexpression = "ConditionalClause";
    }
    return _xifexpression;
  }
  
  public String text(final MainClause ele) {
    String _xifexpression = null;
    if (((ele.getModifier() != null) && (!ele.getModifier().equals(Modifier.GLOBALLY)))) {
      String _string = ele.getModifier().toString();
      _xifexpression = ("MainClause: " + _string);
    } else {
      _xifexpression = "MainClause";
    }
    return _xifexpression;
  }
  
  public String text(final Clauses ele) {
    String _xifexpression = null;
    boolean _isEmpty = ele.getConjunction().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<String> _conjunction = ele.getConjunction();
      _xifexpression = ("Clauses: " + _conjunction);
    } else {
      _xifexpression = "Clauses";
    }
    return _xifexpression;
  }
  
  public String text(final Clause ele) {
    return "Clause";
  }
  
  public String text(final ModalitySentence ele) {
    String _xifexpression = null;
    Modality _modelity = ele.getModelity();
    boolean _tripleNotEquals = (_modelity != null);
    if (_tripleNotEquals) {
      String _xifexpression_1 = null;
      boolean _isNegation = ele.isNegation();
      if (_isNegation) {
        String _xifexpression_2 = null;
        String _auxiliarVerb = ele.getAuxiliarVerb();
        boolean _tripleNotEquals_1 = (_auxiliarVerb != null);
        if (_tripleNotEquals_1) {
          String _lowerCase = ele.getModelity().getName().toLowerCase();
          String _plus = ("ModalitySentence: " + _lowerCase);
          String _plus_1 = (_plus + " not ");
          String _auxiliarVerb_1 = ele.getAuxiliarVerb();
          _xifexpression_2 = (_plus_1 + _auxiliarVerb_1);
        } else {
          String _lowerCase_1 = ele.getModelity().getName().toLowerCase();
          String _plus_2 = ("ModalitySentence: " + _lowerCase_1);
          _xifexpression_2 = (_plus_2 + " not");
        }
        _xifexpression_1 = _xifexpression_2;
      } else {
        String _xifexpression_3 = null;
        String _auxiliarVerb_2 = ele.getAuxiliarVerb();
        boolean _tripleNotEquals_2 = (_auxiliarVerb_2 != null);
        if (_tripleNotEquals_2) {
          String _lowerCase_2 = ele.getModelity().getName().toLowerCase();
          String _plus_3 = ("ModalitySentence: " + _lowerCase_2);
          String _plus_4 = (_plus_3 + " ");
          String _auxiliarVerb_3 = ele.getAuxiliarVerb();
          _xifexpression_3 = (_plus_4 + _auxiliarVerb_3);
        } else {
          String _lowerCase_3 = ele.getModelity().getName().toLowerCase();
          _xifexpression_3 = ("ModalitySentence: " + _lowerCase_3);
        }
        _xifexpression_1 = _xifexpression_3;
      }
      _xifexpression = _xifexpression_1;
    } else {
      String _xifexpression_4 = null;
      boolean _isNegation_1 = ele.isNegation();
      if (_isNegation_1) {
        String _xifexpression_5 = null;
        String _auxiliarVerb_4 = ele.getAuxiliarVerb();
        boolean _tripleNotEquals_3 = (_auxiliarVerb_4 != null);
        if (_tripleNotEquals_3) {
          String _auxiliarVerb_5 = ele.getAuxiliarVerb();
          _xifexpression_5 = ("ModalitySentence: not " + _auxiliarVerb_5);
        } else {
          _xifexpression_5 = "ModalitySentence: not";
        }
        _xifexpression_4 = _xifexpression_5;
      } else {
        String _xifexpression_6 = null;
        String _auxiliarVerb_6 = ele.getAuxiliarVerb();
        boolean _tripleNotEquals_4 = (_auxiliarVerb_6 != null);
        if (_tripleNotEquals_4) {
          String _auxiliarVerb_7 = ele.getAuxiliarVerb();
          _xifexpression_6 = ("ModalitySentence: " + _auxiliarVerb_7);
        } else {
          _xifexpression_6 = "ModalitySentence";
        }
        _xifexpression_4 = _xifexpression_6;
      }
      _xifexpression = _xifexpression_4;
    }
    return _xifexpression;
  }
  
  public String text(final PredicateSentence ele) {
    String _xifexpression = null;
    boolean _isEmpty = ele.getAuxiliarVerb().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      String _join = IterableExtensions.join(ele.getAuxiliarVerb(), " ");
      _xifexpression = ("PredicateSentence: " + _join);
    } else {
      _xifexpression = "PredicateSentence";
    }
    return _xifexpression;
  }
  
  public String text(final ExistenceSentence ele) {
    return "ExistenceSentence";
  }
  
  public String text(final PropertySentence ele) {
    String _xifexpression = null;
    if (((ele.getModality() != null) && (!ele.getModality().equals(Modality.SHALL)))) {
      Modality _modality = ele.getModality();
      _xifexpression = ("PropertySentence: " + _modality);
    } else {
      String _xifexpression_1 = null;
      if (((ele.getModality() != null) && ele.isNegation())) {
        Modality _modality_1 = ele.getModality();
        String _plus = ("PropertySentence: " + _modality_1);
        _xifexpression_1 = (_plus + " not");
      } else {
        String _xifexpression_2 = null;
        String _auxiliarVerb = ele.getAuxiliarVerb();
        boolean _tripleNotEquals = (_auxiliarVerb != null);
        if (_tripleNotEquals) {
          String _auxiliarVerb_1 = ele.getAuxiliarVerb();
          _xifexpression_2 = ("PropertySentence: " + _auxiliarVerb_1);
        } else {
          String _xifexpression_3 = null;
          if (((ele.getAuxiliarVerb() != null) && ele.isNegation())) {
            String _auxiliarVerb_2 = ele.getAuxiliarVerb();
            String _plus_1 = ("PropertySentence: " + _auxiliarVerb_2);
            _xifexpression_3 = (_plus_1 + " not");
          } else {
            _xifexpression_3 = "PropertySentence";
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public String text(final Property ele) {
    String _xifexpression = null;
    boolean _isEmpty = ele.getProperty().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      String _join = IterableExtensions.join(ele.getProperty(), " ");
      _xifexpression = ("Property: " + _join);
    } else {
      _xifexpression = "Property";
    }
    return _xifexpression;
  }
  
  public String text(final Actors ele) {
    String _xifexpression = null;
    boolean _isEmpty = ele.getConjunction().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<String> _conjunction = ele.getConjunction();
      _xifexpression = ("Actors: " + _conjunction);
    } else {
      _xifexpression = "Actors";
    }
    return _xifexpression;
  }
  
  public String text(final Actor ele) {
    String _actor = ele.getActor();
    return ("Actor: " + _actor);
  }
  
  public String text(final Predicate ele) {
    String _xifexpression = null;
    EList<String> _predicates = ele.getPredicates();
    boolean _tripleNotEquals = (_predicates != null);
    if (_tripleNotEquals) {
      String _join = IterableExtensions.join(ele.getPredicates(), " ");
      _xifexpression = ("Predicate: " + _join);
    } else {
      _xifexpression = "Predicate";
    }
    return _xifexpression;
  }
  
  public String text(final PredicateObject ele) {
    String _join = IterableExtensions.join(ele.getObject(), " ");
    return ("PredicateObject: " + _join);
  }
  
  public String text(final PreNominative ele) {
    String _xifexpression = null;
    String _article = ele.getArticle();
    boolean _tripleNotEquals = (_article != null);
    if (_tripleNotEquals) {
      String _article_1 = ele.getArticle();
      _xifexpression = ("Article: " + _article_1);
    } else {
      String _xifexpression_1 = null;
      String _article_2 = ele.getArticle();
      boolean _tripleNotEquals_1 = (_article_2 != null);
      if (_tripleNotEquals_1) {
        String _article_3 = ele.getArticle();
        _xifexpression_1 = ("Determiner: " + _article_3);
      } else {
        _xifexpression_1 = "PreNominative";
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public String text(final de.fraunhofer.isst.stars.requirementDSL.Object ele) {
    String _join = IterableExtensions.join(ele.getObject(), " ");
    return ("Object: " + _join);
  }
  
  public String text(final Constraint ele) {
    return "Constraint";
  }
  
  public String text(final Constraints ele) {
    return "Constraints";
  }
  
  public String text(final ConstraintOrdinators ele) {
    String _xifexpression = null;
    if ((((ele.getStuffing() != null) && (ele.getAdverbial() != null)) && (ele.getComperator() != null))) {
      String _stuffing = ele.getStuffing();
      String _plus = ("ConstraintOrdinators: " + _stuffing);
      String _plus_1 = (_plus + " ");
      String _adverbial = ele.getAdverbial();
      String _plus_2 = (_plus_1 + _adverbial);
      String _plus_3 = (_plus_2 + " ");
      String _comperator = ele.getComperator();
      _xifexpression = (_plus_3 + _comperator);
    } else {
      String _xifexpression_1 = null;
      if (((ele.getStuffing() != null) && (ele.getAdverbial() != null))) {
        String _stuffing_1 = ele.getStuffing();
        String _plus_4 = ("ConstraintOrdinators: " + _stuffing_1);
        String _plus_5 = (_plus_4 + " ");
        String _adverbial_1 = ele.getAdverbial();
        _xifexpression_1 = (_plus_5 + _adverbial_1);
      } else {
        String _xifexpression_2 = null;
        String _stuffing_2 = ele.getStuffing();
        boolean _tripleNotEquals = (_stuffing_2 != null);
        if (_tripleNotEquals) {
          String _stuffing_3 = ele.getStuffing();
          _xifexpression_2 = ("ConstraintOrdinators: " + _stuffing_3);
        } else {
          String _xifexpression_3 = null;
          if (((ele.getAdverbial() != null) && (ele.getComperator() != null))) {
            String _adverbial_2 = ele.getAdverbial();
            String _plus_6 = ("ConstraintOrdinators: " + _adverbial_2);
            String _plus_7 = (_plus_6 + " ");
            String _comperator_1 = ele.getComperator();
            _xifexpression_3 = (_plus_7 + _comperator_1);
          } else {
            String _xifexpression_4 = null;
            String _adverbial_3 = ele.getAdverbial();
            boolean _tripleNotEquals_1 = (_adverbial_3 != null);
            if (_tripleNotEquals_1) {
              String _adverbial_4 = ele.getAdverbial();
              _xifexpression_4 = ("ConstraintOrdinators: " + _adverbial_4);
            } else {
              String _xifexpression_5 = null;
              if (((ele.getStuffing() != null) && (ele.getComperator() != null))) {
                String _stuffing_4 = ele.getStuffing();
                String _plus_8 = ("ConstraintOrdinators: " + _stuffing_4);
                String _plus_9 = (_plus_8 + " ");
                String _comperator_2 = ele.getComperator();
                _xifexpression_5 = (_plus_9 + _comperator_2);
              } else {
                String _xifexpression_6 = null;
                String _comperator_3 = ele.getComperator();
                boolean _tripleNotEquals_2 = (_comperator_3 != null);
                if (_tripleNotEquals_2) {
                  String _comperator_4 = ele.getComperator();
                  _xifexpression_6 = ("ConstraintOrdinators: " + _comperator_4);
                } else {
                  _xifexpression_6 = "ConstraintOrdinators";
                }
                _xifexpression_5 = _xifexpression_6;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public String text(final SetConstraint ele) {
    return "SetConstraint";
  }
  
  public String text(final TimeConstraint ele) {
    return "TimeConstraint";
  }
  
  public String text(final ObjectConstraint ele) {
    return "ObjectConstraint";
  }
  
  public String text(final UnitConstraints ele) {
    return "UnitConstraint";
  }
  
  public String text(final IntervallConstraints ele) {
    return "IntervallConstraints";
  }
  
  public String text(final SingleValueConstraints ele) {
    return "SingleValueConstraints";
  }
  
  public String text(final ValueSet ele) {
    return "ValueSet";
  }
  
  public String text(final ObjectSet ele) {
    return "ObjectSet";
  }
  
  public String text(final IntValue ele) {
    String _xifexpression = null;
    String _unit = ele.getUnit();
    boolean _tripleNotEquals = (_unit != null);
    if (_tripleNotEquals) {
      int _value = ele.getValue();
      String _plus = ("IntValue: " + Integer.valueOf(_value));
      String _plus_1 = (_plus + " ");
      String _unit_1 = ele.getUnit();
      _xifexpression = (_plus_1 + _unit_1);
    } else {
      _xifexpression = "IntValue";
    }
    return _xifexpression;
  }
  
  public String text(final FloatValue ele) {
    String _xifexpression = null;
    String _unit = ele.getUnit();
    boolean _tripleNotEquals = (_unit != null);
    if (_tripleNotEquals) {
      float _value = ele.getValue();
      String _plus = ("FloatValue: " + Float.valueOf(_value));
      String _plus_1 = (_plus + " ");
      String _unit_1 = ele.getUnit();
      _xifexpression = (_plus_1 + _unit_1);
    } else {
      _xifexpression = "FloatValue";
    }
    return _xifexpression;
  }
  
  public String text(final SentenceBegin ele) {
    return "SentenceBegin";
  }
  
  public String text(final SentenceEnding ele) {
    return "SentenceEnding";
  }
  
  public String text(final Relation ele) {
    String _xifexpression = null;
    if ((((ele.getRelComp() != null) && (ele.getRelDel() != null)) && (ele.getRelposAdv() != null))) {
      String _relposAdv = ele.getRelposAdv();
      String _plus = ("Relation: " + _relposAdv);
      String _plus_1 = (_plus + " ");
      String _relDel = ele.getRelDel();
      String _plus_2 = (_plus_1 + _relDel);
      String _plus_3 = (_plus_2 + " ");
      String _relComp = ele.getRelComp();
      _xifexpression = (_plus_3 + _relComp);
    } else {
      _xifexpression = "Relation";
    }
    return _xifexpression;
  }
  
  public String text(final RelObjects ele) {
    return "RelObjects";
  }
  
  public String text(final PredOrObject ele) {
    return "PredicateOrObject";
  }
  
  public String text(final AuxNeg ele) {
    String _xifexpression = null;
    String _auxiliarVerb = ele.getAuxiliarVerb();
    boolean _tripleNotEquals = (_auxiliarVerb != null);
    if (_tripleNotEquals) {
      String _auxiliarVerb_1 = ele.getAuxiliarVerb();
      _xifexpression = ("AuxNeg: " + _auxiliarVerb_1);
    } else {
      String _xifexpression_1 = null;
      if (((ele.getAuxiliarVerb() != null) && (ele.getNegation() != null))) {
        String _auxiliarVerb_2 = ele.getAuxiliarVerb();
        String _plus = ("AuxNeg: " + _auxiliarVerb_2);
        String _plus_1 = (_plus + " ");
        String _negation = ele.getNegation();
        _xifexpression_1 = (_plus_1 + _negation);
      } else {
        String _xifexpression_2 = null;
        String _auxiliarVerbNeg = ele.getAuxiliarVerbNeg();
        boolean _tripleNotEquals_1 = (_auxiliarVerbNeg != null);
        if (_tripleNotEquals_1) {
          String _auxiliarVerbNeg_1 = ele.getAuxiliarVerbNeg();
          _xifexpression_2 = ("AuxNeg: " + _auxiliarVerbNeg_1);
        } else {
          _xifexpression_2 = "AuxNeg";
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public String text(final Preds ele) {
    return "Predicate or PredicateObject";
  }
}
